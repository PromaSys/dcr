var LastFunction;
var LastPopPickere;
var LastPPopPickerf;
var LastPopPickerw;
var NoExec = false;

var LastPopSpreade;
var LastPopSpreadf;

var SpreadOD = [];

/*
var SpreadInterval;

var SpreadInterval = window.setInterval(function () {
    var today = new Date();
    var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();

    // get cookie
    var SpreadStatus = GetCookie('AppStatus');
    $('#spnSpreadStatus').html(time + ' ' + SpreadStatus);
}, 1000);
*/

function setHeight() {

    // only for site master pages
    if ($('.navbar-header').length == 0) return;

    var windowHeight = $(window).innerHeight();
    $('.pageheight').css('height', windowHeight - 105, 'overflow', 'auto');
    var menuHeight = $('.navbar-header').innerHeight();
    var footerHeight = $('.footer').innerHeight();
    if (footerHeight == null) {
        footerHeight = 0;
    }
    var AvailableClientHeight = (windowHeight * 1.0) - (menuHeight * 1.0) - (footerHeight * 1.0);

    //$('.tablediv').css('height', windowHeight - 105);
    SetCookie("AvailableClientHeight", AvailableClientHeight, 7);

    SetCookie("WindowInnerHeight", windowHeight, 1);
    SetCookie("WindowInnerWidth", $(window).innerWidth(), 1);


};

function FixedHeaders(s) {

    var selector = "table.fixedheader";

    if (s != null) {
        selector = s + ".table.fixedheader";
    }

    // ie 11
    if (navigator.userAgent.indexOf('Trident') == -1) {
    //if (1 == 1) {

        $(selector).each(function () {

            var top = this.offsetTop + 1;

            var FixedRows = $(this).find('thead>tr');

            // get second row height
            FixedRows.each(function (index) {

                if ($(this).css('display') != 'none') {
                    var h = $(this).height();

                    $(this).find('>th').css('top', top + 'px');

                    $(this).find('>th').has('.SearchField').css('vertical-align', 'top');

                    top += h - 1;
                }
            });

        });

    }
    else {

        $(selector).each(function (index, value) {

            if ($(value).find('thead').length > 1) {
                $(value).find('thead:first').remove();
                // $('thead:first').remove();
            }

            var TableOffset = $(value).position();
            var x = TableOffset.left;
            var y = TableOffset.top;
            var sw = 0;
            var sh = 0;
            var sx = 0;
            var hx = 2;

            if (navigator.appName == "Microsoft Internet Explorer") {
                c = $(value).find('thead:last tr th').length * 1.0;
                //sw = 34.0 / c;
                sw = 10.0;
                sh = 1.0;
                sx = 0.0;
            }

            var hcfirst = parseFloat($(value).find('thead:last tr:first').css("height"));
            var hclast = parseFloat($(value).find('thead:last tr:last').css("height"));

            var thTopFirst = $(value).find('thead tr:first th:first').position().top + sh;
            var thTopLast = $(value).find('thead tr:last th:first').position().top + sh;

            var thtfirst = $(value).find('thead tr:first th');
            var thtlast = $(value).find('thead tr:last th');

            $(value).find('thead').clone().insertBefore('#' + value.id + ' thead').css({ 'background-color': 'white' });

            /*
            // replace th with tr in last header
            $('thead:last tr').each(function () {
                $(this).html($(this).html().replace(/th/gi, "td"));
            });
            */

            $(value).find('thead:first tr:first th').each(function (index, value) { $(value).css({ 'position': 'absolute', 'background-color': 'white', '_z-index': '1000' }) });
            $(value).find('thead:first tr:last th').each(function (index, value) { $(value).css({ 'position': 'absolute', 'background-color': 'white', '_z-index': '1000' }) });


            $(value).find('thead:first tr:last th').each(function (index, value) {
                if (index == thtlast.length - 1 && navigator.appName == "Microsoft Internet Explorer") {
                    sw += 16;
                }
                $(value).css({ 'top': thTopLast + 'px', 'left': (thtlast[index].offsetLeft + x) + 'px', 'width': (thtlast[index].offsetWidth - sw - sx) + 'px', 'height': (thtlast[index].offsetHeight + hx) + 'px' })
            });

            if (navigator.appName == "Microsoft Internet Explorer") {
                sw = 10;
            }

            $(value).find('thead:first tr:first th').each(function (index, value) {
                if (index == thtfirst.length - 1 && navigator.appName == "Microsoft Internet Explorer") {
                    sw += 16;
                }
                $(value).css({ 'top': thTopFirst + 'px', 'left': (thtfirst[index].offsetLeft + x) + 'px', 'width': (thtfirst[index].offsetWidth - sw - sx) + 'px', 'height': (thtfirst[index].offsetHeight + hx) + 'px' })
            });

        });
    }
}

$(document).ready(function () {
    
    setHeight();
    FixedHeaders();
    
    //initialize column sorting    
    $(document).find('.js-dynamitable').each(function () {

        $(this).find('thead:first tr:last th').addClass('js-sorter sortnew');
        
        $(this).dynamitable()
            //.addFilter('.js-filter')
            .addSorter('.js-sorter', 'asc')
            //.addSorter('.js-sorter-desc', 'desc')
        ;
        
    });

    // highlight active menu
    $('.active').hide();
    var hash = window.location.pathname.split("/").pop();

    if (hash) {
        //var selectedTab = $('.nav li a[href="../' + hash + '"]');
        var selectedTab = $('.nav li a[href="' + hash + '"]');
        selectedTab.addClass("activetab");
    }

    $.support.transition = false;

    $('#tabvgParameters.vgTitle').css('text-align', 'center');

    // initialize datepicker
    $('.datepicker').datepicker({
        dateFormat: 'm/d/yy',
        autoclose: true,
        width: 300
    });
    
    // Expand and collapse row groups
    SetRowGroups();

    // highlight current row for hg
    $('.hg').on('mousedown', 'tbody tr', function (event) {
        if ($(this).parent().parent().hasClass('hgTitleSplitter')) return;
        $(this).addClass('hghighlight').siblings().removeClass('hghighlight');
    });

    // position left menu vertical scrollbar
    if (document.getElementById("divLeftMenu") != null) {
        document.getElementById("divLeftMenu").scrollTop = GetCookie("divLeftMenu");
    }

    // hg vertical scroll top
    var st = GetCookie('hgScrollTop');
    if (st != null && st != 'undefined') {
        document.getElementById("divBody").scrollTop = st;
        SetCookie('hgScrollTop', 0, -1);

        var kfv = GetCookie('hgHighlightedID');
        if (kfv != null) {
            $('tr[kfv="' + kfv + '"]').addClass('hghighlight');
        }
    }


    // After resize events
    var id;
    var startWidth = window.innerWidth; //get the original screen width

    $(window).resize(function () {
        clearTimeout(id);
        id = setTimeout(doneResizing, 500);
    });
    function doneResizing() {
        
        ResizeContent();
    }

});

// resize
function ResizeContent() {

    var oh = GetCookie("WindowInnerHeight");
    var ow = GetCookie("WindowInnerWidth");

    setHeight();
    FixedHeaders();
    //location.reload();

    var nh = $(window).innerHeight();
    var nw = $(window).innerWidth();

    var hx = nh / oh;
    var wx = nw / ow;

    // rescale background images
    /*
    $('.bgImage').each(function () {
        var d = this.id;
        $("#" + d).load(location.href + " #" + d);
    });
    */

    // rescale and relocate popups
    $('div.ui-dialog').each(function () {
        //this.style.width = (parseInt(this.style.width) * wx) + "px";
        //this.style.height = (parseInt(this.style.height) * hx) + "px";
        this.style.top = (parseInt(this.style.top) * hx) + "px";
        this.style.left = (parseInt(this.style.left) * wx) + "px";

    });
}

//#region update hg changes
function GridRowClicked(e, gid, r)
{
    if (e.innerHTML.toString().toLowerCase().indexOf("input") > -1) return false;

    //get row being edited
    var re = $("table[id*=" + gid + "] tbody tr input").first();
    var reindex;

    if (re.length == 1)
    {
        reindex = re[0].parentNode.parentNode.rowIndex;

        __doPostBack('ctl00$MainContent$' + gid, 'Update$' + r);
    }
    else
    {
        __doPostBack('ctl00$MainContent$' + gid, 'Edit$' + r);
    }



}

function GetResultTextBox(e) {
    var result = e.value;
    //var resultkey = result;
    e.setAttribute("result", result);
    //e.setAttribute("resultkey", result);
}

function GetResultTextArea(e) {

    var result = e.value;

    if ($(e).attr('tm') == '1') { // tinymce
        e.setAttribute("result", result);
    }
    else {
        //var resultkey = result;
        result = result.replace(/\r\n/g, '<br>');
        result = result.replace(/\r?\n/g, '<br>');
        e.setAttribute("result", result);
    }
}

function GetResultSelect(e) {
    var resultkey = e.options[e.selectedIndex].value;
    var result = e.options[e.selectedIndex].innerHTML;

    /*
    if (result == "Additional Insured Endorsement") {
        var $t = $(e).closest('.table');
        var dc = $t("[class^='Certificates_']").eq[0].html();
    }
    */

    if (result == "Not in this list") {
        AddNewDropDownItem(e);
        return;
    }

    var Changed = false;

    if (resultkey != e.getAttribute("resultkey")) {
        Changed = true;
    }

    e.setAttribute("result", result);
    e.setAttribute("resultkey", resultkey);

    if (Changed) {
        FilterCascading(e);
    }
}

function GetResultMultiSelect(e) {
    
    //var $tb = $(e).closest('table');
    var cbks = $(e).find('input');
    var resultkey = "";
    var result = "";

    for (var i = 0; i < cbks.length; i++){
        var cbk = cbks[i];
        if (cbk.checked) {
            resultkey += cbk.value + ", ";
            result += cbk.nextSibling.nodeValue + ", ";
        }
    }
    
    if (resultkey != "") {
        resultkey = resultkey.substr(0, resultkey.length - 2);
        result = result.substr(0, result.length - 2);
    }

    $(e).attr("result", result);
    $(e).attr("resultkey", resultkey);
}

function GetResultCheckBox(e) {
    
    var result = "";
    var resultkey = "";
    
    if (e.checked) {
        //result = "☑"; //"&#9745;";
        result = "✓";
        resultkey = "1";
    }
    else
    {
        //result = "☐"; //"&#9744;";
        result = "";
        resultkey = "0";
    }

    e.setAttribute("result", result);
    e.setAttribute("resultkey", resultkey);
}

function GetResultCalendar(e) {
    var result = e.value;
    //var resultkey = result;
    e.parentNode.setAttribute("result", result);
    //alert(e.value);
}

function UpdateTemplate(e) {

    var template = e.getAttribute('template');

    switch (template) {
        case 'text':
            GetResultTextBox(e);
            break;
        case 'checkbox':
            GetResultCheckBox(e);
            break;
        case 'select':
            GetResultSelect(e)
            break;
        case 'multipleselect':
            GetResultMultiSelect(e);
            break;
        case 'calendar':
            GetResultCalendar(e.childNodes[0]);
            break;
        case 'textarea':
            GetResultTextArea(e);
            break;
    }

}
//#endregion update hg changes


//#region datepicker
function InitializeDatePicker() {
    setTimeout("SetDatePicker()", 500);
}

function SetDatePicker() {
    return;
    $('.datepicker').datepicker({
        dateFormat: 'm/d/yy',
        autoclose: true /*,
        onSelect: function (t, e) {
            $(this).datepicker('destroy');
            setTimeout(function () { SetDatePicker(); }, 1000);
        }*/
    });
}
//#endregion datepicker

// hg pop edit fields
function hgEdit(e) {
    //debugger;
    //check if item is edited
    if ($(e).hasClass("RowEdit")) return;

    var valid = true;
    var Change = "";

    var $tb = $(e).closest('table');

    var $r = $tb.find('tbody tr.RowEdit');
    
    if ($r.length > 0) {
        var $Results = $r.find('.hgResult');
        var TableID = $tb[0].id;
        var kfv = $r.attr('kfv');

        // validate and save last edited
        valid = ProcessChange(TableID, kfv, $Results, "");
            
        if (valid) {
            /*
            $r.children('td').each(function (index) {
                $(this).attr('key', $Results.eq(index).attr('resultkey'));
                $(this).html($Results.eq(index).attr('result'));
            });
            */
            $Results.each(function () {
                $(this).parent('td').attr('key', $(this).attr('resultkey'));
                $(this).parent('td').html($(this).attr('result'));
            });

            $r.removeClass("RowEdit");
        }
       
    }

    if (valid) {

        // edit new row
        $(e).addClass("RowEdit");
        // get spec
        var $ths = $tb.find('.hgHeaderRow:first th');

        $(e).children('td').each(function (index) {

            var ftp = $ths.eq(index).attr('ftp');
            var fd = $ths.eq(index).attr('fd');
            var fde = $ths.eq(index).attr('fde');
            var ftpAttr = "";
            var id = $ths.eq(index).attr('id')

            // change the ID to the field name
            ftp = ftp.replace(/_id=/g, "id=");

            var Key = $(this).attr('key');
            //var Text = $(this).text();
            var Text = $(this).html();
            var OldKey = Key;
            var OldText = Text;

            if (ftp.indexOf("template='textarea'") > -1) {
                Text = $(this).html().replace(/<br>/g, "&#13;&#10;");
                OldText = Text;
            }

            if (Text == "" && fde != "") {
                Text = fde;
                OldText = "";
            }

            if (ftp != "") {
                ftpAttr += "class='hgResult' ";
                ftpAttr += "oresult='" + OldText + "' ";
                ftpAttr += "oresultkey='" + OldKey + "' ";
                ftpAttr += "result='" + Text + "' ";
                ftpAttr += "resultkey='" + Key + "' ";
                ftpAttr += "tdo='" + index + "' ";
                ftpAttr += "style='_width: 95%;' ";

                if (ftp.indexOf("template='select'") > -1) {
                    //ftpAttr += "_onchange='GetResultSelect(this);' ";
                    //ftpAttr = ftpAttr.replace("style='_width: 95%;'", "style='width: auto;'");
                    ftp = ftp.replace("value='" + Key + "'", "value='" + Key + "' selected='selected'")
                    ftp = ftp.replace(/<select/i, "<select " + ftpAttr);
                    ftp = ftp.replace('hgResult', 'hgResult form-control');
                }
                else if (ftp.indexOf("template='multipleselect'") > -1) {
                    //ftpAttr += "onchange='GetResultMultiSelect(this);' ";
                    var values = $(this).attr('key').split(", ");
                    for (var i = 0; i < values.length; i++)
                    {
                        ftp = ftp.replace("value='" + values[i] + "'", "value='" + values[i] + "' checked");
                    }
                    ftp = ftp.replace(/value=/gi, " _onclick='GetResultMultiSelect(this);' value=");

                    ftp = ftp.replace(/<table/i, "<table " + ftpAttr);
                }
                else if (ftp.indexOf("template='checkbox'") > -1) {
                    var cbvalue = $(this).attr('key');
                    if(cbvalue == "1" || cbvalue == "True"){
                        ftp = ftp.replace("value=", " checked value=");
                    }
                    ftp = ftp.replace(/value=/i, " _onclick='GetResultCheckBox(this);' value=");
                    ftp = ftp.replace(/<input/i, "<input " + ftpAttr);
                    //ftp = "<div class='checkbox'>" + ftp + "</div>";
                    //ftp = ftp.replace('hgResult', 'hgResult form-checkbox');

                }
                else if (ftp.indexOf("template='calendar'") > -1) {
                    //var datevalue = $(this).text();
                    //ftpAttr = ftpAttr.replace("class='", "class='col-sm-1 ");
                    //ftpAttr = ftpAttr.replace("style='_width: 95%;'", "style='width: 120px; padding: 0px;'");
                    ftp = ftp.replace(/<input/i, "<input value='" + Text + "'");
                    ftp = ftp.replace("class='", "class='datepicker ");
                    ftp = ftp.replace(/<div/i, "<div " + ftpAttr);

                    InitializeDatePicker();
                }
                else if (ftp.indexOf("template='textarea'") > -1) {
                    //var textarea = $(this).text();
                    //textarea = textarea.replace(/<br>/g, "\r\n");
                    ftp = ftp.replace(/\>\</i, ftpAttr + ">" + Text + "<");
                    ftp = ftp.replace('hgResult', 'hgResult form-control');
                }
                else if (ftp.indexOf("template='multiplepicker'") > -1) {                    

                    //ftp = ftp.replace(/key=/i, "_key=");
                    if (Text == "") {
                        Text = "None";
                    }
                    ftp = ftp.replace(/\>\</i, ">" + Text + "<");
                    ftp = ftp.replace(/<a /i, "<a " + ftpAttr);
                }
                else if (ftp.indexOf("template='picker'") > -1) {

                    ftp = ftp.replace(/\>\</i, ">" + Text + "<");
                    ftp = ftp.replace(/<a /i, "<a " + ftpAttr);
                }
            }
            else if(fd == "1"){
                ftp = Text;
            }
            else {
                var EditText = Text;
                EditText = EditText.replace(/\'/g, "&apos;");
                if (Key != "") { EditText = Key };
                var EditKey = "";

                var EditOldText = OldText;
                EditOldText = EditOldText.replace(/\'/g, "&apos;");
                if (OldKey != "") { EditOldText = OldKey };

                var EditOldKey = "";

                ftp = "<input template='text' class='hgResult' oresult='" + EditOldText + "' oresultkey='" + EditOldKey + "' result='" + EditText + "' resultkey='" + EditKey + "' _onkeyup='GetResultTextBox(this);' type='textbox' value='" + EditText + "' style='_width: 95%;' tdo='" + index + "' />";
                //ftp = "<input template='text' type='textbox' " ftpAttr
                ftp = ftp.replace('hgResult', 'hgResult form-control');
                //$(this).html("<input class='hgResult' oresult='" + EditText + "' oresultkey='" + EditKey + "' result='" + EditText + "' resultkey='" + EditKey + "' onkeyup='GetResultTextBox(this);' type='textbox' value='" + EditText + "' style='width: 95%;' />");
            }

            $(this).html(ftp);

        });
        
        $(e).find('select[onchange=\"FilterSelect(this);\"]').each(function (index, value) {
            // get selected target item value
            tid = $(value).attr("tid");
            var sv = $('#' + tid).find('option:selected').val();
            FilterSelect(value);
            $('#' + tid).find('option[value=\"' + sv + '\"]').attr('selected', 'selected');
        });

        if (typeof hgRowEdit == 'function') {
            hgRowEdit($tb[0], $(e).closest('tr'));
        }
    }
}

function hgEditOff(e) {

    var valid = true;
    var Change = "";

    var $tb = $(e).closest('table .hg');
    //var $tr = $tb.find('.hgHeaderRow:first');
    //var $ths = $tr.find('th');

    var $r = $tb.find('tbody tr.RowEdit');

    if ($r.length > 0) {
        var $Results = $r.find('.hgResult');
        var TableID = $tb[0].id;
        var kfv = $r.attr('kfv');
        valid = ProcessChange(TableID, kfv, $Results, "");

        if (valid) {
            /*
            $r.children('td').each(function (index) {
                $(this).attr('key', $Results.eq(index).attr('resultkey'));
                $(this).html($Results.eq(index).attr('result'));
            });
            */
            $Results.each(function () {
                $(this).parent('td').attr('key', $(this).attr('resultkey'));
                $(this).parent('td').html($(this).attr('result'));
            });

            $r.removeClass("RowEdit");
        }
    }

    return valid;
}

// save changes
function hgSaveChange(c, tr, results, ModalID, cbParameters) {
    
    var status = true;

    if ($(tr).closest('.hg').attr('gas') == "0" && cbParameters == null) {
        return status;
    }

    /*
    // positions
    if ((c.indexOf('waIUWP3zjL+/4LSdTayagS3/dflhGq2jMxcFtus1j64=') > -1 || c.indexOf('Cmz30pcBo0e/4LSdTayagcaMKcoOA9AJA61jihwpfz0=') > -1) && cbParameters==null) {
        return status;
    }
    */

    /*
    var xhttp;
    xhttp = new XMLHttpRequest();
    xhttp.onreadystatechange = function () {
        if (xhttp.readyState == 4 && xhttp.status == 200) {
            ProcessChangeCallback(xhttp);
        }
    };
    */
    
    //Encode
    c = c.replace(/\</g, "-[_").replace(/\>/g, "_]-");

    /*
    // post jquery
$.ajax({
        type: 'POST',
        url: 'Process_Change',
        async: false,
        processData: false,
        data: 'c=' + c,
        success: function (response) {
            hgSaveChangeCallback(response, tr, results, ModalID, cbParameters);
        },
        error: function (response) {
            hgSaveChangeCallback(response, tr, results, ModalID, cbParameters);
        }
    */
    
    // get jquery
    $.ajax({
        type: 'POST',
        url: 'Process_Change',
        async: false,
        processData: false,
        data: c,
        success: function (response) {
            hgSaveChangeCallback(response, tr, results, ModalID, cbParameters);
        },
        error: function (response) {
            hgSaveChangeCallback(response, tr, results, ModalID, cbParameters);
        }
    });
    
    /*
    $.post("Process_Change.aspx",
    {
        change: '123'
    },
    function (data, status) {
        alert("Data: " + data + "\nStatus: " + status);
    });
    */


    /*
    //POST
    var url = "process_change.aspx";
    xhttp.open("POST", url, true);
    //xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    //xhttp.send("txtChange='" + escape(c) + "'");
    //xhttp.send("txtChange=123");
    xhttp.send(c);
    */
    /*
    // POST with jquery
   $.ajax({
        type: "POST",
        url: 'Process_Change.aspx',
        processData: false,
        data: '{123}',
        success: function (response) {
            ProcessChangeCallback(response);
        },
        error: function (response) {
            ProcessChangeCallback('error');
        }
    });
    */
    return status;
}

function hgSaveChangeCallback(r, tr, results, ModalID, cbParameters) {

    if (r.indexOf('Error|') == -1) {
        // set post save flag in Grid
        if (tr != null) {
            tr.closest('.hg, .vg').attr('ps', '1');
        }
        if (results != null) {
            results.closest('.hg, .vg').attr('ps', '1');
        }
    }

    if (r == "") return;


    if (typeof (cbParameters) == 'function' && r.indexOf('Error|') == -1)  {
        cbParameters(r, tr, results);
        return;
    }

    var Result = r.split("|");

    var action = "";
    var cbPs;

    if (cbParameters != null && typeof (cbParameters) != 'function') {
        cbPs = cbParameters.split("|");
        action =cbPs[0];
    }

    if(Result[0] == "Status"){
        if(Result[1] == "Success"){

            //update values
            if ($(tr).length > 0) {

                // reload
                var ReloadPage = false;

                //update interface results
                $hgTDs = $(tr).children('td');
                if (results != null) {
                    results.each(function () {
                        var TDIndex = $(this).attr('tdo');
                        $hgTD = $hgTDs.eq(TDIndex);
                        $hgTD.attr('key', $(this).attr('resultkey'));
                        var link = $hgTD.find('a');
                        if (link.length == 1) {
                            link.html($(this).attr('result'));
                        }
                        else {
                            $hgTD.html($(this).attr('result'));

                            //Actual spend
                            if (TDIndex == '16' && document.URL.indexOf("Campaigns") > -1) {
                                if ($(this).attr('result') != $(this).attr('oresult')) {
                                    ReloadPage = true;
                                }
                            }
                        }
                    });


                    if (action == 'OverrideAutoSave') {
                        return;
                    }

                    if (action == 'MustReload') {
                        location.reload(true);
                    }
                     
                    if (typeof PostSave == 'function') {
                        PostSave(tr);
                    }


                    if (action == 'UpdateDetail') {
                        DetailUpdate();
                        return;
                    }
                }
                else {
                    if(ModalID != ""){
                        if (ModalID == 'diaDetailOrder_Entry') { return;}

                        $('#' + ModalID).dialog('destroy').remove();
                        if (typeof LastFunction == 'function') {
                            LastFunction();
                        }
                        return;
                    }
                    else{
                        ReloadPage = true;
                    }
                }

                //('#' + ModalID).modal('hide');
                $('#' + ModalID).dialog('destroy').remove();

                // if status changes, reload page
                if (ReloadPage) {
                    document.forms[0].submit();
                }
            }
            else if (action == 'hgUpdate') {

                if (results != null) {
                    // current row TDs
                    $hgTDs = $('#' + cbPs[1] + ' tr[kfv="' + cbPs[2] + '"]').children('td');

                    //header THs
                    $hgTHs = $('#' + cbPs[1] + ' .hgHeaderRow:first');

                    results.each(function () {
                        var cn = $(this).attr('fn');
                        $hgTH = $hgTHs.find('th[fn="' + cn + '"]');

                        if ($hgTH.length > 0) {
                            var TDIndex = $hgTH.index();
                            $hgTD = $hgTDs.eq(TDIndex);

                            $hgTD.attr('key', $(this).attr('resultkey'));
                            var link = $hgTD.find('a');
                            if (link.length == 1 && link.attr('onclick').indexOf('DocumentLocation') > -1) {
                                link.attr('onclick', 'DocumentLocation(\'' + $(this).attr('result') + '\');');
                            }
                            else if (link.length == 1) {
                                link.html($(this).attr('result'));
                            }
                            else {
                                $hgTD.html($(this).attr('result'));

                                //Actual spend
                                /*
                                if ((TDIndex == '2' || TDIndex == '3') && document.URL.indexOf("specs") > -1) {
                                    if ($(this).attr('result') != $(this).attr('oresult')) {
                                        ReloadPage = true;
                                    }
                                }
                                */
                            }
                        }
                        
                        
                        
                    });
                    if (typeof PostSave == 'function') {
                        PostSave(tr);
                    }
                }
            }
            /*
            else if (action == 'PickerUpdate') {
                var kfv = Result[1];

                // add new item to picker choices
                var Type = GetCookie('PickerType');
                if (Type == 'picker') {
                    SetCookie('PickerChoice', kfv);
                    SetCookie('PickerChoiceAdd', kfv);
                }
                else // multiple
                {
                    var PickerChoices = GetCookie('PickerChoice');

                    if (PickerChoices == '') {
                        PickerChoices = kfv;
                    }
                    else {
                        PickerChoices += ', ' + kfv;
                    }

                    SetCookie('PickerChoice', PickerChoices);
                }

                // close dialog
                var Context = cbParameters.split('|')[1];

                $('#dia' + Context).dialog('destroy').remove();

                PopPicker(document.getElementById('Picker' + Context));

                return;
            }
            */
            else if (action = 'ResetProductsReload') {

                SetCookie('PickerChoice', '');
                SetCookie('ProductFinderIDs', '', -1);
                SetCookie('PFSearch', '', -1);
                SetCookie('ProductSearch', '');

                if (location.href.indexOf('Products') > -1) {
                    location.reload(true);
                }
                else {
                    // reload product picker
                    results.closest('.ui-dialog-content').dialog('destroy').remove();

                    // reset product picker
                    LastPopPickere = document.getElementById('pickProductIDs');
                    LastPopPickerf = document.getElementById('pickProductIDs').getAttribute('f');

                    ResetProducts(document.getElementById('butProductFinderReset'));

                    // reload product picker
                    //$('div[qs]:last').load($('div[qs]:last').attr('qs'));
                }
                return;
            }
            else if (action = 'Reload') {
                location.reload(true);
                return;
            }
            else {
                //parent.$('#' + ModalID).modal('hide');
                parent.$('#' + ModalID).dialog('destroy').remove();
            }
            return;
        }
    }

    if(Result[0] == "Error"){
        if (tr != null) {
            // reset results
            /*
            results.each(function (index, elem) {
                $(elem).css('background-color', '#FCF8E3');
                $(elem).attr('resultkey', '');
                $(elem).attr('result', '');
                $(elem).attr('oresultkey', '');
                $(elem).attr('oresult', '');
            });
            */
            if ($(tr).attr('onclick') != null) {
                hgEdit(tr);
            }
            
        }
        MessageBox("Error Saving Data", r.replace('Error|','') + "<br /><br />Please edit or cancel.", "danger");
        return;
    }

    if (Result[0] == "Delete") {
        if (ModalID != null) {
            $('#' + ModalID).dialog('destroy').remove();
            LastFunction();
            return;
        }
        else {
            location.reload(true);
        }
    }



    if (typeof (action) == 'function') {
        action();
        return;
    }
    else if (action == 'MustReload') {
        location.reload(true);
    }
    else if (Result[0] == "NewID" && action == 'NoAction') {
        return;
    }
    else if (Result[0] == "NewID" && action == 'OverrideAutoSave') {
        var NewID = Result[1];

        if ($(tr).hasClass('hgNewRecord')) {
            //insert new ID value
            $(tr).attr('kfv', NewID);
            $(tr).removeClass('hgNewRecord');
        }
        return;
    }
    else if (Result[0] == "NewID" && $(tr).length > 0) {
        var NewID = Result[1];

        if ($(tr).hasClass('hgNewRecord')) {
            //insert new ID value
            $(tr).attr('kfv', NewID);
            $(tr).removeClass('hgNewRecord');
            
            if (action == 'UpdateDetail') {
                DetailUpdate();
                return;
            }
            
        }
        else {
            var dia = $('.hgPopNewForm').last().closest('.ui-dialog-content');
            if ($(dia).length == 1) {
                var url = $(dia).find('form')[0].action;
                $(dia).load(url);
            }
            else {
                location.reload(true);
            }
        }

    }
    else if (Result[0] == "NewID" && action == "NotInList") {
        var NewID = Result[1];
        var cbp = cbParameters.split("|");
        var selID = cbp[1];
        var labelIndex = cbp[2];
        var label = results.eq(labelIndex).attr('result');

        // special labels
        if (cbp.length == 4) {
            label = cbp[3];
        }

        // unselect
        $('#' + selID + ' option').attr('selected', false);
        $('#' + selID + ' option').removeAttr('selected');

        // add new value and select it
        $('#' + selID + ' option').eq(1).before($('<option>', {
            value: NewID,
            text: label,
            selected: true
        }));

        // add to template
        //var x = $("th[ftp*='" + selID + "']").html();
        $('[ftp]').each(function (index, value) {
            if ($(value).attr('ftp').indexOf("_id='" + selID + "'") > -1) {
                $(value).attr('ftp', $('#' + selID).parent().html().replace("id=", "_id="));
            }
        });

        return;
    }
    else if (Result[0] == "NewID" && action == 'hgUpdate') {

        var $dia = $('#dia' + cbPs[1].replace(/tab/, ''));

        if ($dia.length > 0) {
            var u = $dia.attr('qs');

            // replace current id with new
            var csid = '&sid=' + ParseQueryString('lid', u);
            var nsid = '&sid=' + Result[1];

            u = u.replace(csid, "") + nsid;

            $dia.load(u);
        }

        else {
            //ReloadPage();
            location.reload(true);
        }

        return;
    }
    else if (Result[0] == "NewID" && action == 'PickerUpdate') {

        var kfv = Result[1];

        // add new item to picker choices
        var Type = GetCookie('PickerType');
        if (Type == 'picker') {
            SetCookie('PickerChoice', kfv);
            SetCookie('PickerChoiceAdd', kfv);
        }
        else // multiple
        {
            var PickerChoices = GetCookie('PickerChoice');

            if (PickerChoices == '') {
                PickerChoices = kfv;
            }
            else {
                PickerChoices += ', ' + kfv;
            }

            SetCookie('PickerChoice', PickerChoices);
        }

        // close dialog
        var Context = cbParameters.split('|')[1];

        $('#dia' + Context).dialog('destroy').remove();

        PopPicker(document.getElementById('Picker' + Context));

        return;
    }
    else {
        // check if opener is a dialog
        var OpenerDialog = $('a.hgNewFormButton').attr('sd');
        
        if(OpenerDialog != null){
        //if (OpenerTable != "") {
        
            $('#' + ModalID).dialog('destroy');
            $('#' + OpenerDialog).dialog('destroy');
            
            LastFunction();
        }
        else
        {
            location.reload(true);
        }
    }
}

function htmlEscape(str) {
    return String(str)
        .replace(/&/g, '&amp;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\//g, '&#x2F;');
}

function htmlUnescape(value) {
    return String(value)
        .replace(/&quot;/g, '"')
        .replace(/&#39;/g, "'")
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&amp;/g, '&')
        .replace(/&#x2F;/g, '/');
}

function ResultEncode(Text) {

    if ($.isNumeric(Text)) {
        return Text;
    }

    Text = Text.replace(/&nbsp;/g, " ");
    Text = Text.replace(/&#160;/g, " ");
    Text = Text.replace(/\xA0/g, " ");
    Text = Text.replace(/\s+/g, " ");
    Text = Text.replace(/&#39;/g, "[APO]");
    Text = Text.replace(/\'/g, "[APO]");
    Text = Text.replace(/&quot;/g, "[QOT]");
    Text = Text.replace(/\"/g, "[QOT]");
    Text = Text.replace(/&rsquo;/g, "[APO]");
    Text = Text.replace(/&lt;/g, "[LT]");
    Text = Text.replace(/\</g, "[LT]");
    Text = Text.replace(/&gt;/g, "[GT]");
    Text = Text.replace(/\>/g, "[GT]");
    Text = Text.replace(/&at;/g, "[AT]");
    Text = Text.replace(/\@/g, "[AT]");
    Text = Text.replace(/&copy;/g, "(c)");
    Text = Text.replace(/&reg;/g, "(R)");
    Text = Text.replace(/&trade;/g, "(TM)");
    Text = Text.replace(/\|/g, "l");

    Text = Text.replace(/&egrave;/g, "[EG]");
    Text = Text.replace(/&eacute;/g, "[EA]");
    Text = Text.replace(/&ecirc;/g, "[EC]");
    Text = Text.replace(/&agrave;/g, "[AG]");

    Text = Text.replace(/&amp;/g, "[AMP]");
    Text = Text.replace(/\&/g, "[AMP]");
    Text = Text.replace(/\#/g, "[LB]");
    Text = Text.replace(/\+/g, "[PLUS]");

    return Text;
}

//??
function showalert(message,alerttype) {

    $('#alert_placeholder').append('<div id="alertdiv" class="alert ' +  alerttype + '"><a class="close" data-dismiss="alert">×</a><span>' + message + '</span></div>')
    /*
    setTimeout(function() { // this will automatically close the alert and remove this if the users doesnt close it in 5 secs
        $("#alertdiv").remove();
    }, 5000);
    */
}

// cookies
function SetCookie(Name, Value, Days) {
    var ckyDate = new Date;
    ckyDate.setDate(ckyDate.getDate() + Days);
    document.cookie = Name + "=" + escape(Value) + "; expires=" + ckyDate.toGMTString() + "; Path=/";
}

function GetCookie(CookieName) {
    var results = document.cookie.match(CookieName + '=(.*?)(;|$)');

    if (results)
        return (unescape(results[1]));
    else
        return null;
}


//#region hg Editor
// creates single row edit form in an hg
function hgEditorForm(e,w,h) {

    //return;

    var $r = $(e).closest('tr');
    var key = $r.attr('kfv');
    $t = $(e).closest('table');
    var TableID = $t.attr('id');
    var $ths = $t.find('.hgHeaderRow:first th');
    var $title = $t.find('.hgTitle:first');
    var Title = $title.html();
    Title = Title.substring(0, Title.lastIndexOf("New"));
    var hgfID = $t.attr('id').replace(/tab/,"hgf");
    var Reference = $(e).closest('td').text();
    var HTML = "";

    if (Title == "") {
        // closest ui title
        Title = $('.ui-dialog-title').html();
    }

    if ($title.find('span:first').length > 0) {
        Title = $title.find('span:first').html();
    }
    else if ($title.find('.hgTitleSplitter').length > 0) {
        Title = $title.find('td:first').html();
    }
    else if (Title == null) {
        Title = $('.hg thead tr:first').text();
    }

    if (Reference == "" || Reference == null) {
        Reference = "New";
    }

    $r.children('td').each(function (index) {

        var ftp = $ths.eq(index).attr('ftp');
        var fd = $ths.eq(index).attr('fd');
        var fde = $ths.eq(index).attr('fde');
        var fhe = $ths.eq(index).attr('fhe');

        var ftpAttr = "";
        var id = $ths.eq(index).attr('id')

        // change the ID to the field name
        ftp = ftp.replace(/_id=/g, "id=");

        var Key = $(this).attr('key');
        var Text = $(this).text();
        var OldKey = Key;
        var OldText = Text;


        if (ftp.indexOf("template='textarea'") > -1) {
            if (ftp.indexOf("tm='1'") > -1) {
                Text = $(this).html().replace(/'/g,'&apos;');
            }
            else {
                Text = $(this).html().replace(/<br>/g, "&#13;&#10;");
            }
            OldText = Text;
        }

        if (Text == "" && fde !="") {
            Text = fde;
            OldText = "";
        }

        if (fd == "1" && $(this).html().indexOf("PopDocDialog") > -1) {
            ftp = $(this).html();
            HTML += "<tr><td>" + $ths.eq(index).html() + "</td><td>" + ftp + "</td></tr>";
        }
        else if (fd != "1") {
            if (ftp != "") {
                ftpAttr += "class='hgResult' ";
                ftpAttr += "oresult='" + OldText + "' ";
                ftpAttr += "oresultkey='" + OldKey + "' ";
                ftpAttr += "result='" + Text + "' ";
                ftpAttr += "resultkey='" + Key + "' ";
                ftpAttr += "tdo='" + index + "' ";
                ftpAttr += "style='_width: 95%;' ";

                if (ftp.indexOf("template='select'") > -1) {
                    ftpAttr += "onchange='GetResultSelect(this);' ";
                    ftp = ftp.replace("value='" + Key + "'", "value='" + Key + "' selected='selected'")
                    ftp = ftp.replace(/<select/i, "<select " + ftpAttr);
                    ftp = ftp.replace('hgResult', 'hgResult form-control');
                }
                else if (ftp.indexOf("template='multipleselect'") > -1) {
                    //ftpAttr += "onchange='GetResultMultiSelect(this);' ";
                    var values = Key.split(", ");
                    for (var i = 0; i < values.length; i++) {
                        ftp = ftp.replace("value='" + values[i] + "'", "value='" + values[i] + "' checked");
                    }
                    ftp = ftp.replace(/value=/gi, " onclick='GetResultMultiSelect(this);' value=");

                    ftp = ftp.replace(/<table/i, "<table " + ftpAttr);
                }
                else if (ftp.indexOf("template='checkbox'") > -1) {
                    var cbvalue = Key;
                    if (cbvalue == "1" || cbvalue == "True") {
                        ftp = ftp.replace("value=", " checked value=");
                    }
                    ftp = ftp.replace(/value=/i, " onclick='GetResultCheckBox(this);' value=");
                    ftp = ftp.replace(/<input/i, "<input " + ftpAttr);
                    //ftp = "<div class='checkbox'>" + ftp + "</div>";
                    //ftp = ftp.replace('hgResult', 'hgResult form-control');

                }
                else if (ftp.indexOf("template='calendar'") > -1) {
                    //ftpAttr = ftpAttr.replace("class='", "class='col-sm-1 ");
                    //ftpAttr = ftpAttr.replace("style='_width: 95%;'", "style='width: 120px;padding: 0px;'");
                    ftp = ftp.replace(/<input/i, "<input value='" + Text + "'");
                    ftp = ftp.replace("class='", "class='datepicker ");
                    ftp = ftp.replace(/<div/i, "<div " + ftpAttr);

                    InitializeDatePicker();
                    //ftp = ftp.replace('hgResult', 'hgResult form-control');
                }
                else if (ftp.indexOf("template='textarea'") > -1) {
                    //var textarea = $(this).html();
                    //textarea = textarea.replace(/\r\n/g, "&#13;&#10;");
                    //textarea = textarea.replace(/\n/g, "&#10;");
                    //textarea = textarea.replace(/<br>/g, "&#13;&#10;");

                    //ftpAttr = ftpAttr.replace("class='", "class='col-sm-1 ");
                    //ftpAttr = ftpAttr.replace("style='_width: 95%;'", "style='width: 120px; padding: 0px;'");
                    //ftp = ftp.replace(/\>\</i, ftpAttr + ">" + textarea + "<");
                    ftp = ftp.replace(/\>\</i, ftpAttr + ">" + Text + "<");
                    /*
                    if (fhe == '1') {
                        ftp = "<textarea template='textarea' tm='1' rows='20' " + ftpAttr + ">" + Text + "</textarea>";
                    }
                    else {
                        ftp = "<textarea template='textarea' rows='6' " + ftpAttr + ">" + Text + "</textarea>";
                    }
                    */
                    ftp = ftp.replace('hgResult', 'hgResult form-control');
                }
            }
            else if (fd == "1") {
                ftp = Text;
            }
            else {
                var EditText = Text;
                EditText = EditText.replace(/\'/g, "&apos;");
                if (Key != "") { EditText = Key };

                var EditKey = "";

                var EditOldText = OldText;
                EditOldText = EditOldText.replace(/\'/g, "&apos;");
                if (OldKey != "") { EditOldText = OldKey };

                var EditOldKey = "";

                ftp = "<input template='text' class='hgResult' oresult='" + EditOldText + "' oresultkey='" + EditOldKey + "' result='" + EditText + "' resultkey='" + EditKey + "' onkeyup='GetResultTextBox(this);' type='textbox' value='" + EditText + "' style='_width: 95%;' tdo='" + index + "' />";
                ftp = ftp.replace('hgResult', 'hgResult form-control');
                //$(this).html("<input class='hgResult' oresult='" + EditText + "' oresultkey='" + EditKey + "' result='" + EditText + "' resultkey='" + EditKey + "' onkeyup='GetResultTextBox(this);' type='textbox' value='" + EditText + "' style='width: 95%;' />");
            }

            //$(this).html(ftp);
            //HTML += "<div class='form-group'><label class='control-label col-sm-2' for='" + $ths.eq(index).text() + "<'>" + $ths.eq(index).text() + "</label><div class='col-sm-10'>" + ftp + "</div></div>";
            HTML += "<tr><td>" + $ths.eq(index).html() + "</td><td>" + ftp + "</td></tr>";
        }
    });

    if (HTML != "") {
        HTML = "<div id=\"diae" + TableID + "\" style=\"padding: 10px; width: 100%; height: " + h + "px; overflow: auto;\" ><table class='table table-condensed table-borderless hgeditformtable' srctableid=\"" + TableID + "\">" + HTML + "</table>";
        
        dialog = $(HTML).dialog({
            open: function (event, ui) { ApplyCascades(this); },
            autoOpen: false,
            title: Title + " - " + Reference,
            height: h + 100,
            width: w,
            dialogClass: 'no-close',
            modal: true,
            buttons: {
                Cancel: {
                    text: 'Cancel', priority: 'secondary', click: function () {
                        $(this).dialog("destroy").remove();
                    }
                },
                'Save': {
                    text: 'Save', priority: 'primary', style: 'background: #428BCA; color: #fff;', kfv: key, click: function () {
                        //ResetPassword(e, $('#txtPassWord')[0].value);
                        var TableID = hgfID.replace(/hgf/, "tab");
                        //var $Results = $('#' + hgfID).find('.hgResult');
                        var $Results = $(this).find('.hgResult');
                        var kfv = key;
                        var ModalID = $(this).attr('id');

                        var Valid = ProcessChange(TableID, kfv, $Results, ModalID);
                        //return;

                        if (Valid) {

                            if (document.URL.indexOf('Form_Fields') > -1)
                            {
                                $('#diaetabBody').attr('valid', Valid);
                                return;
                            }

                            $('#diae' + TableID).dialog('destroy').remove();
                        }
                    }
                }
            }
        });
        dialog.dialog("open");
        
        /*
        // load html
        //$('.hgeditmodalbody').html(HTML);
        $(hgfID + ' .modal-body').html(HTML);

        //$('.hgeditformtitle').html(Title + " - " + Reference);
        $(hgfID + ' .modal-title').html(Title + " - " + Reference);

        //size
        //$('.hgeditformmodaldialog').css('width', w + "px");
        $(hgfID + ' .modal-dialog').css('width', w + "px");
        //$(hgfID + ' .modal-dialog').css('top', (($(window).innerHeight() - h - 250)/2) + "px");

        // key
        $(hgfID + ' .modal-footer .btn-primary').attr('kfv', key);
        */
        /*
        // save function
        $(hgfID + ' .modal-footer').on('click', '.hgf-btn-save', function (hgfID) {
            if (hgFormSave(hgfID)) {
                $(hgfID + ' .modal-dialog').modal('hide');
            }
        });
        */
        /*
        // popup
        $(hgfID).modal(); $(hgfID + ' .modal-dialog').draggable({ handle: '.modal-header' });
        */
        if(key == "-1"){
            // remove
            $t.find("tr[kfv='-1']").remove();
        }

        if (typeof (hgFieldEditorLoaded) != 'undefined') {
            hgFieldEditorLoaded('diae' + TableID);
        }

        var fe = $(dialog).first('.hgResult');
        $('#diae' + TableID + ' .hgResult:first').caretToEnd();

        $('.datepicker').datepicker({
            dateFormat: 'm/d/yy',
            autoclose: true,
            width: 300
        });
    }
}

// creates new form for an hg
function hgNewForm(e, w, h) {
        
    //add new row
    $t = $(e).closest('.hg');
    var n = $t.find('tr:last td').length;
    // if no data exists
    if (n == 0) {
        n = $t.find('tr:last th').length;
    }
    var tds = '<tr kfv="-1" style="display: none;">';
    for (var i = 0; i < n; i++) {
        tds += '<td key></td>';
    }
    tds += '</tr>';
    if ($t.find('tbody').length > 0) {
        $t.find('tbody').append(tds);
    } else {
        $t.append(tds);
    }
    
    e = $t.find('tr:last td:first');

    hgEditorForm(e, w, h);
}

function hgPopNewForm(e, w, h) {
    var el = $(e).closest('.hg tr');
    hgNewForm(el, w, h);
}

function hgFormSave(r, hgfID) {

    // source table ref
    var TableID = hgfID.replace(/hgf/, "tab");
    var $Results = $('#' + hgfID).find('.hgResult');
    var kfv = $(r).attr('kfv');

    ProcessChange(TableID, kfv, $Results, hgfID);

}

// runs after an editor form is loaded
function hgFieldEditorLoaded(m) {

    if (document.URL.indexOf('Form_Fields') > -1) {

        var buttons = $('#' + m).parent().find('.ui-dialog-buttonset');

        buttons.before($('<button type="button" priority=secondary" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="TestCurrentForm(this);" ><span class="ui-button-text">Save & Test Current Form</span></button>'));

        // Set default Topic Sort Orderv
        var top = $('.hgResult[tdo="4"]');
        top.on('change', function () {
            GetResultSelect(this);

            var tso = $('.hgResult[tdo="5"]');
            if (tso.val() == '') {
                tso.val(top.find('option:selected').attr('topic_sort_order'));
            }
        });
    }

    /*
    if (document.URL.indexOf('/Data') > -1) {

        $('.hgeditformtable .SearchField').css('display', 'none').parent().find('br:first').css('display', 'none');
    }
    */

    //CloneButtonsInTitle(m);
    
    tinymce.init({
        selector: 'textarea[tm="1"]',
        height: 400,
        plugins: [
            "lists",
            "link",
            "searchreplace ",
            "contextmenu paste fullscreen",
            "code"
        ],
        menubar: false,
        statusbar: false,
        toolbar: "undo redo | cut copy pastetext paste | searchreplace | bold italic underline strikethrough | bullist numlist | link | code | fullscreen",

        
        // suppress relative url's
        relative_urls: false,   
        convert_urls: false,
        remove_script_host: false,

        // make like word editor
        forced_root_block: false,
        force_br_newlines: true,
        force_p_newlines: false,
        apply_source_formatting: false,
        setup: function (editor) {
            editor.on('change', function () {
                tinymce.triggerSave();
            });
        }
    });

    /*
    // Prevent jQuery UI dialog from blocking focusin
    $(document).on('focusin', function (e) {
        if ($(e.target).closest(".tox-dialog .tox-tinymce-aux, .moxman-window, .tam-assetmanager-root").length) {
            e.stopImmediatePropagation();
        }
    });

    $(document).on('focusin', function(e) {
        if ($(e.target).closest(".mce-window").length) {
        e.stopImmediatePropagation();
        }
    });
    */

}

//#endregion

function _MessageBox(o) {

    WaitBoxClose();
    //$('#MessageBox .modal-body').html(body);
    //$('#MessageBox .modal-title').html(title);


    var title = o.title;
    var type = o.type; 
    var body = o.body;
    var width = o.width;
    var confirmFunction = o.confirmFunction; 
    var cancel = o.cancel;

    // type
    var backgroundColor = '#337AB7';
    if (type == "danger") { backgroundColor = '#D9534F'; }
    if (type == "success") { backgroundColor = '#5CB85C'; }
    if (type == "info") { backgroundColor = '#5BC0DE'; }
    if (type == "warning") { backgroundColor = '#F0AD4E'; }

    if (width == null) {
        width = 500;
    }

    if ($(window).innerWidth() < width) {
        width = $(window).innerWidth() * .9;
    }

    var cancelDisplay = 'none';
    if (cancel == true) {
        cancelDisplay = '';
    }

    //$('#MessageBox .modal-header').css('background-color', backgroundColor);

    //size
    //$('.hgeditformmodaldialog').css('width', w + "px");
    //$('MessageBox .modal-dialog').css('width', w + "px");

    // popup
    //$('#MessageBox').modal(); $('#MessageBox .modal-dialog').draggable({ handle: '.modal-header' });

    dialogM = $("<div class='message-dialog' >" + body + "</div>").dialog({
        autoOpen: true,
        title: title,
        width: width,
        position: { my: "center", at: "center", of: window },
        dialogClass: 'no-close',
        modal: true,
        buttons: {
            Cancel: {
                text: ' Cancel ', priority: 'secondary', style: 'display: ' + cancelDisplay + '; ', click: function () {
                    $('.message-dialog').dialog('destroy').remove();
                    return;
                }
            },
            'OK': {
                text: ' OK ', priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {
                    $('.message-dialog').dialog('destroy').remove();
                    if (typeof (confirmFunction) == 'function') {
                        confirmFunction();
                    }
                    return;
                }
            }
        }
    }).prev('.ui-dialog-titlebar').css('background', backgroundColor);

    //dialogM.find('.ui-dialog-buttonpane').show();

}

function _WaitBox(title, body, type, width) {

    // only one
    if ($('#divWaitBox').length > 0) {
        return;
    }

    // type
    var backgroundColor = '#337AB7';
    if (type == "danger") { backgroundColor = '#D9534F'; }
    if (type == "success") { backgroundColor = '#5CB85C'; }
    if (type == "info") { backgroundColor = '#5BC0DE'; }
    if (type == "warning") { backgroundColor = '#F0AD4E'; }

    if (width == null) {
        width = 500;
    }

    if ($(window).innerWidth() < width) {
        width = $(window).innerWidth() * .9;
    }

    //$('#MessageBox .modal-header').css('background-color', backgroundColor);

    //size
    //$('.hgeditformmodaldialog').css('width', w + "px");
    //$('MessageBox .modal-dialog').css('width', w + "px");

    // popup
    //$('#MessageBox').modal(); $('#MessageBox .modal-dialog').draggable({ handle: '.modal-header' });

    dialogM = $("<div id='divWaitBox' class='message-dialog' style='text-align: center;'><img id='imgWait' src='images/wait.gif' /><br /><br />" + body + "</div>").dialog({
        autoOpen: true,
        title: title,
        width: width,
        position: { my: "center", at: "center", of: window },
        dialogClass: 'no-close',
        modal: true
    }).prev('.ui-dialog-titlebar').css('background', backgroundColor);

    //dialogM.find('.ui-dialog-buttonpane').show();

}

function _WaitBoxClose() {
    $('#divWaitBox').dialog('destroy').remove();
    return;
}

function ProcessChange(TableID, kfv, $Results, ModalID, cbParameters) {

    var valid = true;
    var Change = "";

    var $tb = $('#' + TableID);
    var $tr = $tb.find('.hgHeaderRow:first');
    var $ths = $tr.find('th');

    var $r = $tb.find("tr[kfv='" + kfv + "']");

    var IsNewRecord = $r.hasClass('hgNewRecord');

    var as = $tb.attr('as');

    $Results.each(function (index) {

        var $resulte = $(this);

        var ftemplate = $resulte.attr('template');

        // update
        UpdateTemplate($resulte[0]);

        var Result = $resulte.attr('resultkey');
        if (Result == "" || ftemplate == 'text') {
            Result = $resulte.attr('result');
        }

        var fe = "";
        var fn = "";
        var ft = "";
        var fs = "";
        var fc = "";
        var fr = "";
        var fi = "";
        var FieldLabel = "";

        //if (hgfID != '') {
        if($resulte.attr('tdo') != null){
            var TDIndex = $resulte.attr('tdo');
            $th = $ths.eq(TDIndex);

            fe = $th.attr('fe');
            fn = $th.attr('fn');
            ft = $th.attr('ft');
            fs = $th.attr('fs');
            fc = $th.attr('fc');
            fr = $th.attr('fr');
            fi = $th.attr('fi');
            FieldLabel = $th.text().replace(/\*/, "");
        }
        else
        {
            var $tdl = $resulte.closest('tr').find('.vgLabel');

            fe = $tdl.attr('fe');
            fn = $tdl.attr('fn');
            ft = $tdl.attr('ft');
            fs = $tdl.attr('fs');
            fc = $tdl.attr('fc');
            fr = $tdl.attr('fr');
            fi = $tdl.attr('fi');
            FieldLabel = $tdl.text().replace(/\*/, "");

            // unformat
            if ($tdl.attr('fnf').indexOf('%') > -1) {
                Result = Result.replace('#', '').replace(',', '').replace('%', '');
                if ($.isNumeric(Result)) {
                    Result = ((Result) / 100) + '';
                }
            } else if ($tdl.attr('fnf').indexOf('#') > -1) {
                Result = Result.replace('#', '').replace(',','');
            }
        }

        if (fi == '1') return true;

        $resulte.css('background-color', 'white');

        // check for required for existing data
        if (fr == "1" && Result == "" && valid == true && !IsNewRecord) {
            $resulte.css('background-color', '#FCF8E3');
            //MessageBox("Validation: Required Field Empty", "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", "warning");
            gridBox({ type: "message", title: "Validation: Required Field Empty", body: "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", type: "warning" });
            // restore old values
            $resulte.attr('resultkey') == $resulte.attr('oresultkey');
            $resulte.attr('result') == $resulte.attr('oresult');
            valid = false;
            return valid;
        }

        //if (($resulte.attr('oresultkey') != $resulte.attr('resultkey') || $resulte.attr('oresult').replace(/\r\n/g, "<br>") != $resulte.attr('result')) && valid == true) {
        if (($resulte.attr('oresultkey') != $resulte.attr('resultkey') || $resulte.attr('oresult') != $resulte.attr('result')) && valid == true) {
            
            if (Result != "") {
                // validate string length
                if (ft == "s" && fs > 0 && Result.length > fs && ftemplate == 'text') {
                    $resulte.css('background-color', '#FCF8E3');
                    //MessageBox("Validation: Text Too Long", "The text you entered is longer than the maximum length allowed (" + fs + " characters).<br /><br />Please edit.", "warning");
                    gridBox({ type: "message", title: "Validation: Text Too Long", body: "The text you entered is longer than the maximum length allowed (" + fs + " characters).<br /><br />Please edit.", type: "warning" });
                    // restore old values
                    $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                    $resulte.attr('result') == $resulte.attr('oresult');
                    valid = false;
                    return valid;
                }

                // Validate numbers
                if (ft == "n" && !$.isNumeric(Result) && ftemplate == 'text') {
                    $resulte.css('background-color', '#FCF8E3');
                    //MessageBox("Validation: Not a Number", "The text you entered is not a number. A number is expected.<br /><br />Please edit.", "warning");
                    gridBox({ type: "message", title: "Validation: Not a Number", body: "The text you entered is not a number. A number is expected.<br /><br />Please edit.", type: "warning" });
                    // restore old values
                    $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                    $resulte.attr('result') == $resulte.attr('oresult');
                    valid = false;
                    return valid;
                }

                // Validate dates
                if (fc == "1" && isNaN(Date.parse(Result))) {

                    // autocomplete dates
                    if (!isNaN(Date.parse(Result + '/' + (new Date).getFullYear()))) {
                        Result = Result + '/' + (new Date).getFullYear();
                        $resulte.attr('result', Result);
                    }
                    else {
                        $resulte.css('background-color', '#FCF8E3');
                        //MessageBox("Validation: Not a Date", "The text you entered is not a date. A date is expected.<br /><br />Please edit.", "warning");
                        gridBox({ type: "message", title: "Validation: Not a Number", body: "The text you entered is not a date. A date is expected.<br /><br />Please edit.", type: "warning" });
                        // restore old values
                        $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                        $resulte.attr('result') == $resulte.attr('oresult');
                        valid = false;
                        return valid;
                    }
                }
            }

            Change += "<fv f='" + fn + "' v='" + ResultEncode(Result) + "' t='" + ft + "' e='" + fe + "' />";
        }

    });

    
    if (valid) {

        if (Change != "") {

            // check for required for new records
            //if (IsNewRecord && 1==2) {
            if (IsNewRecord) {

                $Results.each(function (index) {

                    var $resulte = $(this);

                    var Result = $resulte.attr('resultkey');
                    if (Result == "") {
                        Result = $resulte.attr('result');
                    }

                    var fr = $ths.eq(index).attr('fr');
                    var FieldLabel = $ths.eq(index).text().replace(/\*/, "");

                    if (fr == "1" && Result == "") {
                        $resulte.css('background-color', '#FCF8E3');
                        //MessageBox("Validation: Required Field Empty", "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", "warning");
                        gridBox({ type: "message", title: "Validation: Required Field Empty", body: "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", type: "warning" });
                        // restore old values
                        $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                        $resulte.attr('result') == $resulte.attr('oresult');
                        valid = false;
                        return valid;
                    }


                });
            }

            if (valid) {
                Change = "<data tb='" + $tb.attr('tb') + "' kf='" + $tb.attr('kf') + "' kfv='" + kfv + "' as='" + as + "' >" + Change + "</data>";
                //alert(Change);
                hgSaveChange(Change, $r, $Results, ModalID, cbParameters);
            }
        }
        else {
            // set post save flag in Grid
            $r.closest('.hg, .vg').attr('ps', '1');
            $Results.closest('.hg, .vg').attr('ps', '1');

            if (typeof (cbParameters) == 'function') {
                cbParameters();
                return;
            }
        }
    }
    

    return valid;
}

function _ValidateGrid(o) {

    var gridid = o.gridid;
    var onvalid = o.onvalid;
    var oninvalid = o.oninvalid;

    // hide grid
    $('#' + gridid + ' tbody:last').hide();

    hgEdit($('#' + gridid + ' tbody:last tr:first'));

    // restore required if disabled
    var RequiredDisabled = $('#' + gridid + ' th[fr="_1"]').length > 0;

    $('#' + gridid + ' th[fr="_1"]').attr('fr', '1');

    var valid = true;
    var Changes = "";

    var $tb = $('#' + gridid);
    var $tr = $tb.find('.hgHeaderRow:first');
    var $ths = $tr.find('th');
    var as = $tb.attr('as');

    var kfv = '';


    //alert(gridid);

    // validate
    $('#' + gridid + ' tbody:last tr').each(function () {

        var Change = "";

        // validate row
        var $r = $(this);
        kfv = $r.attr('kfv');

        hgEdit($r);

        var HasData = $r.find('.hgResult:not([template="checkbox"]):not([resultkey=""]), .hgResult:not([template="checkbox"]):not([result=""])').length > 0;
        //var HasData = $r.find('.hgResult:not([resultkey=""]), .hgResult:not([result=""])').length > 0;

        $r.find('.hgResult').each(function (index) {

            var $resulte = $(this);

            var ftemplate = $resulte.attr('template');

            // update
            UpdateTemplate($resulte[0]);

            var Result = $resulte.attr('resultkey');
            if (Result == "" || ftemplate == 'text') {
                Result = $resulte.attr('result');
            }
            
            var sResult = $resulte.closest('td').attr('skey');
            if (sResult == '' || ftemplate == 'text') {
                sResult = $resulte.closest('td').attr('sresult');
            }

            var fe = "";
            var fn = "";
            var ft = "";
            var fs = "";
            var fc = "";
            var fr = "";
            var fi = "";
            var FieldLabel = "";

            //if (hgfID != '') {
            if ($resulte.attr('tdo') != null) {
                var TDIndex = $resulte.attr('tdo');
                $th = $ths.eq(TDIndex);

                fe = $th.attr('fe');
                fn = $th.attr('fn');
                ft = $th.attr('ft');
                fs = $th.attr('fs');
                fc = $th.attr('fc');
                fr = $th.attr('fr');
                fi = $th.attr('fi');
                FieldLabel = $th.text().replace(/\*/, "");
            }
            else {
                var $tdl = $resulte.closest('tr').find('.vgLabel');

                fe = $tdl.attr('fe');
                fn = $tdl.attr('fn');
                ft = $tdl.attr('ft');
                fs = $tdl.attr('fs');
                fc = $tdl.attr('fc');
                fr = $tdl.attr('fr');
                fi = $tdl.attr('fi');
                FieldLabel = $tdl.text().replace(/\*/, "");

                // unformat
                if ($tdl.attr('fnf').indexOf('%') > -1) {
                    Result = Result.replace('#', '').replace(',', '').replace('%', '');
                    if ($.isNumeric(Result)) {
                        Result = ((Result) / 100) + '';
                    }
                } else if ($tdl.attr('fnf').indexOf('#') > -1) {
                    Result = Result.replace('#', '').replace(',', '');
                }
            }

            if (fi == '1') return true;

            $resulte.css('background-color', 'white');

            // check for required for existing data
            if (fr == "1" && (Result == "" || (ftemplate.indexOf('picker') > -1 && (Result == "" || Result == "0"))) && valid == true && (HasData)) {
            //if (fr == "1" && Result == "" && valid == true) {
                $resulte.css('background-color', '#FCF8E3');
                //MessageBox("Validation: Required Field Empty", "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", "warning");
                gridBox({ type: "message", title: "Validation: Required Field Empty", body: "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", type: "warning" });
                // restore old values
                $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                $resulte.attr('result') == $resulte.attr('oresult');
                valid = false;
                return valid;
            }

            //if (($resulte.attr('oresultkey') != $resulte.attr('resultkey') || $resulte.attr('oresult').replace(/\r\n/g, "<br>") != $resulte.attr('result')) && valid == true) {
            //if (($resulte.attr('oresultkey') != $resulte.attr('resultkey') || $resulte.attr('oresult') != $resulte.attr('result')) && valid == true) {
            if ((Result != sResult) && valid == true) {

                if (Result != "") {
                    // validate string length
                    if (ft == "s" && fs > 0 && Result.length > fs && ftemplate == 'text') {
                        $resulte.css('background-color', '#FCF8E3');
                        //MessageBox("Validation: Text Too Long", "The text you entered is longer than the maximum length allowed (" + fs + " characters).<br /><br />Please edit.", "warning");
                        gridBox({ type: "message", title: "Validation: Text Too Long", body: "The text you entered is longer than the maximum length allowed (" + fs + " characters).<br /><br />Please edit.", type: "warning" });
                        // restore old values
                        $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                        $resulte.attr('result') == $resulte.attr('oresult');
                        valid = false;
                        return valid;
                    }

                    // Validate numbers
                    if (ft == "n" && !$.isNumeric(Result) && ftemplate == 'text') {
                        $resulte.css('background-color', '#FCF8E3');
                        //MessageBox("Validation: Not a Number", "The text you entered is not a number. A number is expected.<br /><br />Please edit.", "warning");
                        gridBox({ type: "message", title: "Validation: Not a Number", body: "The text you entered is not a number. A number is expected.<br /><br />Please edit.", type: "warning" });
                        // restore old values
                        $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                        $resulte.attr('result') == $resulte.attr('oresult');
                        valid = false;
                        return valid;
                    }

                    // Validate dates
                    if (fc == "1" && isNaN(Date.parse(Result))) {

                        // autocomplete dates
                        if (!isNaN(Date.parse(Result + '/' + (new Date).getFullYear()))) {
                            Result = Result + '/' + (new Date).getFullYear();
                            $resulte.attr('result', Result);
                        }
                        else {
                            $resulte.css('background-color', '#FCF8E3');
                            //MessageBox("Validation: Not a Date", "The text you entered is not a date. A date is expected.<br /><br />Please edit.", "warning");
                            gridBox({ type: "message", title: "Validation: Not a Date", body: "The text you entered is not a date. A date is expected.<br /><br />Please edit.", type: "warning" });
                            // restore old values
                            $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                            $resulte.attr('result') == $resulte.attr('oresult');
                            valid = false;
                            return valid;
                        }
                    }
                }

                Change += "<fv f='" + fn + "' v='" + ResultEncode(Result) + "' t='" + ft + "' e='" + fe + "' />";
            }

            if (!valid) {
                return false;
            }

        });

        if (!valid) {
            return false;
        }

        if (Change != '') {
            Changes += "<data tb='" + $tb.attr('tb') + "' kf='" + $tb.attr('kf') + "' kfv='" + kfv + "' as='" + as + "' >" + Change + "</data>";
        }

    });

    $('#' + gridid + ' tbody:last').show();

    if (valid) {
        
        onvalid(Changes);
    }
    else {
        if (RequiredDisabled) {
            $('#' + gridid + ' th[fr="1"]').attr('fr', '_1');
        }
        oninvalid();
    }
}

function ApplyReportParameters() {

    $("body").css("cursor", "progress");

    var $Results = $('#tabvgParameters').find('.hgResult');
    
    $Results.each(function (index) {
        UpdateTemplate(this);
    });

    $lbls = $('#tabvgParameters').find('.vgLabel');
    $flds = $('#tabvgParameters').find('.vgField');

    var Parameters = "";

    $lbls.each(function (index) {
        Parameters += $(this).attr('fn') + '|';

        var ParameterValue = $flds.eq(index).find('.hgResult').attr('resultkey');

        if (ParameterValue == "" && $flds.eq(index).find('.hgResult')[0].tagName == 'SELECT') {
            ParameterValue = 'null';
        }


        if(ParameterValue == ""){
            ParameterValue = $flds.eq(index).find('.hgResult').attr('result');
        }
        Parameters += ParameterValue + '|';
    });

    if(Parameters != ""){
        Parameters = Parameters.substr(0, Parameters.length -1);
    }

    $('#txtReportParameters').val(Parameters);
    $("form:first").submit();
    //__doPostBack('__Page', '');
}

//???
function _ModalPage(ID, Page, Title, Left, Top, Width, Height, ActionFunctionName, ActionName) {

    if ($('#' + ID).length == 0) {
        var content = $('#divModalPage').html().replace('GenericModalPage', ID);
        $('body').append(content);

        $modalPage = $('#' + ID);
        $modalPage.find('.modal-title').html(Title);
        $modalPage.find('.modal-body').html("<iframe class='hgIframe' src='" + Page + "' style='width: calc(" + Width + " - 3px); height: " + Height + "; border: none;'></iframe>");
        $modalPage.find('.modal-body').css({ 'padding': '0px' });

        $modaldialog = $modalPage.find('.modal-dialog');
        $modaldialog.find('.SaveModalPage').on('click', function () {
            ModalPageAction($modalPage, ActionFunctionName);
        });
        $modaldialog.find('.SaveModalPage').html(ActionName);
        $modaldialog.css({ 'top': '' + Top + '', 'left': '' + Left + '', 'width': '' + Width + '' });
        $modaldialog.draggable({ handle: '.modal-header' });
    }
    else {
        $modalPage.find('.modal-title').html(Title);
        $modalPage.find('.modal-body').html("<iframe class='hgIframe' src='" + Page + "' style='width: calc(" + Width + " - 3px); height: " + Height + "; border: none;'></iframe>");
    }

    $modalPage.modal();

}

function vgFormSave(ModalID) {

    var $t = $('#tabvgEditForm');
    var TableID = $t[0].id;
    var kfv = $t.attr('kfv');
    var $Results = $t.find('.hgResult');

    ProcessChange(TableID, kfv, $Results, ModalID);
}

function ModalPageAction($p, ActionFunctionName) {

    var d = $p.find('.hgIframe')[0].contentWindow;
    var ModalID = $p.selector.replace(/#/, "");
    if (ActionFunctionName == "vgFormSave") {
        d.vgFormSave(ModalID);
        /*
        if (d.vgFormSave(ModalID)) {
            $p.modal('hide');
            //$('body').remove($p.selector);
        }
        */
    }  
}

//#region Setup users
function ResetPassword(e, p) {

    var HTML = "<div style='padding: 10px;'>Enter a new password:<br /><br /><input id=\"txtPassWord\" type=\"text\" class=\"form-control\" /></div>";

    if (p == null) {
        dialog = $(HTML).dialog({
            autoOpen: false,
            title: 'Reset Password',
            height: 240,
            width: 300,
            dialogClass: 'no-close',
            modal: true,
            buttons: {
                Cancel: {
                    text: 'Cancel', priority: 'secondary', click: function () {
                        dialog.dialog("close");
                    }
                },
                'Change Password': {
                    text: 'Change Password', priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {
                        ResetPassword(e, escape($('#txtPassWord')[0].value));
                        return;
                    }
                }
            }
        });
        dialog.dialog("open");
    }

    if (p == null) return;

    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "ResetPassword",
        password: p,
        kfv: $(e).closest('tr').attr('kfv'),
        tableselector: $(e).closest('.table').selector,
        tdindex: $(e).closest('td').index()
    })
        .done(function (data) {
            var r = data;
            MessageBox("Password Reset", r.message, r.messagetype);

            if (r.messagetype == "success") {
                dialog.dialog("close");
            }
        })
        .fail(function (data) {
            alert("Password Reset failed");
        });

    /*
    jqxhr.complete(function () {
        alert("second complete");
    });
    */
}

function UnlockAccount(e) {
    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "Unlock",
        kfv: $(e).closest('tr').attr('kfv'),
        tableid: $(e).closest('.table')[0].id,
        tdindex: $(e).closest('td').index()
    })
        .done(function (data) {
            var r = data;
            $('#' + r.tableid).find('tr[kfv="' + r.kfv + '"] td').eq(r.tdindex).html('');
            MessageBox("Unlock Account", r.message, r.messagetype);

            //alert("done");
        }).fail(function (data) {
            alert("Unlock Account failed");
        });
}

function EmailResetLink(e) {
    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "EmailResetLink",
        kfv: $(e).closest('tr').attr('kfv'),
        tableid: $(e).closest('.table')[0].id,
        tdindex: $(e).closest('td').index()
    })
        .done(function (data) {
            var r = data;
            MessageBox("Email Reset Link", r.message, r.messagetype);

            //alert("done");
        }).fail(function (data) {
            alert("Email Reset Link failed");
        });
}

function EmailWelcomeLink(e) {
    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "EmailWelcomeLink",
        kfv: $(e).closest('tr').attr('kfv'),
        tableid: $(e).closest('.table')[0].id,
        tdindex: $(e).closest('td').index()
    })
        .done(function (data) {
            var r = data;
            MessageBox("Email Welcome Link", r.message, r.messagetype);

            //alert("done");
        }).fail(function (data) {
            alert("Email Welcome Link failed");
        });
}

function LoginAs(e) {
    location.href = 'workorders.aspx?l=' + e.attr('login');
}
//#endregion

//#region Pop Dialogs
function _PopDialog(dialogP, Context, my, at, of, w, h, Title, QS, load, aText, aFunction) {

    if (my == null) {
        my = "center";
    }

    if (at == null) {
        at = "center";
    }

    if (of == null) {
        of = window;
    }

    if (load == null) {
        load = "grid_dialog.aspx";
    }

    if (QS == null) QS = "";
    QS = "?c=" + escape(Context) + "&w=" + w + "&h=" + h + "&t=" + escape(Title) + "&" + QS;
    var PQS = load + QS;

    // check if dialog already open
    if ($('#dia' + Context).length == 1) {

        // get
        //$('#dia' + Context).load(load + QS);

        // post
        var postdata = qstojson(QS);
        $('#dia' + Context).load(load.replace(/.aspx/,''), postdata);

        return false;
    }


    dialogP = $("<div id='dia" + Context + "' qs='" + PQS + "' style='position:relative; margin: 0px;'><img id='imgWait' src='images/wait.gif' class='waitgif' /></div>").dialog({
        autoOpen: false,
        title: Title,
        position: { my: my, at: at, of: of },
        height: h,
        width: w,
        dialogClass: 'no-close',
        modal: true,
        closeOnEscape: false,
        buttons: {
            Cancel: {
                text: 'Cancel', priority: 'secondary', click: function () {
                    //dialog.dialog("close");
                    //return false;
                    $('#dia' + Context).dialog('destroy').remove();
                }
            },
            'Save': {
                text: aText, priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {

                    if (NoExec) {
                        NoExec = false;
                        return;
                    }

                    if (aFunction != null) {
                        //var valid = aFunction();
                        aFunction();

                        if (Context.indexOf('Spread') > -1) {
                            return;
                        }
                        
                        WaitUntilGridSaves(Context, function () {
                            //aFunction();
                            if ($('#dia' + Context).find('.tabledetail').length > 0) {
                                return; //DetailUpdate();
                            }
                            else {
                                $('#dia' + Context).dialog('destroy').remove();
                            }
                        });
                        
                        //}
                    }
                    else {
                        WaitUntilGridSaves(Context, function () {
                            $('#dia' + Context).dialog('destroy').remove();
                        });
                    }
                    return;
                }
            }
        }
    });

    // get
    //dialogP.load(load + QS);

    // post 
    var postdata = qstojson(QS);
    dialogP.load(load.replace(/.aspx/,''), postdata);

    dialogP.dialog("open");

    CloneButtonsInTitle('dia' + Context);

    WaitUntil(function () {
        //return ($('#tab' + Context).length == 1 || $('#dia' + Context + ' .hg').length == 1);
        return $('#dia' + Context + ' .hg').length == 1;
    }, function () {
        PopDialogPost(Context);
    });

    return false;
}

function _PopDialogPost(Context) {
    
    
    if (Context == 'Calendar') {

        $('#divGrid' + Context).scrollTop($('.PeriodSelected').closest('tr')[0].offsetTop - 80);
        // make all confirm filter links
        //$('#tab' + Context + ' tbody:last tr td:nth-child(2)').append('&nbsp;&nbsp;<a href="#" onclick="ResearchPicker(event, this);" ><span class="glyphicon glyphicon-filter" style="font-size:.8em; color: #0645AD; padding: 0px 4px 0px 4px;"  /></a>');
    }
    
}

function _PopDialogH(dialogH, Context, my, at, of, w, h, Title, QS, load) {

    if (my == null) {
        my = "center";
    }

    if (at == null) {
        at = "center";
    }

    if (of == null) {
        of = window;
    }

    if (load == null) {
        load = "grid_dialog.aspx";
    }

    if (QS == null) QS = "";
    QS = "?c=" + escape(Context) + "&w=" + w + "&h=" + h + "&t=" + escape(Title) + QS;

    // check if dialog already open
    if ($('#dia' + Context).length == 1) {
        $('#dia' + Context).load(load + QS);
        return false;
    }

    dialogH = $("<div id='dia" + Context + "' style='position:relative;'/>").dialog({
        autoOpen: false,
        title: Title,
        position: { my: my, at: at, of: of },
        height: h,
        width: w,
        dialogClass: 'no-close',
        modal: true,
        closeOnEscape: false,
        buttons: {
            Cancel: {
                text: 'Cancel', priority: 'secondary', click: function () {
                    //dialog.dialog("close");
                    //return false;
                    $(this).dialog('destroy').remove();
                }
            },
            'Save': {
                text: 'Save', priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {
                    var valid = SaveGrids();
                    if (valid) {
                        $(this).dialog('destroy').remove();
                    }
                    return;
                }
            }
        }
    });

    dialogH.load(load + QS);
    dialogH.dialog("open");
    return false;
}

function _PopDialogV(dialogV, Context, my, at, of, w, h, Title, QS, load, aFunction) {

    if (my == null) {
        my = "center";
    }

    if (at == null) {
        at = "center";
    }

    if (of == null) {
        of = window;
    }

    if (load == null) {
        load = "grid_dialog_v.aspx";
    }

    if (QS == null) QS = "";
    QS = "?c=" + escape(Context) + "&w=" + w + "&h=" + h + "&t=" + escape(Title) + QS;

    // check if dialog already open
    if ($('#dia' + Context).length == 1) {
        $('#dia' + Context).load(load + QS);
        return false;
    }

    dialogV = $("<div id='dia" + Context + "' style='position:relative;'/>").dialog({
        autoOpen: false,
        title: Title,
        position: { my: my, at: at, of: of },
        height: h,
        width: w,
        dialogClass: 'no-close',
        modal: true,
        closeOnEscape: false,
        buttons: {
            Cancel: {
                text: 'Cancel', priority: 'secondary', click: function () {
                    $(this).dialog('destroy').remove();
                }
            },
            'Save': {
                text: 'Save', priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {
                    if (aFunction != null) {
                        //var valid = aFunction();
                        aFunction();
                    }
                    else {

                        var valid = SaveGrids();
                        if (valid) {
                            //$(this).dialog('destroy').remove();
                            $('#dia' + Context).dialog('destroy').remove();
                        }
                    }
                    return;
                }
            }
        }
    });

    dialogV.load(load + QS);
    dialogV.dialog("open");
    return false;
}

//#endregion



function PopDocDialogTitle(c, cid, e) {
    if (c == 'Supply Bills') {
        var title = $('#diaDocs').dialog('option','title');
        var t = $(e).closest('tr').find('td:first').text();
        $('#diaDocs').dialog({ title: title + ' - ' + t });        
    }
}

function _PopChatDialog(Context, ContextID, x, y, w, h, e) {

    gridPop({
        element: e,
        type: 'chat',
        context: Context,
        contextID: ContextID,
        w: w,
        h: h
    });
    return;
    /*
    $(e).addClass('CurrentChat');

    var QS = "c=" + escape(Context) + "&cid=" + ContextID + "&w=" + w + "&h=" + h + "&t="; // + escape(Context);

    //dialog = $("<div style='position:relative;'>").dialog({
    //dialog = $("<div id='diaDocs' ><iframe id='ifrChat' name='ifrChat' style='width: " + (w - 2) + "px; height: " + (h - 130) + "px; margin: 0; padding: 0; border: 0px solid #000;' src='chat.aspx?" + QS + "' ></iframe></div>").dialog({
    var dialogChat = $("<div id='dia" + Context + "' style='position:relative; margin: 0px;'><img id='imgWait' src='images/wait.gif' class='waitgif' /></div>").dialog({
        autoOpen: false,
        title: Context + ' Chat',
        height: h,
        width: w,
        dialogClass: 'no-close',
        modal: true,
        closeOnEscape: false,
        buttons: {
            'Add': {
                text: 'Add Comment',
                priority: 'primary',
                style: 'background: #428BCA; color: #fff;',
                click: function () {

                    var LastComment = $('#tabChatComment .hgResult').text();

                    if (LastComment != '') {
                        if (LastComment.length > 20) {
                            LastComment = LastComment.substr(0, 17) + '...';
                        }

                        $('.CurrentChat').text(LastComment).removeClass('CurrentChat');
                    }

                    var valid = SaveGrid('ChatComment');

                    if (valid) {
                        //$('#dia' + Context).dialog('widget').dialog('destroy').remove();
                        $(this).dialog('destroy').remove();
                    }
                }
            }
            ,
            Cancel: {
                text: 'Cancel',
                priority: 'secondary',
                click: function () {
                    //dialog.dialog("close");
                    //return false;

                    //PostDocDialog(Context, ContextID);

                    //$('#dia' + Context).dialog('widget').dialog('destroy').remove();
                    $(this).dialog('destroy').remove();
                }
            }
        }
    });


    dialogChat.load("chat.aspx?" + QS);
    dialogChat.dialog("open");
    return false;
    */
}

function IsDirty(r) {

    var dirty = false;
    r.each(function () {
        var e = $(this);

        var template = e.attr('template');

        switch (template) {
            case 'text':
                if (e.val() != e.attr('result') || e.attr('oresult') != e.attr('result')) dirty = true;
                break;
            case 'checkbox':
                if ((e.prop('checked') && e.attr('resultkey') != '1') || (!e.prop('checked') && e.attr('resultkey') != '0') || e.attr('oresultkey') != e.attr('resultkey')) dirty = true;
                break;
            case 'select':
                if (e.val() != e.attr('resultkey') || e.attr('oresultkey') != e.attr('resultkey')) dirty = true;
                break;
            case 'multipleselect':
                if ($.map(e.find('input:checked'), function (val) { return val.value; }).join(', ') != e.attr('resultkey') || e.attr('oresultkey') != e.attr('resultkey')) dirty = true;
                break;
            case 'calendar':
                if (e.find(':first-child').val() != e.attr('result') || e.attr('oresult') != e.attr('result')) dirty = true;
                break;
            case 'textarea':
                if (e.val() != e.attr('result') || e.attr('oresult') != e.attr('result')) dirty = true;
                break;
        }

        if (dirty) {
            return false;
        }

    });

    return dirty;
}

function SaveGrid(id, cbParameters) {

    var valid = true;

    $('.hg' + '#tab' + id).each(function (index, hgrid) {

        var $r;

        //if (hgrid.getAttribute('tb') == 'waIUWP3zjL+/4LSdTayagS3/dflhGq2jMxcFtus1j64=') {
        if ($('#tab' + id).attr('gas') == "0" && cbParameters != null) {

            // validate last edited record
            $r = $(hgrid).find('tbody tr.RowEdit');

            if ($r.length > 0) {

                hgEdit(this);

                var $Results = $r.find('.hgResult');
                var TableID = hgrid.id;
                var kfv = $r.attr('kfv');
                valid = ProcessChange(TableID, kfv, $Results, "", cbParameters);
                if (!valid) {
                    return valid;
                }
            }
            
            // select all edited
            //$r = $(hgrid).find('tbody:last tr').has('td:not(:empty)');
            //$r = $(hgrid).find('tbody:last tr:not(.hgNewRecord), tr.RowEdit')
            $r = $(hgrid).find('tbody:last tr');
            //$r = $(hgrid).find('tbody:last tr:not(.hgNewRecord, .RowEdit)')
            //r$ = $(hgrid).find('tbody:last tr[class=""]');

            var cbParametersOld = cbParameters;

            cbParameters = 'OverrideAutoSave';

            $(hgrid).find('tbody:last').hide();

            $r.each(function () {
                //if ($(this).has('td:not(:empty)') == true || ($(this).hasClass('RowEdit') && IsDirty($(this))) == true) {

                    hgEdit(this);

                    if ($(this).find('.hgResult:not([result=""]).hgResult:not([resultkey="0"])').length > 0) {

                        var $Results = $(this).find('.hgResult');

                        // reset old results
                        $Results.attr('oresult', '');
                        $Results.attr('oresultkey', '');

                        var TableID = hgrid.id;
                        var kfv = $(this).attr('kfv');
                        //valid = ProcessChange(TableID, kfv, $Results, "", cbParameters);
                        valid = ProcessChange(TableID, kfv, $Results, "", cbParameters);
                        if (!valid) {
                            $(hgrid).find('tbody:last').show();
                            return valid;
                        }
                    }
                //}
            });

            $(hgrid).find('tbody:last').show();
            /*
            if (id == 'DetailOrder_Entry') {
                $('#diaDetailOrder_Entry').dialog('destroy').remove();
            }
            else {
                //reload
                setTimeout(function () { location.reload(true); }, 500);
            }
            */
            if (cbParametersOld == 'ReloadPage') {
                setTimeout(function () { ReloadPage(); }, 500);
            }


            if (cbParametersOld == 'UpdateDetail') {               
                //DetailUpdate();
                //remove detail
                //$('#diaDetailOrderEntry').dialog('destroy').remove();
                $(hgrid).attr('psd', '1');
                return;
            }
            
        }
        else {
            $r = $(hgrid).find('tbody tr.RowEdit');

            if ($r.length > 0) {

                var $Results = $r.find('.hgResult');
                var TableID = hgrid.id;
                var kfv = $r.attr('kfv');
                valid = ProcessChange(TableID, kfv, $Results, "", cbParameters);
                if (!valid) {
                    return valid;
                }
            }
        }

        
        /*
        var $r = $(hgrid).find('tbody tr.RowEdit');

        if ($r.length > 0) {
            var $Results = $r.find('.hgResult');
            var TableID = hgrid.id;
            var kfv = $r.attr('kfv');
            valid = ProcessChange(TableID, kfv, $Results, "", cbParameters);
            if (!valid) {
                return valid;
            }
        }
        */
    });

    if (!valid) {
        return valid;
    }

    $('.vg' + '#tab' + id).each(function (index, vgrid) {
        var TableID = vgrid.id;
        var kfv = $(vgrid).attr('kfv');
        var $Results = $(vgrid).find('.hgResult');

        if (cbParameters == "NotInList|selContacts|0") {
            cbParameters += "|" + $Results[0].value + ", " + $Results[1].value + " - " + $Results[2].value;
        }

        if (cbParameters == "NotInList|selHolders|0") {
            cbParameters += "|" + $Results[0].value + " - " + $Results[1].value;
        }

        valid = ProcessChange(TableID, kfv, $Results, "", cbParameters);
        if (!valid) {
            return valid;
        }
    });
    
    return valid;
}

function SaveGrids() {

    var valid = true;

    $('.hg').each(function (index, hgrid) {
        var $r = $(hgrid).find('tbody tr.RowEdit');

        if ($r.length > 0) {
            var $Results = $r.find('.hgResult');
            var TableID = hgrid.id;
            var kfv = $r.attr('kfv');
            valid = ProcessChange(TableID, kfv, $Results, "");
            if (!valid) {
                return valid;
            }
        }
    });

    if (!valid) {
        return valid;
    }

    $('.vg').each(function (index, vgrid) {
        var TableID = vgrid.id;
        var kfv = $(vgrid).attr('kfv');
        var $Results = $(vgrid).find('.hgResult');

        valid = ProcessChange(TableID, kfv, $Results, "");
        if (!valid) {
            return valid;
        }
    });

    return valid;
}

function BrowseFiles(ID) {
    $("input[id='" + ID + "']").click();
}

function OpenDoc(ID) {
    poster({ url: 'display_doc', target: '_blank', data: { did: ID } });
}

function poster(o) {

    /*  usage
    poster( { 
                url: 'display_doc', 
                target: '_blank', 
                data: { did: ID } 
            });
     */


    $.each(o.data, function (key, value) {
        $('form:first input[id="' + key + '"]').remove();
        $('form:first').append('<input type="hidden" id="' + key + '" name="' + key + '" value="' + value + '" />');
    });

    $('form:first').attr('target', o.target);
    $('form:first').attr('action', o.url);
    $('form:first').submit();
}

function LeftMenu(Topic) {

    // mouse pointer
    $('body').css('cursor', 'wait');
    //WaitBox(Topic, 'Please wait.', info);

    // get div vertical scroll value
    if (document.getElementById("divLeftMenu") != null) {
        SetCookie("divLeftMenu", document.getElementById("divLeftMenu").scrollTop, 1);
    }
    
    document.forms[0].txtTopic.value = Topic;
    document.forms[0].submit();
}

function LeftMenuSelect(Topic, e) {
    document.forms[0].txtTopic.value = Topic;
    document.forms[0].txtTopicID.value = e.options[e.selectedIndex].value;
    document.forms[0].txtTopicTitle.value = e.options[e.selectedIndex].text;
    document.forms[0].submit();
}

function hgDeleteRow(e){

    var $r = $(e).closest('tr[kfv]');
    var kfv = $r.attr('kfv');
    var $tb = $r.closest('table');

    var c = "<data tb='" + $tb.attr('tb') + "' kf='" + $tb.attr('kf') + "' kfv='" + kfv + "' as='" + $tb.attr('kf') + "' de='1' ></data>";

    var ModalID = $(e).closest('.ui-dialog').attr('aria-describedby');

    //MessageBox('Test', 'Yada yada yada yada yada yada yada yada yada Yada yada yada yada yada yada yada yada yada<br/>Yada yada yada yada yada<br />Yada<br/>Yada yada yada yada yada<br />Yada', 'info');

    hgConfirm("Are you sure you want to delete this item?<br /><br />This action cannot be reversed.", function () { hgSaveChange(c, $r, null, ModalID); $r.remove(); }, "Confirm Delete", 400, 240);

    //if (confirm("Are you sure you want to delete this record?\n\nThis action cannot be reversed.")) {
    //hgSaveChange(c, $r, null, ModalID);
    //}
    
}

function _hgConfirm(Body, YesFunction, Title, w, h, my, at, of) {

    if (my == null) {
        my = "center";
    }

    if (at == null) {
        at = "center";
    }

    if (of == null) {
        of = window;
    }

    if (Title == null) {
        Title = "Confirmation";
    }

    dialogC = $("<div id='diaConfirm' class='confirm-dialog' >" + Body + "</div>").dialog({
        autoOpen: true,
        title: Title,
        position: { my: my, at: at, of: of },
        height: h,
        width: w,
        dialogClass: 'no-close',
        modal: true,
        buttons: {
            Cancel: {
                text: 'No', priority: 'secondary', click: function () {
                    $(this).dialog('destroy');
                    return false;
                }
            },
            'Yes': {
                text: 'Yes', priority: 'primary', style: 'background: #F0AD4E; color: #fff;', click: function () {
                    $(this).dialog('destroy');
                    YesFunction();
                    return true;
                }
            }
        }
    }).prev('.ui-dialog-titlebar').css('background', '#F0AD4E');

    //dialogC.dialog("open");
}

function _hgConfirmP(o) {
    /*
     hgConfirmP({
                title: 'Cart Empty',
                body: 'What do you want to do?',
                width: 360,
                yesButtonText: 'Select another test',
                yesFunction: function () { setTimeout(function () { document.location.href = "home"; }, 250); },
                noButtonText: 'Go to the Orders page',
                noFunction: function () { setTimeout(function () { document.location.href = "orders"; }, 250); }
            });
    */

    var w = o.width;

    var h = o.height;

    var my = o.my;
    if (my == null) {
        my = "center";
    }

    var at = o.at;
    if (at == null) {
        at = "center";
    }

    var of = o.of;
    if (of == null) {
        of = window;
    }

    var Title = o.title;
    if (Title == null) {
        Title = "Confirmation";
    }

    var Body = o.body;

    var noButtonText = o.noButtonText;
    if (noButtonText == null) {
        noButtonText = 'No';
    }

    var yesButtonText = o.yesButtonText;
    if (yesButtonText == null) {
        yesButtonText = 'Yes';
    }

    var noFunction = o.noFunction;
    if (noFunction == null) {
        noFunction = function () { };
    }

    var yesFunction = o.yesFunction;
    if (yesFunction == null) {
        yesFunction = function () { };
    }


    dialogC = $("<div id='diaConfirm' class='confirm-dialog' >" + Body + "</div>").dialog({
        autoOpen: true,
        title: Title,
        position: { my: my, at: at, of: of },
        height: h,
        width: w,
        dialogClass: 'no-close',
        modal: true,
        buttons: {
            Cancel: {
                text: noButtonText, priority: 'secondary', click: function () {
                    $(this).dialog('destroy');
                    noFunction();
                    return false;
                }
            },
            'Yes': {
                text: yesButtonText, priority: 'primary', style: 'background: #F0AD4E; color: #fff;', click: function () {
                    $(this).dialog('destroy');
                    yesFunction();
                    return true;
                }
            }
        }
    }).prev('.ui-dialog-titlebar').css('background', '#F0AD4E');

    //dialogC.dialog("open");
}

function FilterCascading(e) {
    
    var result = e.options[e.selectedIndex].innerHTML;

    // filter dependent selects
    var id = e.id.toLowerCase();
    $t = $(e).closest('.hgeditformtable');
    var hgID = $t.attr('srctableid');
    var sel = $('#' + hgID + ' th[ftp*="' + id + '"]').attr('ftp');
    $s = $t.find('select:has(option[' + id + '])');

    $s.each(function (index, el) {

        // copy reference
        $sel = $(el).parent().attr('sel');
        // if does not exist, create
        if (typeof ($sel) == 'undefined') {
            $(el).parent().attr('sel', $(el).html());
            $sel = $(el).parent().attr('sel');
        }
        else {
            // reset select
            $(el).html($sel);
        }



        // remove unconforming
        $(el).find('option[' + id + '!="' + result + '"][' + id + '!=""][' + id + ']').remove();
    });
}

function FilterCascadingFormFields(e) {

    var result = e.options[e.selectedIndex].innerHTML;

    // filter dependent selects
    var id = e.id.toLowerCase();
    var $t = $(e).closest('table');
    var tri = $(e).closest('tr')[0].rowIndex;
    $trs = $t.find('tr:gt(' + tri + ')');
    $s = $trs.find('select:has(option[' + id + '])');

    $s.each(function (index, el) {

        // copy reference
        $sel = $(el).parent().attr('sel');
        // if does not exist, create
        if (typeof ($sel) == 'undefined') {
            $(el).parent().attr('sel', $(el).html());
            $sel = $(el).parent().attr('sel');
        }
        else {
            // reset select
            $(el).html($sel);
        }



        // remove unconforming
        $(el).find('option[' + id + '!="' + result + '"][' + id + '!=""][' + id + ']').remove();
    });
}

function ShowReport(ReportRDL, Format, FileName, Parameters, HideParameters) {
    window.open("report.aspx?rdl=" + escape(ReportRDL) + "&par=" + escape(Parameters) + "&hide=" + escape(HideParameters) + "&format=" + escape(Format) + "&file=" + escape(FileName), "report");
    //window.open("report.aspx?rdl=Daily Measurements.rdl&para=" + Parameters + "&hide=" + HideParameters + "&format=" + Format + "&file=" + FileName, "report");
}

function ShowReportx(ReportRDL, Format, FileName, Parameters, HideParameters) {
    window.open("reportx.aspx?rdl=" + escape(ReportRDL) + "&par=" + escape(Parameters) + "&hide=" + escape(HideParameters) + "&format=" + escape(Format) + "&file=" + escape(FileName), "report");
    //window.open("report.aspx?rdl=Daily Measurements.rdl&para=" + Parameters + "&hide=" + HideParameters + "&format=" + Format + "&file=" + FileName, "report");
}

function AddNewDropDownItem(e) {

    // set selected to null
    e.options.selectedIndex = 0;

    //$(e).removeClass('NotInList').addClass('NotInList');
    

    var id = e.id;
    var valid = true;

    if (id == "selHolders") {

        var aFunction = function () {
            valid = SaveGrid('Grid', 'NotInList|' + e.id + "|0");
            return valid;
        };

        var NewHolder;

        PopDialog(NewHolder, "new holder", null, null, null, 600, 650, "New Holder", null, "grid_dialog_v.aspx", "Save", aFunction);
        
    }

    if (id == "selContacts") {

        var mid = $('#selMembers').val();

        var aFunction = function () {
            valid = SaveGrid('Grid', 'NotInList|' + e.id + "|0");
            return valid;
        };

        var NewContact;

        PopDialog(NewContact, "new contact", null, null, null, 600, 650, "New Contact", "&mid=" + mid, "grid_dialog_v.aspx", "Save", aFunction);

    }
}

function PostDocDialog(c, cid) {
    if (c == "Receipt") {
        var m = GetCookie('DocumentMessage');
        if (m != null && m != '') {
            location.reload();
        }
    }
}

function EmailCertificate(cid, Email) {
    var dialogP;

    var aFunction = function () {
        $('#diaemail').dialog('destroy').remove();
        PopDialog(dialogP, "email", null, null, null, 1000, 600, "Certificate Email Send Log - " + (10000 + cid * 1), "&cid=" + cid + "&tx=1", null, "Send to " + Email, aFunction);
    };

    PopDialog(dialogP, "email", null, null, null, 1000, 600, "Certificate Email Send Log - " + (10000 + cid * 1), "&cid=" + cid + "&tx=0", null, "Send to " + Email, aFunction);
}

function ApplyCascades(e) {
    $(e).find('select').each(function (index, el) {
        FilterCascading(el);
    });
}

function FilterSelect(e) {

    var result = e.options[e.selectedIndex].innerHTML;
    var tid = e.getAttribute("tid");
    var ta = e.getAttribute("ta");

    var hgID = $(e).closest('.hg').attr("id");
    
    var sel;
    $('#' + hgID + ' th[ftp]').each(function (index, value) {
        var s = $(value).attr('ftp');
        if (s.indexOf("_id='selItems'") > -1) {
            sel = s;
            return false;
        }

    });

    $("#" + tid).html(sel);

    // remove unconforming
    $("#" + tid).each(function (index, value) {
        $(value).find('option[' + ta + '!="' + result + '"][' + ta + '!=""][' + ta + ']').remove();
    });

}

//#region RowGroups

function ToggleGroups(e, Mode) {

    var t = $(e).closest('.hg');
    if (t == null) return;

    var trs = t.find('tbody:last tr');

    for (var r = 0; r < trs.length; r++) {

        var row = trs[r];
        var cn = row.className;

        if (cn.indexOf("RowGroup") == 0) {
            if (Mode == "+") {
                $(row).addClass('RowGroupCollapsed').removeClass('RowGroupExpanded');
            }
            else {
                $(row).addClass('RowGroupExpanded').removeClass('RowGroupCollapsed');
            }
        }
        else {
            if (Mode == "+") {
                row.style.display = "none";
            }
            else {
                row.style.display = "";
            }
        }
    }
}

function ToggleRowGroup(e) {

    //return;

    //var t = e.parentNode;
    var t = $(e).closest('.hg');
    var cc = e.className;
    var hr = t.find('thead tr').has('th').length;
    var r = e.rowIndex - hr;
    var a = "";

    if (cc.indexOf("RowGroupCollapsed") > -1) {
        $(e).addClass('RowGroupExpanded').removeClass('RowGroupCollapsed');
    }
    else {
        $(e).addClass('RowGroupCollapsed').removeClass('RowGroupExpanded');
        a = "none";
    }

    var trs = t.find('tbody:last tr');

    for (var i = r + 1; i < trs.length; i++) {
        var row = trs[i];
        if ((row.className.indexOf("RowGroup") > -1 && row.className.substr(8, 2) <= cc.substr(8, 2)) || i == row.length - 1 || row.className == "hgNewRecord") {
            break;
        }
        else {
            row.style.display = a;
        }

    }
}

function SetRowGroups() {

    return;

    $('[class^="RowGroup"]').each(function (index, e) {
        var t = e.parentNode;
        var cc = e.className;
        var r = e.rowIndex - 4;
        var a = "";
        var rowcount = 0

        if (cc.indexOf("RowGroupCollapsed") > -1) {
            a = "none";
        }

        for (var i = r + 1; i < t.rows.length; i++) {
            if ((t.rows(i).className != "" && t.rows(i).className <= cc) || i == t.rows(i).length - 1 || t.rows(i).className == "hgNewRecord") {
                var GroupTD = e.childNodes[0];
                //GroupTD.innerHTML = e.childNodes[0].textContent + "&nbsp;&nbsp;<span class='badge RowGroupBadge'>" + rowcount + "</span>";
                //GroupTD.innerHTML = e.childNodes[0].textContent + "&nbsp;<sup>" + rowcount + "</sup>";
                GroupTD.innerHTML = e.childNodes[0].textContent;
                break;
            }
            else {
                t.rows(i).style.display = a;
                if (t.rows(i).className.indexOf('RowGroup') == -1) {
                    rowcount = rowcount + 1;
                }
            }
        }
    });
}

//#endregion

function Help(e) {
    window.open('help.pdf', 'help');
}

function hgPopImport(c, e, w, h) {
    //alert("Later");
    //PopDocDialog(c, '1', null, null, 800, 400);
    gridPop({ type: 'docs', element: this, context: c, title: 'Test Docs', w: 800, h: 500 });
}

function download(filename, text) {
    var element = document.createElement('a');
    element.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(text));
    element.setAttribute('download', filename);

    element.style.display = 'none';
    document.body.appendChild(element);

    element.click();

    document.body.removeChild(element);
}

function hgPopTemplate(e, w, h, f) {

    // get list of field names
    var Fields = "";
    var $ths = $('#tabBody .hgHeaderRow:first th').each(function () {
        if ($(this).attr('fd') != "1") {
            Fields += this.textContent.trim().replace(/\*/g,'') + ",";
        }
    });
    
    if (Fields.length > 1) {
        Fields = Fields.substr(0, Fields.length - 1);
    }

    var l = location.href;

    if (l.indexOf('Touches') > -1 || l.indexOf('touches') > -1) {
        Fields = 'Prospect,' + Fields;
    }

    window.open("Process_Request.aspx?action=" + escape("Download Template") + "&fields=" + escape(Fields) + "&filename=" + escape(f), "_blank");

    //var uriContent = "data:application/octet-stream," + encodeURIComponent(Fields);
    //var newWindow = window.open(uriContent, f + ".csv");

    /*
    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "Download Template",
        fields: Fields,
        filename: f
    })
        .done(function (data) {
            var r = data;
            //$('#' + r.tableid).find('tr[kfv="' + r.kfv + '"] td').eq(r.tdindex).html('');
            //MessageBox("Download Template", r.message, r.messagetype);

            //alert("done");
        }).fail(function (data) {
            MessageBox("Download Template Error", data.message, data.messagetype);
            //alert("Download template failed");
        });
    */
    //alert("Later");

    //window.location.href = "data:text/plain;charset=UTF-8," + encodeURIComponent("Hello World");
    //download("CampaignTemplate.csv", Fields);

    /*
    //var a = window.document.createElement('a');
    var a = window.document.getElementById("aDownload");
    //a.href = window.URL.createObjectURL(new Blob(['Test,Text'], { type: 'text/csv' }));
    a.download = 'test.csv';

    // Append anchor to body.
    //document.body.appendChild(a)
    a.click();
    //window.location.href = a.href;

    // Remove anchor from body
    //document.body.removeChild(a)
    */
}

function RelativePixels(wh, p, m) {
    // window dimensions
    var r;
    if (wh == 'w') {
        r = parseInt($(window).innerWidth() * p);
        if (r > m && m != null) {
            r = m;
        }
    }
    else {
        r = parseInt($(window).innerHeight() * p);
        if (r > m && m != null) {
            r = m;
        }
    }
    return r;
}

function ReloadPage() {
    var url = location.href;

    // strip bookmark
    if (url.indexOf("#") > -1) {
        url = url.substr(0, url.indexOf("#"), url.length - url.indexOf("#"));
    }

    location.href = url;
}

function SetGridPage(p, c) {
    //GrayOut(true);
    SetCookie(c, p, 1);
    //ReloadPage();
    //window.location = window.location.href;
    document.forms[0].submit();
}

//#region FieldsEditor

function FieldsEditor(e, Context, Source, KeyField, id, as, f, my, at, of, w, h) {
    
    // reset picker defaults
    if($('.fieldsform').length == 0) {
        SetCookie('PickerDefaults', '', -1);
    }

    var Title = Context;

    /*
    if (as == null) {
        as = $(e).closest('.hg').attr('as');
    }
    */

    if (as == null) as = '';

    /*
    if (fk != null) {
        if (as == '') {
            as += fk;
        }
        else {
            as += '|' + fk;
        }
    }
    */

    if (id == null) {
        if (e != null && e.innerHTML == "New") {
            id = "-1";
            Title = Context + " - New";
        }
        else if (e != null && e.innerHTML == "Test") {
            id = "-1";
            Title = Context + " - Test";
        }
        else if (e != null) {
            id = $(e).closest('tr').attr('kfv');
            SetCookie('Topic_' + Context, 'All', 1);
            Title = Context + ' - ' + $(e).text();
        }
        else {
            id = $('#tab' + Context + 'Editor').attr('kfv');
            Title = $('#dia' + Context + ' .ui-dialog-title').text();
        }
    }

    if (Context == null) {
        Title = '';
    }

    Title = Title.replace('_', ' ');

    // manage topics
    var Topic = GetCookie('Topic_' + Context);

    if (Topic == null) {
        Topic = $('#txtTopic').val();
    }

    if (Topic == '') {
        Topic = 'All';
    }

    if ($('#tab' + Context + 'Editor').length == 1) {

        if (Topic == 'All') {
            $('#tab' + Context + 'Editor tbody tr').css('display', '');
            return;
        }

        // get start topic/sub topic
        var span = $('#tabLeftMenu tr').has('a:contains("' + Topic + '")').find('span');
        var stopic = $(span).attr('topic');
        var ssubtopic = $(span).attr('subtopic');
        var etopic = stopic + ' - ' + ssubtopic;

        if (ssubtopic == '') {
            etopic = stopic;
        }

        var display = 'none';

        // hide all except topic
        $('#tab' + Context + 'Editor > tbody > tr').each(function (i, r) {
            //$(r).css('display', 'none');
            var l = $(r).find('td:first').text();
            var f = $(r).find('td:last').html();

            /*
            var ll = $(r).find('td:first').html();

            // new logs
            if (ll.indexOf('<b>') == -1) {
                f = '_';
            }
            */

            if (f == '' && l.indexOf(etopic) > -1) {
                display = '';
            }
            else if (display == '' && f == '' && l.indexOf(etopic) == -1) {
                display = 'none';
            }

            $(r).css('display', display);
        });


    }
    else {

        var hid = $(e).closest('.hg').attr('id');
        SetCookie('hgScrollTop', $('#div' + hid).scrollTop(), 1);
        SetCookie('hgHighlightedID', id, 1);
        
        var aFunction = function () {
            var valid = SaveGrid(Context + 'Editor', 'hgUpdate|' + hid + '|' + id);
            if (valid) {
                //var hid = $(e).closest('.hg').attr('id');
                //SetCookie('hgScrollTop', $('#div' + hid).scrollTop(), 1);
                //SetCookie('hgHighlightedID', id, 1);
                //parent.ReloadPage();
            }
            return valid;
        };

        if (f != null) {
            aFunction = f;
        }

        if (w == null) {
            w = RelativePixels('w', .9, 800);
        }

        if (h == null) {
            h = RelativePixels('h', .8);
        }

        // defaults to left
        if (my == null) {
            my = 'left';
            at = 'left+30';
            of = window;
            //using: function (pos, ext) { $(this).animate({ left: pos.left }, 200); }
        }


        var DialogContext;
        PopDialog(DialogContext, Context, my, at, of, w, h, Title, '&id=' + id + '&src=' + Source + '&kf=' + KeyField + '&as=' + as, 'FieldsForm.aspx', 'Save', aFunction);
        /*
        if (e.innerHTML == "Test") {
            $('.ui-dialog-buttonpane button:contains("Save")').button().hide();
        }
        */

        WaitUntil(function () {
            return $('#div' + Context + 'Editor').length == 1;
        }, function () {
            FieldEditorPost(e, Context, Source, KeyField, id, as);
        });
    }
}

function FieldsLeftMenu(Topic, Context) {

    $('#txtTopic').val(Topic);
    SetCookie('Topic_' + Context, Topic, 1);
    FieldsEditor(null, Context);
}

function FieldEditorPost(e, Context, Source, KeyField, id, as) {

    if (Context.indexOf('Product_Designer_') == 0) {

        //alert($('#dia' + Context + ' .vg .hgResult').length);
        //$('#dia' + Context + ' .vg').attr('kfv', '-1');

        $('#dia' + Context + ' .vg .hgResult').attr('oresult', 'result');
        $('#dia' + Context + ' .vg .hgResult').attr('oresultkey', '');

    }

    if (Context == 'SalesForce') {

        // green for matching SF Artemis values
        $('.SalesForce tbody tr').each(function () {
            if ($(this).find('td:first').html() == $(this).find('td:last').html()) {
                $(this).find('td:last').css('color', 'green');
            }
        });

        $('.NoArtemis tr th:nth-child(2), .NoArtemis tr td:nth-child(2) ').each(function () {            
                $(this).hide();
        });

        $('#detPositionIDs').attr('onclick', 'PopDetail(this, 70);');

        $('#tabSalesForceEditor td').has(' > table').each(function () {
            if ($(this).find(' > table').length > 2) {
                $(this).html('<div style="width:100%; height: 470px; overflow: auto;">' + $(this).html() + '</div>');
            }
        });

        // background
        $('#tabSalesForceEditor tr').each(function () {
            if ($(this).find('.hgResult').length == 0) {
                $(this).css('background-color', '#F7FAFC');
            }
        });

        // addall
        $('#tabSalesForceEditor .SFAddAll:not(:first)').html('');

        // update Known IDs
        $('#tabSalesForceEditor .hgResult:not([resultkey=""])').each(function () {
            var f = $(this).attr('id').replace('pick', '');
            var v = $(this).attr('resultkey');
            var l = $(this).text();

            $('#tabSalesForceEditor tr[title="' + f + '"]').each(function () {
                if ($(this).attr('value') == '') {
                    $(this).attr('value', v).find('td:first').html(l);
                }
            });

            if (f == 'ContactIDs') {
                var cids = v.split(',');
                var cnames = l.split(',');

                // get name of Main
                var mainlastname = $('.SFAdd[type="Main Contact"]').closest('table').find('tr[title="LastName"]').find('td:first').text();

                for (var i = 0; i < cnames.length; i++) {
                    if (cnames[i].indexOf(mainlastname) > -1) {
                        // update CounterpartyContactID
                        var cci$ = $('#tabSalesForceEditor tr[title="CounterpartyContactID"]');
                        if (cci$.attr('value') == '') {
                            cci$.attr('value', cids[i]).find('td:first').html(cnames[i]);
                        }

                        $('#tabSalesForceEditor tr[title="ContactID"][type="Main Contact"]').attr('value', cids[i]).find('td:first').html(cnames[i]);
                    }
                    else {
                        // update other
                        $('#tabSalesForceEditor tr[title="ContactID"]:not([type="Main Contact"])').attr('value', cids[i]).find('td:first').html(cnames[i]);
                    }
                }
            }
        });

        // shift to left
        //$('#dia' + Context).closest('.ui-dialog').css('left', '30px');

    }

    if (Context == 'Order_Entry') {

        $('#detPositionIDs').attr('onclick', 'PopDetail(this, 70);');

        /*
        // check if LEED selected in Agreement or any other field
        var t = $(e).closest('.vg');
        if (t.find('.vgField:contains("LEED")').length > 0) {
            t.find('.vgLabel:contains("LEED")').closest('tr').show();
        }
        else {
            t.find('.vgLabel:contains("LEED")').closest('tr').hide();
        }
        */
    }
    
    
}


//#endregion

function Chat(c, e) {
    id = $(e).closest('tr').attr('kfv');
    PopChatDialog(c, id, null, null, RelativePixels('w', .8, 800), RelativePixels('h', .8));
}

function ParseQueryString(t, URL) {

    if (URL == null) {
        URL = document.location.href;
    }

    if (typeof (t) == "undefined") {
        return URL.split("?")[1];
    }

    URL = "&" + URL.split("?")[1] + "&";
    var Start = URL.indexOf("&" + t + "=");

    if (Start == -1) {
        return "";
    }

    var End = URL.indexOf("&", Start + t.length + 2);

    return URL.substr(Start + t.length + 2, End - Start - t.length - 2);
}

function RenewSession() {
    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "RenewSession"
    })
        .done(function (data) {
            var r = data;
            //MessageBox("Password Reset", r.message, r.messagetype);

            if (r.messagetype == "success") {
                //dialog.dialog("close");
                $('#diaConfirm').dialog('destroy').remove();
            }
        })
        .fail(function (data) {
            alert("Password session renewal failed");
        });
}

function SetDeclined(e, m, i, d) {

    var c = e.checked;

    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "Declined",
        checked: c,
        context: m,
        context_id: i,
        declined_id: d
    })
        .done(function (data) {
            var r = data;
            //MessageBox("Password Reset", r.message, r.messagetype);

            if (r.messagetype == "success") {
                //dialog.dialog("close");
                //$('#diaConfirm').dialog('destroy').remove();
            }
        })
        .fail(function (data) {
            alert("Set declined failed");
        });
}

function EditTopics(m) {

    var aFunction = function () {
        var valid = SaveGrid('GridTopicEditor');
        if (valid) {
            //parent.ReloadPage();
            LeftMenu('Fields - ' + m + 's') ;
        }
        return valid;
    };

    var DialogET;
    PopDialog(DialogET, 'TopicEditor', null, null, null, RelativePixels('w', .9, 500), RelativePixels('h', .8, 700), 'Topics - ' + m, '&ctx=' + m, null, 'Save', aFunction);
}

function EditSubTopics(m) {
    var aFunction = function () {
        var valid = SaveGrid('GridSubTopicEditor');
        if (valid) {
            //parent.ReloadPage();
            LeftMenu('Fields - ' + m + 's');
        }
        return valid;
    };

    var DialogSET;
    PopDialog(DialogSET, 'SubTopicEditor', null, null, null, RelativePixels('w', .9, 500), RelativePixels('h', .8, 700), 'Sub Topics - ' + m, '&ctx=' + m, null, 'Save');
}



function hgSaveScrollTops() {

    // save scroll position
    $('.hg').each(function () {
        var $div = $(this).closest('div');
        SetCookie('ScrollTop_' + $div.attr('id'), $div.scrollTop(), 1);
    });
}

function hgApplyScrollTops() {

    // save scroll position
    $('.hg').each(function () {
        var $div = $(this).closest('div');
        var st = GetCookie('ScrollTop_' + $div.attr('id'));
        if (st != null) {
            $div.scrollTop(st);
        }
    });
}

function vgUpdateByLabel(l, v) {
    var $r = $('.vgLabel:contains("' + l + '")').siblings().find('.hgResult');
    if ($r.is('input')) {
        $r.val(v);
        $r.attr("result", v);
    }
    else if ($r.is('select')) {
        var $o = $r.find('option:contains(' + v + ')');
        $o.attr('selected', true);
        $o.attr("resultkey", $o.val());
    }
    else if ($r.is('div')) {
        $r.find('input').val(v);
        $r.find('input').attr("result", v);
    }

}

function _LotSamples(e) {

    var lid = $(e).closest('tr').attr('kfv');
    var Title = 'Samples and Measurements - ' + $(e).closest('tr').find('td:first').text();

    if (e == null) {
        var PQS = '?' + $('#diaSamples').attr('qs');
        lid = ParseQueryString('lid', PQS);
        Title = ParseQueryString('t', PQS);
    }

    
    var aFunction = function () {

        var valid = SaveGrid('Measurements');

        if (valid) {

            SetCookie('hgScrollTop', $('#divBody').scrollTop(), 1);
            SetCookie('hgHighlightedID', lid, 1);
            location.reload(true);
        }
        return valid;
    };
    

    var DialogSamples;
    PopDialog(DialogSamples, 'Samples', null, null, null, RelativePixels('w', .9, 1200), RelativePixels('h', .7, 800), Title, '&lid=' + lid, "lot_samples.aspx", 'Save', aFunction);
}

function _SampleEditor(e) {

    var sid = $(e).closest('tr').attr('kfv');

    if (typeof (sid) == 'undefined') {
        sid = '-1';
    }
    /*
    SetCookie('hgSamplesScrollTop', $('#divSamples').scrollTop(), 1);
    SetCookie('hgSamplesHighlightedID', sid, 1);

    var aFunction = function () {
        var valid = SaveGrid('SampleEditor');
        if (valid) {
            //SampleMeasurements(e);         
            LotSamples();
        }
        return valid;
    };
    */

    FieldsEditor(e, 'Sample', 'qc_Samples', 'Sample_ID', sid);
}

function PopEditFields(t) {
    //$('#tab' + t + ' tr[kfv] td .hgResult').on('focus', function () { $(this).css('background-color', 'red'); });
    $('#tab' + t + ' tr[kfv]').first().click();
}

function _ProductSelector(e) {

    var posid = $(e).closest('table').attr('kfv');
    var pid = $(e).closest('span').attr('pid');
    var Title = 'Product - ' + $(e).text();

    if (e == null) {
        var PQS = '?' + $('#diaProducts').attr('qs');
        pid = ParseQueryString('pid', PQS);
        posid = ParseQueryString('posid', PQS);
        Title = ParseQueryString('t', PQS);
    }


    var aFunction = function () {

        var valid = SaveGrid('Products');

        if (valid) {

            SetCookie('hgScrollTop', $('#divBody').scrollTop(), 1);
            SetCookie('hgHighlightedID', posid, 1);
            location.reload(true);
        }
        return valid;
    };


    var DialogProducts;
    PopDialog(DialogProducts, 'Products', null, null, null, RelativePixels('w', .9), RelativePixels('h', .7, 800), Title, '&posid=' + posid + '&pid=' + pid, "products.aspx", 'Save', aFunction);
}

function ProductEditor(e) {
    alert('Not Implemented');
}

//#region Picker
function PopPicker(e) {

    if ($(e).hasClass('disabled')) return;

    if (e != null) {
        LastPopPickere = e;
        f = e.getAttribute('f');
        LastPopPickerf = f;
        LastPopPickerw = e.getAttribute('w');
    }

    if (e == null) {
        e = LastPopPickere;
        f = LastPopPickerf;
        w = LastPopPickerw;
    }
    

    var q = e.getAttribute('q');
    var info = e.getAttribute('info').trim();
    var Title = $(e).closest('tr').find('td:first').text() + ' - ' + $(e).text();
    var Type = e.getAttribute('template');

    //validate foreign keys specified
    var fks = info.split(',');

    if (fks.length > 3) {
        for (var i = 3; i < fks.length; i++) {
            if ($('#pick' + fks[i]).attr('resultkey') == '' && $('#pick' + fks[i]).attr('result') == '') {
                var Label = $('#pick' + fks[i]).closest('td').prev().text();
                MessageBox(Label + ' Selection Required', 'Please select a value for ' + Label + ' first.', 'warning');
                return;
            }
        }
    }

    var FormData = '';

    $('.fieldsform').find('.hgResult').each(function () {
        var f = $(this).attr('fn');

        var v = $(this).attr('resultkey');
        if (v == '') {
            v = $(this).attr('oresultkey');
        }

        if (v == '') {
            v = $(this).attr('result');
        }

        if (v == '') {
            v = $(this).attr('oresult');
        }

        if ($(this).attr('type') == 'text') {
            v = $(this).val();
        }

        var l = $(this).text().replace(/\|/g, ',');

        if (l.length > 50) {
            l = l.substring(0, 50) + '...';
        }

        if (v != '') {
            FormData += f + '|' + escape(v) + '|' + escape(l) + '|';
        }

    });

    // add detail row form data
    if ($(e).closest('.hg').hasClass('tabledetail')) {
        $(e).closest('tr').find('.hgResult').each(function () {
            var f = $(this).attr('id');

            if (f != null) {
                //f = f.substr(4);            
                if (f.substr(0, 3) == 'sel') f = f.substr(3);
                if (f.substr(0, 4) == 'pick') f = f.substr(4);

                var v = $(this).attr('resultkey');
                if (v == '') {
                    v = $(this).attr('oresultkey');
                }

                if (v == '') {
                    v = $(this).attr('result');
                }

                if (v == '') {
                    v = $(this).attr('oresult');
                }

                var l = $(this).text();

                if (v != '') {
                    FormData += f + '|' + v + '|' + l + '|';
                }
            }

        });
    }

    if (FormData != '') {
        FormData = FormData.substr(0, FormData.length - 1);
    }

    // initialize
    if ($('#diaPicker' + f).length == 0) {
        var Choices = $(e).attr('resultkey');
        if (Choices == "") {
            $(e).attr('oresultkey');
        }

        SetCookie('PickerChoice', Choices, 1);
        SetCookie('PickerSearch', '', -1);
        SetCookie('PickerType', Type, 1);

        //if (e.id != "pickProductIDs") {
            SetCookie('PickerIDs', '', 1);
            SetCookie('PFSearch', '', 1);
        //}
    }

    var aFunction = function () {
        
        // reset highlighted row
        $(e).closest('tr').css('background-color', '');

        // get selected IDs
        var SelectedIDs = '';
        var SelectedTexts = '';
        $('#diaPicker' + f + ' .pickerselected').each(function () {
            SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
            SelectedTexts += $(this).text() + ', ';
        });

        if (SelectedIDs != "") {
            SelectedIDs = SelectedIDs.substr(0, SelectedIDs.length - 2);
            SelectedTexts = SelectedTexts.substr(0, SelectedTexts.length - 2);
        }

        if (SelectedTexts.length > 200) {
            SelectedTexts = SelectedTexts.substr(0, 190) + '... (' + $('#diaPicker' + f + ' .pickerselected').length + ')';
        }

        // update e
        $(e).attr('resultkey', SelectedIDs);
        $(e).text(SelectedTexts);

        var Template = $(e).attr('template');

        if (Template == 'picker' || Template == 'multiplepicker') {
            $(e).attr('result', SelectedTexts);

            if (SelectedTexts == "") {
                $(e).text('None');
            }
        }

        if (f.indexOf('Spread') == 0) {
            // update the data
            $td = $(e).closest('td');
            var x = $td.attr('data-x');
            var y = $td.attr('data-y');

            document.getElementById(f).jexcel.setValueFromCoords(x, y, $td.html(), true);
        }

        //$('#diaPicker' + f).dialog('destroy').remove();
        
        // focus on next fields
        if (f.indexOf('Product_Designer_') == -1) {

            //var nr = $(e).closest('tr').next('tr').find('.hgResult');
            var nr = $(e).closest('tr').nextAll('tr:visible:first').find('.hgResult');

            if (f.indexOf('Receipts') > -1 && nr.attr('id') != 'pickCommodityID') {
                nr.focus();
                $('#diaPicker' + f).dialog('destroy').remove();
                return;
            }

            if(nr)

            if (nr.find('input').length == 1) {
                nr.find('input').caretToEnd();
            }
            else if (nr.is('a')) {
                //nr.focus();
                //setTimeout(function () { nr.click(); }, 500);
                setTimeout(function () {
                    nr.focus();

                    if (nr.text() == 'None') {
                        nr.click();
                    }
                }, 500);
            }
            else {
                nr.focus();
            }
        }

        
        setTimeout(function () {
            PickerSavePost(e, f);
        },
            1000
        );
        

        $('#diaPicker' + f).dialog('destroy').remove();
        return true;
    };

    var w = RelativePixels('w', .9);
    var h = RelativePixels('h', .9);
    var my = null;
    var at = null;

    /*
    // existing picker action

    if ($('#diaPicker' + LastPopPickerf).length == 1) {

        var action = $('#diaPicker' + LastPopPickerf + ' form').attr('action');
        w = ParseQueryString('w', action);
        h = ParseQueryString('h', action);
    }
    

    var pdw = GetCookie('PickerDetailWidth') + '|' + GetCookie('PickerDetailWidthDetail');

    var find = e.id.replace(/pick/i, '');

    var ww = GetPairValue(pdw, find, 0);

    if (ww != 0) {
        w = ww;
        my = 'right';
        at = 'right-50';
    }
    */

    if (LastPopPickerw != '') {
        w = LastPopPickerw;
        my = 'right';
        at = 'right-50';
    }

    // highlight field row
    $(e).closest('tr').addClass('ffrhighlight');

    var DialogPicker;
    PopDialog(DialogPicker, 'Picker' + f, my, at, null, w, h, Title, '&eid=' + e.id + "&pq=" + q + "&info=" + escape(info) + "&ty=" + Type + '&fd=' + escape(FormData), "picker.aspx", 'Select', aFunction);

}

function PickerAdd(e, inf) {

    var infs = inf.split(',');

    var Context = infs[0].trim();
    var Source = infs[1].trim();
    var KeyField = infs[2].trim();
    var ForeignKey = "";
    var fkv = "";

    if (infs.length > 3) {
        for (var i = 3; i < infs.length; i++) {
            ForeignKey = infs[i].trim();
            var ForeignFieldValue = $('#pick' + ForeignKey).attr('resultkey');
            if (ForeignFieldValue == "") {
                ForeignFieldValue = $('#pick' + ForeignKey).attr('oresultkey');
            }

            fkv += ForeignKey + '|' + ForeignFieldValue + '|';
        }


        if (fkv != "") {
            fkv = fkv.substr(0, fkv.length - 1);
        }
    }

    //alert(Info);

    var f = function () {

        // save data
        //var valid = SaveGrid(Context + 'Editor', 'PickerUpdate|' + Context);
        SaveGrid(Context + 'Editor', function (r) {

            WaitUntilGridSaves(Context + 'Editor', function () {

                // get the new ID
                var kfv = r.split('|')[1];

                // add new item to picker choices
                var Type = GetCookie('PickerType');
                if (Type == 'picker') {
                    SetCookie('PickerChoice', kfv);
                    SetCookie('PickerChoiceAdd', kfv);
                }
                else // multiple
                {
                    var PickerChoices = GetCookie('PickerChoice');

                    if (PickerChoices == '') {
                        PickerChoices = kfv;
                    }
                    else {
                        PickerChoices += ', ' + kfv;
                    }

                    SetCookie('PickerChoice', PickerChoices);
                }

                // close dialog
                $('#dia' + Context).dialog('destroy').remove();

                // refresh the picker
                //PopPicker(document.getElementById('Picker' + Context));
                NoExec = true;
                PopPicker();
                //Picker = $('#diaPicker' + LastPopPickerf);
                //Picker.load(Picker.attr('qs'));

                return;
            });
        });
        //return valid;
    };

    FieldsEditor(e, Context, Source, KeyField, -1, fkv, f);
}

function PickerKeyPress(e, ev) {

    if ($(e).hasClass('disabled')) return;

    var code = ev.keyCode || ev.which;

    ev.stopPropagation();
    ev.preventDefault();

    if (code == 13 || code == 32) {        
        PopPicker(e);
    }   
}

function PickerFocus(e) {
    //alert(1);
}

function PickerChoicePost(e, type) {

    var t = $(e).closest('table');

    if ((t.attr('id') == 'tabPickerBill' || t.attr('id') == 'tabPickerBrokerBill' || t.attr('id') == 'tabPickerBill_New' || t.attr('id') == 'tabPickerBrokerBill_New') && type == 'multiplepicker') {

        /*
        var s = t.find('tbody .pickerselected');

        if (s.length > 0) {
            var c = s.first().next('td').text();

            if (c != "") {
                t.find('tbody:last tr td:nth-child(2)').filter(function () { return $(this).text() != c; }).closest('tr').css('color', 'lightgray').css('pointer-events', 'none');
                //t.find('tbody:last tr td:nth-child(2)').filter(function () { return $(this).text() != c; }).closest('tr').prop('disabled',true);
            }
        }
        else {
            t.find('tbody:last tr').css('color', 'black').css('pointer-events', '');
        }
        */
    }
}

function PickerSavePost(e, f) {
    if (f == 'Order_Entry') {
        // check if LEED selected in Agreement or any other field
        var t = $(e).closest('.vg');
        if (t.find('.vgField:contains("TX LEED")').length > 0) {
            t.find('.vgLabel:contains("LEED")').closest('tr').show();
        }
        else {
            t.find('.vgLabel:contains("LEED")').closest('tr').hide();
        }
    }

    //if (f == 'Bill' || f == 'Bill_New' || f == 'BrokerBill' || f == 'BrokerBill_New' || f == 'VendorBills') {

    // handle document location for all forms
    var $c = $(e);
        

    //if ($bl.val() == '' && $c.attr('resultkey') != '') {
    if ($c.attr('resultkey') != '' && ($c.attr('id') == 'pickConfirmID' || $c.attr('id') == 'pickPositionIDs')) {

        // Bill lOcation
        var $bl = $('input[fn="kxGB59jPLKr1ax2MomXG9A=="]');

        // Document location
        if ($bl.length == 0) {
            $bl = $('input[fn="C94C+Lb+DUtQTgo9VETAzxfBts+jEsRQ"]');
        }

        var cid = '';
        var pid = '';

        if ($c.attr('id') == 'pickConfirmID') {
            cid = $c.attr('resultkey');
        } else if ($c.attr('id') == 'pickPositionIDs') {
            pid = $c.attr('resultkey');
        }


        // get location from confirm
        var jqxhr = $.getJSON("Process_Request.aspx", {
            action: "ConfirmDocumentLocation",
            cid: cid,
            pid: pid
        })
            .done(function (data) {
                if (data.messagetype == 'success') {
                    $bl.val(decodeURIComponent(unescape(data.message)));
                }
                else {
                    MessageBox('Error', decodeURIComponent(unescape(data.message)), 'danger');
                }

                //alert("done");
            }).fail(function (data) {
                alert("Confirm Document Location failed");
            });
    }
        

    //}
}

function PickerSelectionEdit(e, ev) {
       
    ev.stopPropagation();
    ev.preventDefault();

    /*
    var action = $(e).closest('form').attr('action');
    var info = unescape(ParseQueryString('info', action));
    var eid = unescape(ParseQueryString('eid', action));
    */

    //var info = unescape($('.ffrhighlight a').last().attr('info'));
    //var eid = unescape($('.ffrhighlight a').last().attr('id'));

    /*
    var qs = unescape($('#dia' + spreadid).attr('qs'));
    */

    var qs = unescape($(e).closest('[qs]').attr('qs'));

    var info = ParseQueryString('info', qs);
    var eid = ParseQueryString('eid', qs);


    var infs = info.split(',');
    var key = $(e).closest('tr').attr('kfv');

    var Context = infs[0].trim();
    var Source = infs[1].trim();
    var KeyField = infs[2].trim();

    var wc = GetCookie('PickerDetailWidth');

    var f = function () {

        // save data
        var valid = SaveGrid(Context + 'Editor', function () {
            // reload picker         
            SetCookie('PickerDetailWidth', wc,1);
            PopPicker(document.getElementById(eid));
            $('#dia' + Context).dialog('destroy').remove();
        });
        //return valid;
    };

    FieldsEditor(e, Context, Source, KeyField, key, null, f, 'left','left+60', window);
}

function ResearchPicker(ev, e) {
    ev.stopPropagation();
    ev.preventDefault();

    // search text
    var s = $(e).closest('td').text().trim();

    var searchbox = $('#txtPickerSearch');

    searchbox.val(s);

    SearchPicker(searchbox);
}

//#endregion

//#region detail
function PopDetail(e, cw) {
    
    if ($(e).hasClass('disabled')) return;

    if (e != null) {
        LastPopDetaile = e;
        f = e.getAttribute('f');
        LastPopDetailf = f;
    }

    if (e == null) {
        e = LastPopDetaile;
        f = LastPopDetailf
    }


    var q = e.getAttribute('q');
    var info = e.getAttribute('info');
    var Title = $(e).closest('tr').find('td:first').text() + ' - ' + $(e).text();
    var Type = e.getAttribute('template');

    //validate foreign keys specified
    var fks = info.split(',');

    if (fks.length > 3) {
        for (var i = 3; i < fks.length; i++) {
            if ($('#pick' + fks[i]).attr('resultkey') == '' && $('#pick' + fks[i]).attr('result') == '') {
                var Label = $('#pick' + fks[i]).closest('td').prev().text();
                MessageBox(Label + ' Selection Required', 'Please select a value for ' + Label + ' first.', 'warning');
                return;
            }
        }
    }

    // add form key field
    var kt = $(e).closest('.vg');
    var kf = kt.attr('kf');
    var kfv = kt.attr('kfv');

    //var FormData = 'Designer_ID|1000|1000|';
    var FormData = kf + '|' + kfv + '|' + kfv + '|';

    $('.fieldsform').find('.hgResult').each(function () {
        var f = $(this).attr('fn');

        var v = $(this).attr('resultkey');
        if (v == '') {
            $(this).attr('oresultkey');
        }

        if (v == '') {
            $(this).attr('result');
        }

        if (v == '') {
            $(this).attr('oresult');
        }

        var l = $(this).text().replace(/\|/g, ',');

        if (l.length > 50) {
            l = l.substring(0, 50) + '...';
        }

        if (v != '') {
            FormData += f + '|' + escape(v) + '|' + escape(l) + '|';
        }

    });

    if (FormData != '') {
        FormData = FormData.substr(0, FormData.length - 1);
    }

    // initialize
    if ($('#diaDetail' + f).length == 0) {
        var Choices = $(e).attr('resultkey');
        if (Choices == "") {
            $(e).attr('oresultkey');
        }

        SetCookie('DetailChoice', Choices, 1);
        SetCookie('DetailSearch', '', -1);
        SetCookie('DetailType', Type, 1);
    }

    var aFunction = function () {

        f = f.replace('Detail', '');

        if (f == 'SalesForce') {

            ValidateGrid({
                gridid: 'tabDetail' + f,
                onvalid: function (change) {

                    //alert('valid');
                    SaveGrid('Detail' + f, 'UpdateDetail');

                    /*
                    WaitUntilGridSaves('Detail' + f, function () {
                        setTimeout(function () { DetailUpdate(); }, 3000);
                    });
                    */
                    var g = $('#tabDetail' + f);

                    WaitUntil(function () {
                        return g.attr('psd') == 1;
                    }, function () {
                        g.attr('psd', '');
                        setTimeout(function () { DetailUpdate(); }, 500);
                    });
                },
                oninvalid: function () { return false; }
            });
        }
        else {
            SaveGrid('Detail' + f, 'UpdateDetail');

            WaitUntilGridSaves('Detail' + f, function () {
                DetailUpdate();
            });
        }

        return;


        
       /*
        $.when(SaveGrid('Detail' + LastPopDetailf, 'UpdateDetail')).then(function (valid) {
            //alert(valid);
            alert(valid);
            
            }).fail(function () {
                alert(2);
            });
         */ 
        

        
        //var valid = SaveGrid('Detail' + LastPopDetailf, 'UpdateDetail');
        var valid = SaveGrid('Detail' + LastPopDetailf, 'UpdateDetail');

        if (!valid) {
            return valid;
        }

        //return true;
    };

    var w = RelativePixels('w', .9);
    var h = RelativePixels('h', .7); //RelativePixels('h', .7, 800)
    var my = null;
    var at = null;

    var pdw = GetCookie('PickerDetailWidth');

    var find = e.id.replace(/pick/i, '');

    var ww = GetPairValue(pdw, find, 0);

    if (ww != 0) {
        w = ww;
        my = 'right';
        at = 'right-50';
    }

    if (cw == null) {
        cw = '';
    }

    // highlight field row
    //$(e).closest('tr').removeClass('ffrhighlight');
    $(e).closest('tr').addClass('ffrhighlight');


    var DialogDetail;
    PopDialog(DialogDetail, 'Detail' + f, my, at, null, w, h, Title, '&eid=' + e.id + "&pq=" + q + "&info=" + info + "&ty=" + Type + '&fd=' + escape(FormData) + '&cw=' + cw, "detail.aspx", 'Save', aFunction);

    var buttons = $('#' + 'diaDetail' + f).parent().find('.ui-dialog-buttonset');

    buttons.before($('<button type="button" priority=secondary" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="DetailClone(this);" ><span class="ui-button-text">Clone Current</span></button>'));

    WaitUntil(function () {
        return $('#' + 'tabDetail' + f).length == 1;
    }, function () {
            $('#' + 'tabDetail' + f + ' th[fr="1"]').attr('fr', '_1');
    });
}

function DetailKeyPress(e, ev) {

    if ($(e).hasClass('disabled')) return;

    var code = ev.keyCode || ev.which;

    event.preventDefault();

    if (code == 13 || code == 32) {
        PopDetail(e);
    }
}

function DetailFocus(e) {
    //alert(1);
}

function DetailUpdate() {

    var e = LastPopDetaile;

    // get selected IDs
    var SelectedIDs = '';
    var SelectedTexts = 'None';
    /*
    $('#diaDetail' + LastPopDetailf + ' tbody:last tr td:first-child').not(':empty').each(function () {
 
        SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
        //SelectedTexts += $(this).closest('tr').attr('kfv') + ', ';
            
        //var st = $(this).find('select:not([result=""])').attr('result');
        var st = "";
        if ($(this).find('select').length > 0) {
 
            st = $(this).find('select').attr('result');
        }
        else if ($(this).find('input').length > 0) {
            
            st = $(this).find('input').attr('result');
        }
        else
        {
            st = $(this).text();
        }
 
        var st2 = "";
 
        if ($(this).next().find('select').length > 0) {
 
            st2 = $(this).next().find('select').attr('result');
        }
        else if ($(this).next().find('input').length > 0) {
 
            st2 = $(this).next().find('input').attr('result');
        }
        else {
            st2 = $(this).next().text();
        }
 
        if (st != 'None') {
            SelectedTexts += st + '-' + st2 + ', ';
        }
            
 
    });
    */

    // already saved
    $('#diaDetail' + LastPopDetailf + ' tbody:last tr[class=""], tbody:last tr:not([class])').each(function () {
        SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
    });

    // under edit with results
    //$('#diaDetail' + LastPopDetailf + ' tbody:last .RowEdit').has('.hgResult:not([result=""]) , .hgResult:not([resultkey="0"])').each(function () {
    $('#diaDetail' + LastPopDetailf + ' tbody:last .RowEdit').each(function () {
        //if (IsDirty($(this).find('.hgResult'))) {
        if ($(this).find('.hgResult:not([result=""]).hgResult:not([resultkey="0"])').length > 0) {
            SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
        }
    });

    // edit but no focus
    $('#diaDetail' + LastPopDetailf + ' tbody:last .hgNewRecord').not('.RowEdit').has('td:not(:empty)').each(function () {        
        SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
    });

    if (SelectedIDs != "") {
        SelectedIDs = SelectedIDs.substr(0, SelectedIDs.length - 2);

        /*
        //SelectedTexts = SelectedTexts.substr(0, SelectedTexts.length - 2);
        var ItemCount = SelectedIDs.split(',').length;
        if (ItemCount == 1) {
            SelectedTexts = SelectedIDs.split(',').length + ' Item';
        }
        else {
            SelectedTexts = SelectedIDs.split(',').length + ' Items';
        }
        */

        // determine picker element
        var PickerElement = e;

        var PickerCurrentIDs = SelectedIDs;
        var PickerForm = $(PickerElement).attr('f');
        var PickerField = $(PickerElement).attr('fn');

        var FieldForm = $(PickerElement).closest('.vg, .hg');

        var kf = FieldForm.attr('kf');
        var kfv = FieldForm.attr('kfv');
        var tb = FieldForm.attr('tb');

        var jqxhr = $.getJSON("Process_Request.aspx", {
            action: "PickerLink",
            cids: PickerCurrentIDs,
            nid: '',
            form: PickerForm,
            field: PickerField,
            kf: kf,
            kfv: kfv,
            table: tb
        })
            .done(function (data) {

                $(PickerElement).attr('resultkey', data.LinkIDs);
                $(PickerElement).text(data.LinkText);

                $('#diaDetail' + LastPopDetailf).dialog('destroy').remove();

                // focus on next fields
                if (f.indexOf('Product_Designer_') == -1) {

                    //var nr = $(e).closest('tr').next('tr').find('.hgResult');
                    var nr = $(e).closest('tr').nextAll('tr:visible:first').find('.hgResult');

                    if (nr.find('input').length == 1) {
                        nr.find('input').caretToEnd();
                    }
                    else if (nr.is('a')) {
                        //nr.focus();
                        //setTimeout(function () { nr.click(); }, 500);
                        setTimeout(function () {
                            nr.focus();

                            if (nr.text() == 'None') {
                                nr.click();
                            }
                        },
                            500);
                    }
                    else {
                        nr.focus();
                    }
                }

                //alert("done");
            }).fail(function (data) {
                alert("PickerLink failed.");
            });
    }

    /*
    // update e
    $(e).attr('resultkey', SelectedIDs);
    $(e).text(SelectedTexts);

    $('#diaDetail' + LastPopDetailf).dialog('destroy').remove();


    // focus on next fields
    if (f.indexOf('Product_Designer_') == -1) {

        //var nr = $(e).closest('tr').next('tr').find('.hgResult');
        var nr = $(e).closest('tr').nextAll('tr:visible:first').find('.hgResult');

        if (nr.find('input').length == 1) {
            nr.find('input').caretToEnd();
        }
        else if (nr.is('a')) {
            //nr.focus();
            //setTimeout(function () { nr.click(); }, 500);
            setTimeout(function () {
                nr.focus();

                if (nr.text() == 'None') {
                    nr.click();
                }
            },
                500);
        }
        else {
            nr.focus();
        }
    }
    */
}

//#endregion



//#region Form Fields
function TestCurrentForm(e) {

    var Form = $('#selFilter option:selected').text();

    $('#diaetabBody').parent().find('.ui-dialog-buttonset button:contains("Save")').click();

    var valid = $('#diaetabBody').attr('valid');

    if (valid == 'true') {
        $('#diaetabBody').attr('valid', '');
        SetCookie('Topic_' + Form, 'All', 1);
        var f = function () { return true; };
        FieldsEditor(e, Form, 'FormFieldsTest', 'FormFieldsTestID', '-1', '', f);
    }
}

function FormFieldTest() {

    SetCookie('PickerDefaults', '', -1);

    var Form = $('#selFilter option:selected').text();

    FieldsEditor(this, Form, 'FormFieldsTest', 'FormFieldsTestID', '-1', '');    
}

function FormFieldParameters() {

    var FormID = $('#selFilter option:selected').val();
    var Form = $('#selFilter option:selected').text();

    PopDialogV(null, 'Forms', null, null, null, RelativePixels('w', .8, 900), RelativePixels('h', .7, 680), 'Form Parameters', '&fid=' + FormID + '&form=' + escape(Form), null, 'Save');
}

function FormFieldTopics() {

    var FormID = $('#selFilter option:selected').val();
    var Form = $('#selFilter option:selected').text();

    var aFunction = function () {
        SaveGrid("Grid");
    };
    PopDialog(null, 'FormTopics', null, null, null, 1000, 500, 'Form Topics', '&fid=' + FormID + '&form=' + escape(Form), null, 'Save', aFunction);
}

function FormFieldsCascade(e) {
    // selected item
    var result = e.options[e.selectedIndex];
    var ff = $(e).closest('.fieldsform');

    $.each(result.attributes, function () {

        if (this.name.indexOf('_value') > -1) {

            //target name
            var tname = 'sel' + this.name.replace(/\_value/g, '');

            //target filter value
            var tvalue = result.getAttribute(this.name);

            // target element
            sel = ff.find('select').filter(function () {
                   return $(this).attr('id').toLowerCase().indexOf(tname)> -1;
            });

            //target reset
            sel.html($(sel.closest('tr').find('.vgLabel').attr('ftp')).html());

            // remove non conforming
            sel.find('option[value!="' + tvalue + '"][value!=""][value]').remove();

            // default if single
            if (sel.find('option[value]').length == 1) {
                sel.val(tvalue);
            }
        }
    });

}

/*
function FormFieldSpreadColumnWidths() {

    var FormID = $('#selFilter option:selected').val();
    var Form = $('#selFilter option:selected').text();

    var DialogSpread;
    PopDialog(DialogSpread, 'SpreadForms', null, null, null, RelativePixels('w', .8, 900), RelativePixels('h', .7, 680), 'Form Column Widths', '&eid=' + FormID + "&pq=" + q + "&info=" + info + "&ty=" + Type + '&fd=' + escape(FormData) + '&cw=' + cw, "spread.aspx", 'Save', aFunction);
}
*/

//#endregion

function CopySelectedID(e) {
    if (e.id == 'selContractProductID') {
        $('#selProductID').val($(e).val());
    }
}

function CopyInputValue(t,e) {
    if (t == 'tabDetailOrder_Entry') {
        $('.hgResult[tdo="13"] input').val($(e).val());
    }
}

function DetailClone(e) {

    // source
    var source = $(e).closest('.ui-dialog').find('.hg .RowEdit:first');

    // target
    var target = $(e).closest('.ui-dialog').find('.hg').find('.hgNewRecord').not('.RowEdit').first();

    
    //edit off
    var valid = hgEditOff(source);

    if (valid) {
        // get current row HTML
        target.html(source.html());
        
        hgEdit(target);

        //target.removeClass('hgNewRecord');

        target.find('[oresult]').attr('oresult','');
        target.find('[oresultkey]').attr('oresultkey', '');
        target.find('[result]').attr('result', '');
        target.find('[resultkey]').attr('resultkey', '');
    }
}

(function ($) {
    // Behind the scenes method deals with browser
    // idiosyncrasies and such
    $.caretTo = function (el, index) {
        if (el.createTextRange) {
            var range = el.createTextRange();
            range.move("character", index);
            range.select();
        } else if (el.selectionStart != null) {
            el.focus();
            el.setSelectionRange(index, index);
        }
    };

    // The following methods are queued under fx for more
    // flexibility when combining with $.fn.delay() and
    // jQuery effects.

    // Set caret to a particular index
    $.fn.caretTo = function (index, offset) {
        return this.queue(function (next) {
            if (isNaN(index)) {
                var i = $(this).val().indexOf(index);

                if (offset === true) {
                    i += index.length;
                } else if (offset) {
                    i += offset;
                }

                $.caretTo(this, i);
            } else {
                $.caretTo(this, index);
            }

            next();
        });
    };

    // Set caret to beginning of an element
    $.fn.caretToStart = function () {
        return this.caretTo(0);
    };

    // Set caret to the end of an element
    $.fn.caretToEnd = function () {
        return this.queue(function (next) {
            $.caretTo(this, $(this).val().length);
            next();
        });
    };
}(jQuery));



//#region left menu
function SetLeftMenuValue(e, id) {

    var v = $(e).val();

    SetCookie(id, v, 1);

    ReloadPage();
}
//#endregion



//#region docs
function DocsDragEnter(e) {
    e.stopPropagation();
    e.preventDefault();
}

function DocsDragOver(e) {
    e.stopPropagation();
    e.preventDefault();
    $('#divDocs').css('background-color', 'lightblue');
}

function DocsDragLeave(e) {
    e.stopPropagation();
    e.preventDefault();
    $('#divDocs').css('background-color', 'white');
}

function DocsDrop(e) {
    e.stopPropagation();
    e.preventDefault();

    $('#divDocs').css('background-color', 'white');

    var selectedFiles = e.dataTransfer.files;
    //alert(selectedFiles.length);

    //WaitBox('Uploading', 'Uploading ' + selectedFiles.length + ' file(s)', 'info', 400);
    gridBox({ boxType: 'wait', type: 'info', body: 'Uploading ' + selectedFiles.length + ' file(s)', title: 'Uploading', width: 400 });
    
    var $ifrDocs = $("#ifrDocs");
    var loc;

    if ($ifrDocs.length == 0) {
        $ifrDocs = parent.$("#ifrDocs");
        loc = parent.$("#ifrDocs").contents()[0].location;
    }
    else {
        loc = $("#ifrDocs").contents()[0].location;
    }
    

    var data = new FormData($ifrDocs.contents().find('form')[0]);

    for (var i = 0; i < selectedFiles.length; i++) {
        data.append(selectedFiles[i].name, selectedFiles[i]);
    }
    
    $.ajax({
        type: "POST",
        url: loc.href,
        contentType: false,
        processData: false,
        data: data,
        success: function (result) {
            gridBox({closeBox: true});
            loc.reload(true);
        },
        error: function () {
            alert("There was error uploading files!");
        }
    });
    
    //$("#ifrDocs").contents().find('form').submit();
    //$('#ifrDocs').contents().find('#butDocs').click();
    
}

//#endregion

//#region invoices

function EditInvoiceOrders(e) {
    var iid = $(e).closest('tr').attr('kfv');
    var cid = $(e).closest('tr').find('span[cid]').attr('cid');
    var oq = $(e).closest('tr').find('#spnOQ').html();
    //alert(iid);
    //alert(cid);

    var aFunction = function () {
        return SaveGrid('Grid', 'ReloadPage');
    }

    var ioDialog;
    PopDialog(ioDialog, 'InvoiceOrders', null, null, null, RelativePixels('w', .9, 1400), RelativePixels('h', .7, 700), 'Invoice Orders', '&iid=' + iid + '&cid=' + cid + '&oq=' + oq, null, 'Save', aFunction);
}

function SetInvoiceOrdersTotalQuantity(t){
    // total
    var tq = 0;

    $(t).find('tbody tr').each(function () {
        if ($(this).find('td:nth-child(4) .hgResult').length > 0) {
            tq += $(this).find('input').val() * 1.0;
        } else {
            var v = $(this).find('td:nth-child(4)').text();
            if (v != '') {
                tq += v * 1.0;
            }

        }
    });

    var oq = $('#spQ').attr('oq');

    $('#spQ').html(tq + '/' + oq);

}

function MultipleInvoices(uid) {

    var aFunction = function () {

        var cid = $('#pickConfirmID').attr('resultkey');

        if (cid == '') {
            MessageBox('Invalid Confirm', 'No Confirm was selected.<br /><br />A confirm is required.<br /><br />Please select a confirm.', 'danger');
            return;
        }

        $('#tabGrid').attr('as', 'User_ID|' + uid + '|ConfirmID|' + cid);
        /*
        $('#tabGrid tbody tr').each(function () {
            if ($(this).find('td:nth-child(1) input').length > 0 && $(this).find('td:nth-child(1) input').val() != '') {
                $(this).find('td:nth-child(7) input').val(cid);
                $(this).find('td:nth-child(7) input').attr('result', cid).attr('oresult','');
            }
            else if ($(this).find('td:nth-child(1)').html() != ''){
                $(this).find('td:nth-child(7)').html(cid);
            }
        });
        */
        return SaveGrid('Grid');
    }

    var miDialog;
    PopDialog(miDialog, 'MultipleInvoices', null, null, null, RelativePixels('w', .9, 1400), RelativePixels('h', .7, 700), 'Multiple Invoices', null, null, 'Create', aFunction);
}

function DeleteOI(e) {

    var $r = $(e).closest('tr');
    var kfv = $r.attr('kfv');
    var $tb = $(e).closest('table');

    var CFunction = function () {

        // zero quantity on form
        var r = $r.find('.hgResult');

        r.val('');
        r.attr('oresult', '');
        r.attr('result', '');
        r.attr('oresultkey', '');
        r.attr('resultkey', '');

        // calendars
        r.find('input').val('');

        SetInvoiceOrdersTotalQuantity('#tabGrid');

        // delete from table
        var jqxhr = $.getJSON("Process_Request.aspx", {
            action: "DeleteOI",
            kfv: kfv
        })
            .done(function (data) {
                var r = data;
                //MessageBox("DeleteOI", r.message, r.messagetype);

                //alert("done");
            }).fail(function (data) {
                alert("DeleteOI failed.");
            });

    }

    //var c = "<data tb='" + $tb.attr('tb') + "' kf='" + $tb.attr('kf') + "' kfv='" + kfv + "' as='" + $tb.attr('kf') + "' de='1' ></data>";

    //var ModalID = $(e).closest('.ui-dialog').attr('aria-describedby');    

    hgConfirm("Are you sure you want to delete this record?<br /><br />This action cannot be reversed.", CFunction, "Confirm Delete", 400, 240);

}

//#endregion

function hgRowEdit(t, r) {
    if (t.id == 'tabGrid') {

        r.find('.hgResult').keydown(function (event) {
            var keyCode = (event.keyCode ? event.keyCode : event.which);
            //event.stopPropagation();

            if (keyCode == 40 && !r.is(':last-child')) {
                r.next('tr').click();
            }
            else if (keyCode == 38 && !r.is(':first-child')) {
                r.prev('tr').click();
            }
            else if (keyCode == 13 && !r.is(':last-child')) {
                r.next('tr').click();
            }
        });

        r.find('.datepicker,.hgResult').first().focus();
                
        var $input = r.find('.datepicker,.hgResult').first();
        var inputLength = $input.length;
        if (inputLength > 0) {
            try {
                $input[0].focus();
                $input[0].setSelectionRange(inputLength, inputLength);
            }
            catch (ex) {
                var a = 1;
            }
        }

        if ($('#diaInvoiceOrders').length > 0) {

            var a = r.find('td:nth-child(3)').text();

            if (Number(a) <= 0) {
                r.find('input, textarea').prop('disabled', true);
                return;
            }

            var q = r.find('input[tdo="3"]');
            var i = r.find('input[tdo="9"]');

            q.on('keyup focusout', function () {

                var a = q.closest('tr').find('td:nth-child(3)').text().replace(',','');

                if (q.val() * 1.0 > a * 1.0) {
                    q.val(a);
                    MessageBox('Invalid Quantity', 'Your requested quantity exceeds what is available.<br /><br />Your quantity has been changed to the available quantities.', 'danger');
                    return false;
                }

                if (q.val() == '') {
                    q.val('0');
                    i.attr('oresult', '');
                }
                else {
                    i.attr('oresult', '');
                }

                SetInvoiceOrdersTotalQuantity(t);

            });
        }
    }

    if (t.id == 'tabGrid' && $('#diaMultipleInvoices').length > 0) {



        /*
        var cid = $('#pickConfirmID').attr('resultkey');

        var c = r.find('td:nth-child(7)');

        c.val(cid);
        c.attr('oresult', '');
        */
    }
}

function QuantityFill(e, ev) {

    ev.stopPropagation();

    $('#tabGrid').find('tbody tr').each(function () {
     
        var a = $(this).find('td:nth-child(3)').text().replace(',','');

        hgEdit(this);

        var e = $(this).find('td:nth-child(4) .hgResult');
        var q = e.attr('result');

        if ((q == '' || q == '0') && a * 1.0 > 0) {

            
            $(this).find('input[tdo="9"]').attr('oresult', '');
            e.val(a);
        }
    });

    hgEdit($('#tabGrid').find('tbody tr:first'));

    SetInvoiceOrdersTotalQuantity('#tabGrid');

}


//#region bills

function DeleteSupplyBill(e) {
    var $r = $(e).closest('tr');
    var kfv = $r.attr('kfv');

    var CFunction = function () {

        // delete from table
        var jqxhr = $.getJSON("Process_Request.aspx", {
            action: "DeleteSupplyBill",
            kfv: kfv
        })
            .done(function (data) {
                var r = data;

                if (r.message == '') {
                    ReloadPage();
                    return;
                }

                //alert("done");
            }).fail(function (data) {
                alert("DeleteSupplyBill failed.");
            });
    }

    hgConfirm("Are you sure you want to delete this record?<br /><br />This action cannot be reversed.", CFunction, "Confirm Delete", 400, 240);
}

//#endregion

//#region Products
function NewProduct(c) {
    var valid = SaveGrid(c + 'Editor', 'ResetProductsReload');
}

function DeleteProduct(cid, pid) {


    var CFunction = function () {

        // delete from table
        var jqxhr = $.getJSON("Process_Request.aspx", {
            action: "DeleteProduct",
            cid: cid,
            pid: pid
        })
            .done(function (data) {
                var r = data;

                if (r.message == '') {
                    ReloadPage();
                    return;
                }
                else {
                    MessageBox('Product Delete Error', r.message, 'danger');
                }

                //alert("done");
            }).fail(function (data) {
                alert("DeleteProduct failed.");
            });
    }

    hgConfirm("Are you sure you want to delete this product?<br /><br />This action cannot be reversed.", CFunction, "Confirm Delete", 400, 240);
}

function FieldsEditorPD(cid, pdid, as) {


    if (cid == 1) {
        var aFunction = function () {

            //var valid = SaveGrid('Product_Designer_RECEditor', function () { ResetProducts(); });
            var valid = SaveGrid('Product_Designer_RECEditor', function () { ReloadPage(); });
        }

        FieldsEditor(null, 'Product_Designer_REC', 'art_Product_Designer_Product', 'Product_Designer_ID', pdid, as, aFunction);
    }

    if (cid == 2) {
        var aFunction = function () {
            var valid = SaveGrid('Product_Designer_COEditor', function () { ResetProducts(); });
        }

        FieldsEditor(null, 'Product_Designer_CO', 'art_Product_Designer_Product', 'Product_Designer_ID', pdid, as, aFunction);
    }

    if (cid == 3) {
        var aFunction = function () {
            var valid = SaveGrid('Product_Designer_AllowanceEditor', function () { ResetProducts(); });
        }

        FieldsEditor(null, 'Product_Designer_Allowance', 'art_Product_Designer_Product', 'Product_Designer_ID', pdid, as, aFunction);
    }

    /*
    setTimeout(function () {
        //$('.vg').attr('kfv', '-1');
        $('.vg .hgResult').attr('oresult', '');
        $('.vg .hgResult').attr('oresultkey', '');
    },
        1000);
    */
} 


//#endregion

function GetPairValue(text, find, w) {
    var delimiter = '|';
    if (text.indexOf(delimiter) == -1) {
        delimiter = ',';
    }

    // parse
    var pairs = text.split(delimiter);

    for (var i = 0; i < pairs.length; i = i + 2) {
        if (pairs[i].toLowerCase() == find.toLowerCase()) {
            w = pairs[i + 1];
            break;
        }
    }

    return w ;
}

function AddSummaryField(e) {
    var t = $(e).find('option:selected').text();

    var sfe = $(e).closest('tr').find('.vgField textarea');

    sf = sfe.text();

    if (sf.length > 0) {
        sf += ',';
    }

    sfe.text(sf + t);


}

//#region search Fields
function SearchField(e, ev) {
    if (ev.keyCode != 13) {
        return;
    }

    var SF = '';

    var sep = '¶';
    var sep2 = '§';

    $(e).closest('tr').find('.SearchField').each(function () {
        if ($(this).val().trim() != '') {
            SF += $(this).attr('sf') + sep + escape($(this).val()) + sep2;
        }
    });

    if (SF != "") {
        SF = SF.substr(0, SF.length - 1);
    }
    
    SetCookie("SearchData", SF, 1);

    document.forms[0].txtSearch.value = SF;
    document.forms[0].submit();
}

//#endregion

function LZ(x) {
    return (x < 0 || x > 9 ? "" : "0") + x
}

function formatDate(date, format) {

    var MONTH_NAMES = new Array('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
    var DAY_NAMES = new Array('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
    format = format + "";
    var result = "";
    var i_format = 0;
    var c = "";
    var token = "";
    var y = date.getYear() + "";
    var M = date.getMonth() + 1;
    var d = date.getDate();
    var E = date.getDay();
    var H = date.getHours();
    var m = date.getMinutes();
    var s = date.getSeconds();
    var yyyy, yy, MMM, MM, dd, hh, h, mm, ss, ampm, HH, H, KK, K, kk, k;
    // Convert real date parts into formatted versions
    var value = new Object();
    if (y.length < 4) { y = "" + (y - 0 + 1900); }
    value["y"] = "" + y;
    value["yyyy"] = y;
    value["yy"] = y.substring(2, 4);
    value["M"] = M;
    value["MM"] = LZ(M);
    value["MMM"] = MONTH_NAMES[M - 1];
    value["NNN"] = MONTH_NAMES[M + 11];
    value["d"] = d;
    value["dd"] = LZ(d);
    value["E"] = DAY_NAMES[E + 7];
    value["EE"] = DAY_NAMES[E];
    value["H"] = H;
    value["HH"] = LZ(H);
    if (H == 0) { value["h"] = 12; }
    else if (H > 12) { value["h"] = H - 12; }
    else { value["h"] = H; }
    value["hh"] = LZ(value["h"]);
    if (H > 11) { value["K"] = H - 12; } else { value["K"] = H; }
    value["k"] = H + 1;
    value["KK"] = LZ(value["K"]);
    value["kk"] = LZ(value["k"]);
    if (H > 11) { value["a"] = "PM"; }
    else { value["a"] = "AM"; }
    value["m"] = m;
    value["mm"] = LZ(m);
    value["s"] = s;
    value["ss"] = LZ(s);
    while (i_format < format.length) {
        c = format.charAt(i_format);
        token = "";
        while ((format.charAt(i_format) == c) && (i_format < format.length)) {
            token += format.charAt(i_format++);
        }
        if (value[token] != null) { result = result + value[token]; }
        else { result = result + token; }
    }
    return result;
}

function DocumentLocation(p) {

    MessageBox('Path', p, 800);
    return;


    var share = '\\\\RDriveShare';

    p = p.replace('R:', share).replace('/\\/','\\\\');
    //alert(p);
    window.open(p, 'docloc');

    // Test local
    //window.open('file://\\\\wes2\\test','docloc');
}


function CopyToClipboard(text, ev) {

    //ev.preventDefault();

    var $temp = $("<input>");
    $("body").append($temp);
    $temp.val(text).select();
    document.execCommand("copy");
    $temp.remove();
}

function SetDataRowTitle(e) {    

    var kfv = $(e).attr('kfv');
    var t = $('#tabBody');
    
    var tb = t.attr('tb');
    var kf = t.attr('kf');

    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "GetChanges",
        tb: tb,
        kf: kf,
        kfv: kfv
    })
    .done(function (data) {
        //xxx++;
        $(e).attr('title', unescape(data.message)); // + ' ' + xxx);
        //$(e).click();
        //$(e).hover(function () { $(e).attr('title', unescape(data.message)); })
    });
}

function ReceiptDocDownload(e, rid) {

    location.href = 'download_receipt_excel.aspx?rid=' + rid;

    /*
    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "DownloadReceipt",
        rid: rid,
        responseType: 'arraybuffer'
    })
        .done(function (data) {
            var r = data;
            //MessageBox("Password Reset", r.message, r.messagetype);

            if (r.messagetype == "success") {
                //dialog.dialog("close");
                location.href = r.message;
            }
        })
        .fail(function (data) {
            alert("Download Receipt failed");
        });
        */
}

function ReceiptReport(e, rid) {

    MessageBox('Receipt Report', 'Later', 'info', 200);

}

function SendReceiptNotice(e, rid, Email) {

    var aFunction = function () {
        SendReceiptEmail(e, rid, Email);
    }

    var DialogN;

    PopDialog(DialogN, 'DialogNotice', null, null, null, RelativePixels('w', .9), RelativePixels('h', .5), 'Receipt Product Details', '&rid=' + rid + '&email=' + escape(Email), null, 'Send', aFunction);

    // email Note
    var buttons = $('#diaDialogNotice').parent().find('.ui-dialog-buttonset');

    //buttons.before($('<div ondragenter="DocsDragEnter(window.event);" ondragover="DocsDragOver(window.event);" ondrop="DocsDrop(window.event);" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" style="padding: 15px;" >Drag and Drop</div>'));
    buttons.before($('<div  style="display: inline; font-size: .9em;"><textarea placeholder=\"Add email note here\" id=\"txtNote\" rows=\"3\" style=\"width: 500px; border-radius: 6px; padding: 4px; \" ></textarea></div>'));
}

function SendReceiptEmail(e, rid, Email) {
    //var HTML = escape($('#divGrid').html()); //encodeURI($('#divGrid').html());
    //var HTML = $('#divGrid').html(); //encodeURI($('#divGrid').html());

    var note = $('#txtNote').val();

    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "SendReceiptEmail",
        rid: rid,
        note: escape(note)
    })
        .done(function (data) {
            var r = data;

            if (r.message == 'Sent') {
                MessageBox('Receipt Email', r.message, 'success', 200, function () { ReloadPage();});
                return;
            }
            else {
                MessageBox('Receipt Email', r.message, 'danger', 200);
                return;
            }

            //alert("done");
        }).fail(function (data) {
            alert("SendReceiptEmail failed.");
        });
}

function WaitUntil(eFunction, xFunction, ms) {

    var timer;

    var interval = ms;

    if (interval == null) {
        interval = 200;
    }

    timer = setInterval(function () {
        if (eFunction()) {
            clearTimeout(timer);
            xFunction();
        }
    }, interval);

}

function WaitUntilGridSaves(Context, xFunction) {
    var g = $('#dia' + Context).find('.hg, .vg');

    if (g.length == 0 || g.attr('id').indexOf('tabPicker') > -1) {
        xFunction();
        return;
    }

    WaitUntil(function () {
        return g.attr('ps') == '1';
    },
        function () {
            g.attr('ps') == '';
            xFunction();
        }
    );
}

function CloneButtonsInTitle(m) {

    var buttons = $('#' + m).parent().find('.ui-dialog-buttonset button');
    var topbuttons = buttons.clone().css('visibility', 'visible').css('margin-right', '6px').css('padding-left', '6px').css('padding-right', '6px').css('float','right').each(function () {
        $(this).attr('label', $(this).text());
        $(this).attr('title', $(this).text());
        $(this).text($(this).text().substr(0, 1));
    });

    topbuttons.on('click', function () {
        var Caption = $(this).attr('label');
        $('#' + m).parent().find('.ui-dialog-buttonset button:contains("' + Caption + '")').click();
    });

    for(var i = topbuttons.length - 1; i > -1; i = i - 1) {
        $('#' + m).parent().find('.ui-dialog-titlebar').append(topbuttons[i]);
    }
}

function FieldsEditorSF(e, Context, Source, KeyField, my, at, of, w, h) {
    FieldsEditor(e, Context, Source, KeyField, null, null, function () {
        SaveGrid(Context + 'Editor', function () {
            WaitUntilGridSaves(Context + 'Editor', function () {
                ReloadPage();
            });
        });
    },my, at, of, RelativePixels('w', .5, 750), h);
}

function TestAction(a) {
    WaitBox(a, 'Please wait', 'info');
    SetCookie('TestAction', a, 1);
    ReloadPage();

    /*
    document.forms[0].txtTestAction.value = a;
    document.forms[0].submit();
    */
}

function qstojson(qs) {

    qs = decodeURI(unescape(qs));

    if (qs.substring(0, 1) == '?') {
        qs = qs.substring(1);
    }

    var pairs = qs.split('&');

    var result = {};
    pairs.forEach(function (pair) {
        if (pair != '') {
            pair = pair.replace('=', '&').split('&');
            result[pair[0]] = decodeURIComponent(pair[1] || '');
        }
    });

    return JSON.parse(JSON.stringify(result));
}


function PopEditor(TableID) {

    var fr = $('#tab' + TableID + ' tbody:last tr:first');
    fr.click();
}

function Qualify(tid, n) {
    $('#txtTestID').val(tid);
    $('#txtScenarioName').val(n);
    $('form')[0].action = "qualify";
    $('form')[0].method = "post";
    $('form')[0].submit();
}

function GoTo(tid, n, e) {
    
    $('#txtTestID').val(tid);
    $('#txtScenarioName').val(n);
    $('#txtScenarioChoice').val(e.textContent);
    $('form')[0].action = "qualify";
    $('form')[0].method = "post";
    $('form')[0].submit();
}

function NewOrder() {


    /*
    $('form')[0].action = "home";
    $('form')[0].method = "post";
    $('form')[0].submit();
    */
   
}

function Register(e) {

    var valid = true;
    var f = $(e).closest('form');

    // reset background
    $(f).find('.form-control').each(function () {
        $(this).css('background-color', 'white');
    });

    // required fields
    $(f).find('.form-control').each(function () {

        //if ($(this).attr('placeholder') != 'Secondary Phone' && $(this).attr('placeholder') != 'Best Way to Contact' && $(this).attr('placeholder') != 'Middle Initial') {
        if ($(this).attr('id') != 'txtSecondaryPhone' && $(this).attr('id') != 'txtBest_Way_To_Contact' && $(this).attr('id') != 'txtMiddle_Name') {
            var value = $(this).val();
            if (value == null) {
                value = '';
            }
            value = value.trim();

            if ($(this).is('input:text, textarea, select') && value == '') {
                $(this).css('background-color', 'yellow');
                MessageBox('Required Field Empty', 'The ' + $(this).attr('placeholder') + ' field is required. Please make an entry.', 'danger');
                valid = false;
                return false;
            }
        }
    });

    if (!valid) return;

    // size
    $(f).find('.form-control').each(function () {

        if ($(this).is('input:text, textarea, select')) {
            var maxlength = 50;

            if (this.placeholder == 'Address') {
                maxlength = 200;
            }

            if ($(this).val().length > maxlength) {
                $(this).css('background-color', 'yellow').focus();
                MessageBox('Entry Too Long', 'The ' + this.placeholder + ' field is longer than the maximum allowed (' + maxlength + ' characters). Please edit and try again.', 'danger');
                valid = false;
                return false;
            }
        }
    });

    if (!valid) return;

    // password
    if ($(f).find('#txtPassword').val() != $(f).find('#txtPasswordConfirm').val()) {
        MessageBox("Password Mismatch", 'The password and confirm password do not match.<br><br>Please edit and try again.', 'danger');
        valid = false;
        return false;
    }

    if (!valid) return;

    // password length
    if ($(f).find('#txtPassword').val().length  < 8) {
        MessageBox("Password Too Short", 'The password is too short. It must be at least 8 characters long.', 'danger');
        valid = false;
        return false;
    }

    if (!valid) return;

    // email
    if ($(f).find('#txtEmail').val() != $(f).find('#txtEmailConfirm').val()) {
        MessageBox("Email Mismatch", 'The email and confirm email do not match.<br><br>Please edit and try again.', 'danger');
        valid = false;
        return false;
    }

    if (!valid) return;

    /*
    // race
    var Race = '';
    $(f).find('#divRace input:checkbox').each(function () {
        if (this.checked) {
            Race += this.value + ', ';
        }
    });

    if (Race != '') {
        Race = Race.substr(0, Race.length - 2);
    }

    if ($(f).find('#txtRaceOther').val() != '') {
        Race += ', ' + $(f).find('#txtRaceOther').val();
    }

    if (Race == '') {
        $('#divRace').css('background-color', 'yellow');
        MessageBox('Required Field Empty', 'The Race field is required. Please make an entry.', 'danger');
        valid = false;
        return false;
    }

    if (!valid) return;

    
    // ethnicity
    var Ethnicity = '';
    $(f).find('#divEthnicity input:checkbox').each(function () {
        if (this.checked) {
            Ethnicity += this.value+ ', ';
        }
    });

    if (Ethnicity != '') {
        Ethnicity = Ethnicity.substr(0, Ethnicity.length - 2);
    }

    if ($(f).find('#txtEthnicityeOther').val() != '') {
        Ethnicity += ', ' + $(f).find('#txtEthnicityOther').val();
    }

    if (Ethnicity == '') {
        $('#divEthnicity').css('background-color', 'yellow');
        MessageBox('Required Field Empty', 'The Ethnicity field is required. Please make an entry.', 'danger');
        valid = false;
        return false;
    }

    if (!valid) return;
    */

    // zip
    var zip = $(f).find('#txtZip').val();

    var isValidZip = /(^\d{5}$)|(^\d{5}-\d{4}$)/.test(zip);

    if (!isValidZip) {
        $('#txtZip').css('background-color', 'yellow');
        MessageBox("Invalid US Zip Code", 'The US zip code you entered is not valid.<br><br>Enter a valid 5 digit number, or a 5 digit-4 digit number (xxxxx-xxxx).<br><br>Please edit and try again.', 'danger');
        valid = false;
        return false;
    }

    if (!valid) return;

    // phone
    var phone = $(f).find('#txtPhone').val();

    var isValidPhone = /^\s*(?:\+?(\d{1,3}))?[-. (]*(\d{3})[-. )]*(\d{3})[-. ]*(\d{4})(?: *x(\d+))?\s*$/.test(phone);

    if (!isValidPhone) {
        $('#txtPhone').css('background-color', 'yellow');
        MessageBox("Invalid Phone number", 'The preferred phone number you entered is not valid.<br><br>Enter a valid area code and number.<br><br>Please edit and try again.', 'danger');
        valid = false;
        return false;
    }

    if (!valid) return;

    /*
    // secondary phone
    var phone = $(f).find('#txtSecondaryPhone').val();

    var isValidPhone = /^((\+[1-9]{1,4}[ \-]*)|(\([0-9]{2,3}\)[ \-]*)|([0-9]{2,4})[ \-]*)*?[0-9]{3,4}?[ \-]*[0-9]{3,4}?$/.test(phone);

    if (!isValidPhone) {
        $('#txtSecondaryPhone').css('background-color', 'yellow');
        MessageBox("Invalid Secondary Phone number", 'The secondary phone number you entered is not valid.<br><br>Enter a valid area code and number.<br><br>Please edit and try again.', 'danger');
        valid = false;
        return false;
    }

    if (!valid) return;
    */

    WaitBox('Registering', 'Please wait.', 'info');
    
    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "Register",
        firstname: $(f).find('#txtFirst_Name').val(),
        middlename: $(f).find('#txtMiddle_Name').val(),
        lastname: $(f).find('#txtLast_Name').val(),
        dob: $(f).find('#selDOBMonth').val() + '/' + $(f).find('#selDOBDay').val() + '/' + $(f).find('#selDOBYear').val(),
        gender: $(f).find('#selGender').val(),
        race: $(f).find('#selRace').val(),
        ethnicity: $(f).find('#selEthnicity').val(),
        address: $(f).find('#txtAddress').val(),
        city: $(f).find('#txtCity').val(),
        state: $(f).find('#selState').val(),
        zip: $(f).find('#txtZip').val(),
        county: $(f).find('#selCounty').val(),
        phone: $(f).find('#txtPhone').val(),
        secondaryphone: $(f).find('#txtSecondaryPhone').val(),
        email: $(f).find('#txtEmail').val(),
        bestwaytocontact: $(f).find('#txtBest_Way_To_Contact').val(),
        primaryphysician: $(f).find('#txtPrimary_Physician').val(),
        pregnant: $(f).find('#selPregnant').val(),
        communication: $(f).find('#selTestResultCommunication').val(),
        password: escape($(f).find('#txtPassword').val())
    })
        .done(function (data) {
            var r = data;
            if (r.messagetype == "success") {
                //SetCookie("UserAuthenticated", 1, 1);
                //location.href = "home";
                //location.reload(true);
                //alert('registered');
                if (r.message == 'cart') {
                    location.href = 'cart.aspx';
                    return;
                }
                else {
                    location.href = 'orders.aspx';
                    return;
                }
                //location.href = 'setup.aspx';
            }
            else {
                //$(document.body).css({ 'cursor': 'default' });
                WaitBoxClose();
                MessageBox("Register", r.message, r.messagetype);
            }
            //alert("done");
        }).fail(function (data) {
            //$(document.body).css({ 'cursor': 'default' });
            WaitBoxClose();
            alert("Request failed");
        });
}

function PayPal(e) {

    var c = '{ "cmd", "_s-xclick" }, { "currency_code", "USD" }, {"encrypted" , "-----BEGIN PKCS7-----MIIHwQYJKoZIhvcNAQcEoIIHsjCCB64CAQExggEwMIIBLAIBADCBlDCBjjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQYXlQYWwgSW5jLjETMBEGA1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9hcGkxHDAaBgkqhkiG9w0BCQEWDXJlQHBheXBhbC5jb20CAQAwDQYJKoZIhvcNAQEBBQAEgYAY4/heqX/Nr2GwU95ctqUxaWHHGNpZ/Re2QXYBqq+MWVFBwPw3nQvUyJnvrcp4Gz7AIG+9kriKjCoO7hEXLolDIhcBxB5fHC8X6rbO0ZtrKncBLa7LO93MDKeMVEGk4ECXanvnI581QE8pURX9HYfFxpoKtsdx76MDwge4+IA9ZTELMAkGBSsOAwIaBQAwggE9BgkqhkiG9w0BBwEwFAYIKoZIhvcNAwcECGSeHU5LKVwxgIIBGIcyshO/R7SMfMku31+8Ehz1syvUmK7yUTzhbDL7tsR1mYb1OxAQziRJekAmt5hjHEBPu44CDwqZVJLw8eGwjYu0CFaQ0hp7TrIgnWnHEkB514O0mFmQsh1WbdLpjNnHr+WxsHjlEXEN7dRZt3PsxUVJgmz4jC++4WCPdo0UtRlRiMIh5R0dPC+++lTCKrbrCuu78PzUyFZdAM+nT0AyxZHl0xOr4PD09epGnD5IoXprW4pfqKNWUDq2WrlQqdvTVJeius7kOmy1Oh5Mrj80VXNEYyyy6efpy4Fno61Ul0u4fBRDBuahTrfIQdsT30KbFVqGwHzv9skXHhXwBkD+I6BPwj+oPtGmi4aN90nfAO3RGBZwQzscuXCgggOHMIIDgzCCAuygAwIBAgIBADANBgkqhkiG9w0BAQUFADCBjjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQYXlQYWwgSW5jLjETMBEGA1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9hcGkxHDAaBgkqhkiG9w0BCQEWDXJlQHBheXBhbC5jb20wHhcNMDQwMjEzMTAxMzE1WhcNMzUwMjEzMTAxMzE1WjCBjjELMAkGA1UEBhMCVVMxCzAJBgNVBAgTAkNBMRYwFAYDVQQHEw1Nb3VudGFpbiBWaWV3MRQwEgYDVQQKEwtQYXlQYWwgSW5jLjETMBEGA1UECxQKbGl2ZV9jZXJ0czERMA8GA1UEAxQIbGl2ZV9hcGkxHDAaBgkqhkiG9w0BCQEWDXJlQHBheXBhbC5jb20wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMFHTt38RMxLXJyO2SmS+Ndl72T7oKJ4u4uw+6awntALWh03PewmIJuzbALScsTS4sZoS1fKciBGoh11gIfHzylvkdNe/hJl66/RGqrj5rFb08sAABNTzDTiqqNpJeBsYs/c2aiGozptX2RlnBktH+SUNpAajW724Nv2Wvhif6sFAgMBAAGjge4wgeswHQYDVR0OBBYEFJaffLvGbxe9WT9S1wob7BDWZJRrMIG7BgNVHSMEgbMwgbCAFJaffLvGbxe9WT9S1wob7BDWZJRroYGUpIGRMIGOMQswCQYDVQQGEwJVUzELMAkGA1UECBMCQ0ExFjAUBgNVBAcTDU1vdW50YWluIFZpZXcxFDASBgNVBAoTC1BheVBhbCBJbmMuMRMwEQYDVQQLFApsaXZlX2NlcnRzMREwDwYDVQQDFAhsaXZlX2FwaTEcMBoGCSqGSIb3DQEJARYNcmVAcGF5cGFsLmNvbYIBADAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4GBAIFfOlaagFrl71+jq6OKidbWFSE+Q4FqROvdgIONth+8kSK//Y/4ihuE4Ymvzn5ceE3S/iBSQQMjyvb+s2TWbQYDwcp129OPIbD9epdr4tJOUNiSojw7BHwYRiPh58S1xGlFgHFXwrEBb3dgNbMUa+u4qectsMAXpVHnD9wIyfmHMYIBmjCCAZYCAQEwgZQwgY4xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJDQTEWMBQGA1UEBxMNTW91bnRhaW4gVmlldzEUMBIGA1UEChMLUGF5UGFsIEluYy4xEzARBgNVBAsUCmxpdmVfY2VydHMxETAPBgNVBAMUCGxpdmVfYXBpMRwwGgYJKoZIhvcNAQkBFg1yZUBwYXlwYWwuY29tAgEAMAkGBSsOAwIaBQCgXTAYBgkqhkiG9w0BCQMxCwYJKoZIhvcNAQcBMBwGCSqGSIb3DQEJBTEPFw0yMDA3MjQxOTU4MzhaMCMGCSqGSIb3DQEJBDEWBBQv5qdPhBM22XDo0eXO5ilkPJnS8jANBgkqhkiG9w0BAQEFAASBgLmKlXWD+S6CJ8YXlqjwWlT42nFTBqoSdWOYrx76YfrsEVYtKusgo83k6K7/jHSAyUhzDUQqLgE/8n9/hgpn3p+uOcjj/hAesNiv70Q38A+fkgyadPlyG3f1ZF7mSrSM/JtAXlzcxyldxNms0vFQnhl6knaUBoEYuA9cv1W9VrFV-----END PKCS7-----"}';

    $.ajax({
        type: 'POST',
        url: 'https://www.paypal.com/cgi-bin/webscr',
        async: false,
        data: c,
        success: function (response) {
            alert(response);
        },
        error: function (response) {
            alert(response);
        }
    });
}

function Checkout(e) {

    // validate coupon is applied
    var CouponApplied = true;
    var AppointmentMade = true;

    $('.Coupon').each(function () {
        if ($(this).val() != '' && $(this).attr('value') == '') {
            MessageBox('Coupon Not Applied', 'You have entered a number for a coupon but did not apply it.<br /><br />If you intended to use this coupon, click OK to return to your Cart and click Apply.<br /><br />If you do not intend to use the coupon, please remove the coupon number.', 'danger');
            CouponApplied = false;
            return false;
        }
    });

    if (!CouponApplied) return;

    $('.Appointment').each(function () {
        if ($(this).val() == '') {
            MessageBox('Appointment Not Scheduled', 'Your order requires an appointment.<br /><br />Please click or tap the Schedule button.', 'danger');
            AppointmentMade = false;
            return false;
        }
    });

    if (!AppointmentMade) return;

    location.href = "checkout";
    //var dialogC;
    //PopDialog(dialogC, 'Checkout', null, null, null, 400, 700, 'Checkout', '', 'cc.aspx', 'Submit');
}

function UploadResults(e, c, cid) {

    if (c == null) {
        c = 'General';
    }

    if (cid == null) {
        cid = 1;
    }

    //PopDocDialog(c, cid, null, null, 800, 500, e);
    gridPop({ type: 'docs', element: this, context: c, contextID: cid, title: 'Test Docs', w: 800, h: 500 });
}

function OrderDetail(e) {
    var kfv = $(e).closest('tr').attr('kfv');
    var dialogO;
    PopDialogV(dialogO, 'OrderDetail', null, null, null, 600, RelativePixels('h', .75), 'Order Details', '&oid=' + escape(kfv));
    $('.ui-dialog-buttonpane button:contains("Save")').button().hide();
}

function TestInstructions(e) {
    var oid = $(e).attr('oid');

    $('#txtOrderID').val(oid);

    document.forms[0].type = 'post';
    document.forms[0].action = 'test_instructions';
    document.forms[0].target = '_instructions';
    document.forms[0].submit();
}

function ResultInstructions(e) {
    var oid = $(e).attr('oid');

    $('#txtOrderID').val(oid);

    document.forms[0].type = 'post';
    document.forms[0].action = 'result_instructions';
    document.forms[0].target = '_instructions';
    document.forms[0].submit();
}

function DownloadCouponCSV(e, bid, t) {

    window.open('Process_Request.aspx?action=DownloadCouponCSV&blockid=' + bid + '&filename=' + escape(t), '_blank');
}

function ApplyCoupon(e, oid) {

    var Coupon = $(e).parent().find('.Coupon:first').val();

    if (Coupon == '') return;

    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "ApplyCoupon",
        coupon: Coupon,
        orderid: oid
    })
        .done(function (data) {
            var r = data;
            if (r.messagetype == "success") {
                MessageBox('Apply Coupon', r.message, 'success', 400, function () {
                    if (r.goto != '') {
                        location.href = r.goto;
                        return;
                    }
                    else {
                        ReloadPage();
                    }
                });                
            }
            else {
                //$(document.body).css({ 'cursor': 'default' });
                //WaitBoxClose();
                MessageBox("Apply Coupon", r.message, r.messagetype);
            }
            //alert("done");
        }).fail(function (data) {
            //$(document.body).css({ 'cursor': 'default' });
            //WaitBoxClose();
            alert("Apply Coupon Request failed");
        });
}

function ProcurementEditor(e, ev, t) {
    ev.stopPropagation();
    var tid = $(e).closest('tr').attr('kfv');

    var aFunction = function () {
        SaveGrid('GridProcurement', function () {
            LeftMenu('Tests');
        });
    }

    PopDialog(null, 'Procurement', null, null, null, RelativePixels('w', .7, 1200), RelativePixels('h', .6, 400), 'Procurement - ' + t, '&tid=' + tid, null, 'Save', aFunction);
}

function ChangeOrder(e) {
    var oid = $(e).closest('tr').attr('kfv');

    var aFunction = function () {
        SaveGrid('VGridChangeOrder');

        WaitUntilGridSaves('VGridChangeOrder', function () { ReloadPage();});
    };
    PopDialogV(null, 'ChangeOrder', null, null, null, 600, 370, 'Change Order', '&oid=' + oid, null, aFunction);
}

function ScheduleTest(e, oid, sd) {

    /*
    // start date
    if (sd == null) {
        var d = new Date();
        var sd = (d.getMonth() + 1) + "/" + d.getDate() + "/" + d.getFullYear();
    }
    */

    var appe = $(e).closest('tr').find('.Appointment');

    // reset current appointment
    $('.Appointment').attr('cur', '');

    // mark current appointment as current
    appe.attr('cur', '1');

    var as = '';
    var ae = '';
    var an = '';

    if (typeof (appe.attr('as')) != 'undefined') {
        as = appe.attr('as');
        ae = appe.attr('ae');
        an = appe.attr('an');
    }

    // pop calendar
    var aFunction = function () {
        //alert(1);
        $('#diaCalendar').dialog('destroy').remove();
    }

    PopDialog(null, 'Calendar', null, null, null, RelativePixels('w', 1, 800), RelativePixels('h', 1, 700), 'Calendar', '&oid=' + oid + '&as=' + escape(as) + '&ae=' + escape(ae) + '&an=' + an + '&sd=' + escape(sd), null, 'Close', aFunction);
    // hide cancel
    $('.ui-dialog-buttonpane button:contains("Cancel")').button().hide();
}

function SetAppointment(e, oid, as, ae, an) {

    var appe = $('.Appointment[cur="1"]');

    // interface
    if ($(e).css('background-color') != 'rgb(100, 149, 237)') {
        // selected
        // reset
        $('.Period').css('background-color', 'cornflowerblue');
        appe.val('');
        appe.attr('as', '');
        appe.attr('ae', '');
        appe.attr('an', '');
        appe.attr('title', 'Not scheduled');

        as = '';
        ae = '';
        an = '';
    }
    else {
        $('.Period').css('background-color', 'cornflowerblue');
        // selected
        $(e).css('background-color', 'darkorange');


        appe.val(as);
        appe.attr('as', as);
        appe.attr('ae', ae);
        appe.attr('an', an);
        appe.attr('title', 'Scheduled on ' + as + ' to ' + ae.slice(ae.length - 8).trim() + ' at station ' + an);
        $('#diaCalendar').dialog('destroy').remove();
    }

    // save appointment
    var jqxhr = $.getJSON("Process_Request.aspx", {
        action: "SaveAppointment",
        oid: oid,
        as: as,
        ae: ae,
        an: an
    })
        .done(function (data) {
            var r = data;
            if (r.messagetype == "success") {
            }
            else {
                //$(document.body).css({ 'cursor': 'default' });
                //WaitBoxClose();
                MessageBox("Save Appointment", r.message, r.messagetype);
            }
            //alert("done");
        }).fail(function (data) {
            //$(document.body).css({ 'cursor': 'default' });
            //WaitBoxClose();
            alert("Save Appointment Request failed");
        });
}

function SetNextAppointment(d) {
    //$('#datepicker').datepicker('setDate', d);
    var od = ParseQueryString('sd', $('#diaCalendar').attr('qs'));
    $('#diaCalendar').load($('#diaCalendar').attr('qs').replace('sd=' + od, 'sd=' + d));
}

$.extend($.expr[":"], {
    containsExactHTML: $.expr.createPseudo ?
        $.expr.createPseudo(function (text) {
            return function (elem) {
                return $.trim(elem.innerHTML.toLowerCase()) === text.toLowerCase();
            };
        }) :
        // support: jQuery <1.8
        function (elem, i, match) {
            return $.trim(elem.innerHTML.toLowerCase()) === match[3].toLowerCase();
        },

    containsExactCaseHTML: $.expr.createPseudo ?
        $.expr.createPseudo(function (text) {
            return function (elem) {
                return $.trim(elem.innerHTML) === text;
            };
        }) :
        // support: jQuery <1.8
        function (elem, i, match) {
            return $.trim(elem.innerHTML) === match[3];
        },
    containsExactText: $.expr.createPseudo ?
        $.expr.createPseudo(function (text) {
            return function (elem) {
                return $.trim(elem.textContent.toLowerCase()) === text.toLowerCase();
            };
        }) :
        // support: jQuery <1.8
        function (elem, i, match) {
            return $.trim(elem.textContent.toLowerCase()) === match[3].toLowerCase();
        },

    containsExactTextCase: $.expr.createPseudo ?
        $.expr.createPseudo(function (text) {
            return function (elem) {
                return $.trim(elem.textContent) === text;
            };
        }) :
        // support: jQuery <1.8
        function (elem, i, match) {
            return $.trim(elem.textContent) === match[3];
        },

    containsRegex: $.expr.createPseudo ?
        $.expr.createPseudo(function (text) {
            var reg = /^\/((?:\\\/|[^\/])+)\/([mig]{0,3})$/.exec(text);
            return function (elem) {
                return reg ? RegExp(reg[1], reg[2]).test($.trim(elem.innerHTML)) : false;
            };
        }) :
        // support: jQuery <1.8
        function (elem, i, match) {
            var reg = /^\/((?:\\\/|[^\/])+)\/([mig]{0,3})$/.exec(match[3]);
            return reg ? RegExp(reg[1], reg[2]).test($.trim(elem.innerHTML)) : false;
        },
    containsText: $.expr.createPseudo ?
        $.expr.createPseudo(function (text) {
            return function (elem) {
                return $.trim(elem.textContent.toLowerCase()).indexOf(text.toLowerCase()) >= 0;
            };
        }) :
        // support: jQuery <1.8
        function (elem, i, match) {
            return $.trim(elem.textContent.toLowerCase()).indexOf(match[3].toLowerCase()) >= 0;
        },
    containsHTML: $.expr.createPseudo ?
        $.expr.createPseudo(function (text) {
            return function (elem) {
                return $.trim(elem.innerHTML.toLowerCase()).indexOf(text.toLowerCase()) >= 0;
            };
        }) :
        // support: jQuery <1.8
        function (elem, i, match) {
            return $.trim(elem.innerHTML.toLowerCase()).indexOf(match[3].toLowerCase()) >= 0;
        }

});

//#region spread
function PopSpread(e, cw) {

    if ($(e).hasClass('disabled')) return;

    //setTimeout(function () { WaitBox('Spreadsheet Loading', 'Please wait', 'Info'); });

    if (e != null) {
        LastPopSpreade = e;
        f = e.getAttribute('f');
        LastPopSpreadf = f;
    }

    if (e == null) {
        e = LastPopSpreade;
        f = LastPopSpreadf
    }


    var q = e.getAttribute('q');
    var info = e.getAttribute('info');
    var Title = $(e).closest('tr').find('td:first').text() + ' - ' + $(e).text();
    var Type = e.getAttribute('template');

    //validate foreign keys specified
    var fks = info.split(',');

    if (fks.length > 3) {
        for (var i = 3; i < fks.length; i++) {
            if ($('#pick' + fks[i]).attr('resultkey') == '' && $('#pick' + fks[i]).attr('result') == '') {
                var Label = $('#pick' + fks[i]).closest('td').prev().text();
                MessageBox(Label + ' Selection Required', 'Please select a value for ' + Label + ' first.', 'warning');
                return;
            }
        }
    }

    // add form key field
    var kt = $(e).closest('.vg');
    var kf = kt.attr('kf');
    var kfv = kt.attr('kfv');

    //var FormData = 'Designer_ID|1000|1000|';
    var FormData = kf + '|' + kfv + '|' + kfv + '|';

    $('.fieldsform').find('.hgResult').each(function () {
        var f = $(this).attr('fn');

        var v = $(this).attr('resultkey');
        if (v == '') {
            $(this).attr('oresultkey');
        }

        if (v == '') {
            $(this).attr('result');
        }

        if (v == '') {
            $(this).attr('oresult');
        }

        var l = $(this).text().replace(/\|/g, ',');

        if (l.length > 50) {
            l = l.substring(0, 50) + '...';
        }

        if (v != '') {
            FormData += f + '|' + escape(v) + '|' + escape(l) + '|';
        }

    });

    if (FormData != '') {
        FormData = FormData.substr(0, FormData.length - 1);
    }

    // initialize
    if ($('#diaSpread' + f).length == 0) {
        var Choices = $(e).attr('resultkey');
        if (Choices == "") {
            $(e).attr('oresultkey');
        }

        SetCookie('SpreadChoice', Choices, 1);
        SetCookie('SpreadSearch', '', -1);
        SetCookie('SpreadType', Type, 1);
    }

    var aFunction = function () {
        WaitBox('Validating', 'Please wait.', 'info');

        //SaveSpread('Spread' + f);
        //return;
        f = f.replace('Spread', '');

        ValidateSpread({
            spreadid: 'Spread' + f,
            onvalid: function (changes) {
                WaitBoxClose();
                /*
                if (changes == '') {
                    $('#diaSpread' + f).dialog('destroy').remove();
                    return;
                }
                */
                WaitBox('Saving', 'Please wait.', 'info');
                //SaveSpread('Spread' + f, e, changes);
                SaveSpread({
                    SpreadID: 'Spread' + f,
                    PickerElement: e,
                    changes: changes
                });
            },
            oninvalid: function () {
                WaitBoxClose();
                return false;
            }

        });
    }

    var w = RelativePixels('w', .9);
    var h = RelativePixels('h', .7); //RelativePixels('h', .7, 800)
    var my = null;
    var at = null;

    var pdw = GetCookie('PickerDetailWidth');

    var find = e.id.replace(/pick/i, '');

    var ww = GetPairValue(pdw, find, 0);

    if (ww != 0) {
        w = ww;
        my = 'right';
        at = 'right-50';
    }

    //if (cw == null) {
    cw = '';
    //}

    // highlight field row
    //$(e).closest('tr').removeClass('ffrhighlight');
    $(e).closest('tr').addClass('ffrhighlight');

    var DialogSpread;
    PopDialog(DialogSpread, 'Spread' + f, my, at, null, w, h, Title, '&eid=' + e.id + "&pq=" + q + "&info=" + info + "&ty=" + Type + '&fd=' + escape(FormData) + '&cw=' + cw, "spread.aspx", 'Save', aFunction);


    //var buttons = $('#dia' + 'Spread' + f).parent().find('.ui-dialog-buttonset');
    //buttons.before($('<div  style="display: inline; font-size: .9em;"><span id=\"spnSpreadStatus\" style=\"width: 500px; padding: 12px; color: gray;\" >Loading spreadsheet ...</span></div>'));
    //buttons.before($('<label class="switch"><input id="chkOnePage(this);" type="checkbox"><span class="slider round"></span></label>'));


}

function SpreadKeyPress(e, ev) {

    if ($(e).hasClass('disabled')) return;

    var code = ev.keyCode || ev.which;

    event.preventDefault();

    if (code == 13 || code == 32) {
        PopSpread(e);
    }
}

function SpreadFocus(e) {
    //alert(1);
}

function SpreadUpdate() {

    var e = LastPopSpreade;

    // get selected IDs
    var SelectedIDs = '';
    var SelectedTexts = 'None';
    /*
    $('#diaDetail' + LastPopDetailf + ' tbody:last tr td:first-child').not(':empty').each(function () {
 
        SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
        //SelectedTexts += $(this).closest('tr').attr('kfv') + ', ';
            
        //var st = $(this).find('select:not([result=""])').attr('result');
        var st = "";
        if ($(this).find('select').length > 0) {
 
            st = $(this).find('select').attr('result');
        }
        else if ($(this).find('input').length > 0) {
            
            st = $(this).find('input').attr('result');
        }
        else
        {
            st = $(this).text();
        }
 
        var st2 = "";
 
        if ($(this).next().find('select').length > 0) {
 
            st2 = $(this).next().find('select').attr('result');
        }
        else if ($(this).next().find('input').length > 0) {
 
            st2 = $(this).next().find('input').attr('result');
        }
        else {
            st2 = $(this).next().text();
        }
 
        if (st != 'None') {
            SelectedTexts += st + '-' + st2 + ', ';
        }
            
 
    });
    */

    // already saved
    $('#diaSpread' + LastPopSpreadf + ' tbody:last tr[class=""], tbody:last tr:not([class])').each(function () {
        SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
    });

    // under edit with results
    //$('#diaDetail' + LastPopDetailf + ' tbody:last .RowEdit').has('.hgResult:not([result=""]) , .hgResult:not([resultkey="0"])').each(function () {
    $('#diaSpread' + LastPopSpreadf + ' tbody:last .RowEdit').each(function () {
        //if (IsDirty($(this).find('.hgResult'))) {
        if ($(this).find('.hgResult:not([result=""]).hgResult:not([resultkey="0"])').length > 0) {
            SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
        }
    });

    // edit but no focus
    $('#diaSpread' + LastPopSpreadlf + ' tbody:last .hgNewRecord').not('.RowEdit').has('td:not(:empty)').each(function () {
        SelectedIDs += $(this).closest('tr').attr('kfv') + ', ';
    });

    if (SelectedIDs != "") {
        SelectedIDs = SelectedIDs.substr(0, SelectedIDs.length - 2);

        /*
        //SelectedTexts = SelectedTexts.substr(0, SelectedTexts.length - 2);
        var ItemCount = SelectedIDs.split(',').length;
        if (ItemCount == 1) {
            SelectedTexts = SelectedIDs.split(',').length + ' Item';
        }
        else {
            SelectedTexts = SelectedIDs.split(',').length + ' Items';
        }
        */

        // determine picker element
        var PickerElement = e;

        var PickerCurrentIDs = SelectedIDs;
        var PickerForm = $(PickerElement).attr('f');
        var PickerField = $(PickerElement).attr('fn');

        var jqxhr = $.getJSON("Process_Request.aspx", {
            action: "PickerLink",
            cids: PickerCurrentIDs,
            nid: '',
            form: PickerForm,
            field: PickerField,
            kfv: '',
            table: ''
        })
            .done(function (data) {

                $(PickerElement).attr('resultkey', data.LinkIDs);
                $(PickerElement).text(data.LinkText);

                $('#diaSpread' + LastPopSpreadf).dialog('destroy').remove();

                // focus on next fields
                if (f.indexOf('Product_Designer_') == -1) {

                    //var nr = $(e).closest('tr').next('tr').find('.hgResult');
                    var nr = $(e).closest('tr').nextAll('tr:visible:first').find('.hgResult');

                    if (nr.find('input').length == 1) {
                        nr.find('input').caretToEnd();
                    }
                    else if (nr.is('a')) {
                        //nr.focus();
                        //setTimeout(function () { nr.click(); }, 500);
                        setTimeout(function () {
                            nr.focus();

                            if (nr.text() == 'None') {
                                nr.click();
                            }
                        },
                            500);
                    }
                    else {
                        nr.focus();
                    }
                }

                //alert("done");
            }).fail(function (data) {
                alert("PickerLink failed.");
            });
    }

    /*
    // update e
    $(e).attr('resultkey', SelectedIDs);
    $(e).text(SelectedTexts);

    $('#diaDetail' + LastPopDetailf).dialog('destroy').remove();


    // focus on next fields
    if (f.indexOf('Product_Designer_') == -1) {

        //var nr = $(e).closest('tr').next('tr').find('.hgResult');
        var nr = $(e).closest('tr').nextAll('tr:visible:first').find('.hgResult');

        if (nr.find('input').length == 1) {
            nr.find('input').caretToEnd();
        }
        else if (nr.is('a')) {
            //nr.focus();
            //setTimeout(function () { nr.click(); }, 500);
            setTimeout(function () {
                nr.focus();

                if (nr.text() == 'None') {
                    nr.click();
                }
            },
                500);
        }
        else {
            nr.focus();
        }
    }
    */
}

function ValidateSpread(o) {

    var spreadid = o.spreadid;
    var spreadinstanceid = spreadid + '-' + document.getElementById(spreadid).getAttribute('iid');
    var pickerelement = o.pickerelement;
    var onvalid = o.onvalid;
    var oninvalid = o.oninvalid;

    var spread = document.getElementById(spreadid).jexcel;

    var columns = spread.getConfig().columns;

    var tb = document.getElementById(spreadid).getAttribute('tb');
    var kf = document.getElementById(spreadid).getAttribute('kf');
    var as = document.getElementById(spreadid).getAttribute('as');

    var kfindex = GetKeyColumnIndex(columns);

    // run pre validate function
    if (typeof (ValidateSpreadPre) == 'function') {
        ValidateSpreadPre(o);
    }
    // validate
    var NewData = spread.getData();
    var Changes = '';
    var valid = true;

    var OldData = SpreadOD.filter(function (e) { return e.id == spreadinstanceid; })[0].odata;

    // update and new
    $(NewData).each(function (index) {

        var rowindex = index;
        var rowdata = this;
        var Change = '';
        valid = true;

        var hasdata = spreadrowhasdata(rowdata);

        if (hasdata) {

            var ID = rowdata[kfindex];

            // get old data row
            oldrowdata = OldData.filter(function (e) { return e[kfindex] == ID })[0];

            $(columns).each(function (index) {

                if (!this.key) {

                    var cellname;

                    var value = spread.getValueFromCoords(index, rowindex);

                    // skip validting checkboxes
                    if (!this.type == 'checkbox') {

                        if (this.type != 'hidden') {
                            cellname = String.fromCharCode(index + 65) + (rowindex + 1);
                            spread.setStyle(cellname, 'background-color', 'white');
                        }

                        // required
                        if (this.required == true && SaveValue(value, this) == '') {

                            spread.setStyle(cellname, 'background-color', 'yellow');
                            // message
                            MessageBox("Validation: Required Field Empty", "You missed making an entry to a required field (" + this.title + ").<br /><br />Please make an entry.", "warning");

                            valid = false;
                            return valid;
                        }

                        // length
                        if (this.length != null && value.length > this.length) {
                            spread.setStyle(cellname, 'background-color', 'yellow');
                            MessageBox("Validation: Text Too Long", "The text you entered is longer than the maximum length allowed (" + this.length + " characters).<br /><br />Please edit.", "warning");
                            valid = false;
                            return valid;
                        }

                        // is date
                        if (this.date == true && value != '' && isNaN(Date.parse(value))) {
                            spread.setStyle(cellname, 'background-color', 'yellow');
                            MessageBox("Validation: Not a Date", "The text you entered is not a date. A date is expected.<br /><br />Please edit.", "warning");

                            valid = false;
                            return valid;
                        }

                        // is number
                        if (this.ft == true && !$.isNumeric(value) && this.type == 'text') {
                            spread.setStyle(cellname, 'background-color', 'yellow');
                            MessageBox("Validation: Not a Number", "The text you entered is not a number. A number is expected.<br /><br />Please edit.", "warning");

                            valid = false;
                            return valid;
                        }
                    }


                    var oldvalue;

                    if (oldrowdata != null) {
                        oldvalue = oldrowdata[index];
                    }

                    var savevalue = SaveValue(value, this);

                    //if (!(this.key && savevalue != '')) {  // insert
                    if (savevalue != SaveValue(oldvalue, this)) {
                        Change += "<fv f='" + this.fn + "'  v='" + savevalue + "' t='" + this.ft + "' e='1' />";
                    }
                    //}
                }
            });

            if (!valid) {
                return valid;
            }
        }

        if (!valid) {
            return valid;
        }

        if (Change != '') {
            Changes += "<data tb='" + tb + "' kf='" + kf + "' kfv='" + ID + "' as='" + escape(as) + "' >" + Change + "</data>";
        }

    });

    // deleted
    $(OldData).each(function () {

        var oldkfv = this[kfindex];

        if (oldkfv != null && oldkfv != '') {
            // missing in new data
            var newrowdata = NewData.filter(function (e) { return e[kfindex] == oldkfv })[0];
            if (newrowdata == null) {
                Changes += "<data tb='" + tb + "' kf='" + kf + "' kfv='" + oldkfv + "' as='" + escape(as) + "' de='1' ></data>";
            }
        }
    });

    if (valid) {
        onvalid(Changes);
    }
    else {
        oninvalid();
    }

    return;
}

function ValidateSpreadPre(o) {

    var spreadid = o.spreadid;

    var spread = document.getElementById(spreadid).jexcel;

    var columns = spread.getConfig().columns;

    var tb = document.getElementById(spreadid).getAttribute('tb');
    var kf = document.getElementById(spreadid).getAttribute('kf');
    var as = document.getElementById(spreadid).getAttribute('as');

    // validate
    var NewData = spread.getData();

    // set deleted rows
    $(NewData).each(function (index) {
        var rowdata = this;
        var visibledata = '';
        var rowindex = index;
        $(columns).each(function (index) {
            // visible columns
            if (this.type != 'hidden') {

                var celltext = rowdata[index].toString();

                // ignore unchecked checkboxes and none links
                if (celltext == 'false') {
                    celltext = '';
                } else if (celltext.indexOf('>None</') > -1) {
                    celltext = '';
                }

                visibledata += celltext;
            }
        });

        if (visibledata == '') {
            $(columns).each(function (index) {
                // invisible columns
                if (this.type == 'hidden') {
                    if (this.type == 'checkbox') {
                        spread.setValueFromCoords(index, rowindex, false, true);
                    }
                    else {
                        spread.setValueFromCoords(index, rowindex, '', true);
                    }

                }
            });
        }
    });

    // apply defaults
    $(NewData).each(function (index) {
        var rowdata = this;
        var visibledata = '';
        var rowindex = index;
        $(columns).each(function (index) {
            // visible columns
            if (this.type != 'hidden') {

                var celltext = rowdata[index].toString();

                // ignore unchecked checkboxes and none links
                if (celltext == 'false') {
                    celltext = '';
                } else if (celltext.indexOf('>None</') > -1) {
                    celltext = '';
                }

                visibledata += celltext;
            }
        });

        if (visibledata != '') {
            $(columns).each(function (index) {
                // with defaults
                if (this.default != null && rowdata[index] == '') {
                    if (this.ft == 's') {
                        spread.setValueFromCoords(index, rowindex, this.default, true);
                    }
                    else {
                        spread.setValueFromCoords(index, rowindex, this.default, true);
                    }

                }
            });
        }
    });

    var qs = unescape($('#dia' + spreadid).attr('qs'));
    var info = ParseQueryString('info', qs);

    //if (spreadid == 'SpreadSalesForce') {
    //if ($('form:last').attr('action').indexOf('info=PositionMin') > -1) {

    if (info.indexOf('PositionMin') == 0) {

        NewData = spread.getData();
        // update ignored fields

        //Product
        var ContractProductIDindex = GetColumnIndex(columns, 'Contract Product');
        var ProductIDindex = GetColumnIndex(columns, 'Product');

        // Dates
        var DeliveryDateindex = GetColumnIndex(columns, 'Delivery Date');

        var ContractDeliveryDeadlineindex = GetColumnIndex(columns, 'Contract Deadline');

        var EarliestPossibleDeliveryDateindex = GetColumnIndex(columns, 'Earliest Possible Delivery');
        var ContractEarliestPossibleDeliveryDateindex = GetColumnIndex(columns, 'Contract Earliest Date');

        $(NewData).each(function (index) {

            var rowindex = index;
            var rowdata = this;
            var Change = '';
            valid = true;

            var hasdata = spreadrowhasdata(rowdata);

            if (hasdata) {

                // update ProductID
                spread.setValueFromCoords([ProductIDindex], [index], rowdata[ContractProductIDindex], true);

                // update ContractDeliveryDeadline
                spread.setValueFromCoords([ContractDeliveryDeadlineindex], [index], rowdata[DeliveryDateindex], true);

                // update EarliestPossibleDeliveryDate
                spread.setValueFromCoords([EarliestPossibleDeliveryDateindex], [index], rowdata[ContractEarliestPossibleDeliveryDateindex], true);

            }
        });
    }

}

function spreadrowhasdata(spreadrow) {

    var hasdata = true;
    var changeddata = '';

    $(spreadrow).each(function (index) {

        var celltext = spreadrow[index].toString();

        // ignore unchecked checkboxes and none links
        if (celltext == 'false') {
            celltext = '';
        } else if (celltext.indexOf('>None</') > -1) {
            celltext = '';
        }

        changeddata += celltext;
    });

    if (changeddata == '') {
        hasdata = false;
    }

    return hasdata;
}

function SaveSpread(o) {

    var SpreadID = o.SpreadID;
    var PickerElement = o.PickerElement;
    var changes = o.changes;
    var postsave = o.postsave;

    //WaitBox('Saving Data', 'Please wait.', 'info');

    var spread = document.getElementById(SpreadID).jexcel;
    var columns = spread.getConfig().columns;
    var keyfieldindex = GetKeyColumnIndex(columns);
    var PickerCurrentIDs = '';
    var PickerForm = $(PickerElement).attr('f');
    var PickerField = $(PickerElement).attr('fn');
    var SavedRows = 0;
    var NewIDs = '';

    //Encode
    changes = changes.replace(/\</g, "-[_").replace(/\>/g, "_]-");

    // save
    $.ajax({
        type: 'POST',
        url: 'Process_Change',
        async: false,
        processData: false,
        data: 'changes=' + changes,
        success: function (r) {

            // parse response
            var Result = r.split("|");

            if (Result[0] == 'Error') {
                WaitBoxClose();
                MessageBox("Error Saving Data", r.replace('Error|', '') + "<br /><br />Please edit or cancel.", "danger");
                return;
            }

            if (PickerElement != null) {

                if (Result[0] == 'NewID') {
                    NewIDs = Result[3];
                }

                var FieldForm = $(PickerElement).closest('.vg, .hg');

                var kf = FieldForm.attr('kf');
                var kfv = FieldForm.attr('kfv');
                var tb = FieldForm.attr('tb');

                PickerCurrentIDs = spread.getColumnData(keyfieldindex).filter(Boolean).join(',');

                // spread update
                var jqxhr = $.getJSON("Process_Request.aspx", {
                    action: "PickerLink",
                    cids: PickerCurrentIDs,
                    nid: NewIDs,
                    form: PickerForm,
                    field: PickerField,
                    ls: 'PC',
                    kf: kf,
                    kfv: kfv,
                    table: tb
                })
                    .done(function (data) {

                        $(PickerElement).attr('resultkey', data.LinkIDs);
                        $(PickerElement).text(data.LinkText);

                        $('#diaSpread' + PickerForm).dialog('destroy').remove();

                        // focus on next fields
                        if (f.indexOf('Product_Designer_') == -1) {

                            //var nr = $(e).closest('tr').next('tr').find('.hgResult');
                            var nr = $(PickerElement).closest('tr').nextAll('tr:visible:first').find('.hgResult');

                            if (nr.find('input').length == 1) {
                                nr.find('input').caretToEnd();
                            }
                            else if (nr.is('a')) {
                                //nr.focus();
                                //setTimeout(function () { nr.click(); }, 500);
                                setTimeout(function () {
                                    nr.focus();

                                    if (nr.text() == 'None') {
                                        nr.click();
                                    }
                                },
                                    500);
                            }
                            else {
                                nr.focus();
                            }
                        }

                        WaitBoxClose();

                        //alert("done");
                    }).fail(function (data) {
                        WaitBoxClose();
                        alert("PickerLink failed.");
                    });
            }

            if (typeof (postsave) == 'function') {
                var CurrentIDs = spread.getColumnData(keyfieldindex).filter(Boolean).join(',');
                if (Result[0] == 'NewID') {
                    NewIDs = Result[3];
                }
                postsave(CurrentIDs, NewIDs);
            }
        },
        error: function (response) {
            WaitBoxClose();
            MessageBox("Error Saving Data", "Please edit or cancel.", "danger");
            return;
        }
    });
}


var x1o = 0, y1o = 0, x2o = 0, y2o;
var spreadonselection = function (instance, x1, y1, x2, y2, origin) {

    var xdirection = 1;
    var ydirection = 1;

    if (x1 < x1o) {
        xdirection = 0;
    }

    if (y1 < y1o) {
        ydirection = 0;
    }

    var cols = instance.jexcel.getConfig().columns;

    var dia = $(instance).closest('.ui-dialog-content')[0];

    var clw = dia.clientWidth;
    var clh = dia.clientHeight;

    var sl = dia.scrollLeft;

    var x2max = 0;
    var x1min = 0;

    var x2width = 0;


    $(cols).each(function (index) {
        if (this.type != 'hidden') {
            x2max = x2max * 1.0 + this.width * 1.0;

            if (index < x1) {
                x1min = x1min * 1.0 + this.width * 1.0;
            }

        }
        if (index == x2) {
            x2width = this.width * 1.0;
            return false;
        }
    });

    var xinc = 200;

    if (xdirection == 1) {
        if (cols[x2 + 1] != null) {
            xinc = cols[x2 + 1].width * 1.0;
        }
        if (x2max + xinc > clw * 1.0 + dia.scrollLeft * 1.0) {
            dia.scrollLeft = dia.scrollLeft * 1.0 + xinc;
        }
    }

    if (xdirection == 0) {
        if (cols[x1 - 1] != null) {
            xinc = cols[x1 - 1].width * 1.0;
        }
        if (x1min - xinc < dia.scrollLeft) {
            dia.scrollLeft = dia.scrollLeft - xinc;
        }
    }

    var rows = instance.jexcel.rows;

    var y2max = 0;
    var y1min = 0;

    for (var index = 0; index < rows.length; index++) {
        y2max = y2max * 1.0 + rows[index].clientHeight * 1.0;

        if (index < y1) {
            y1min = y1min * 1.0 + rows[index].clientHeight * 1.0;
        }

        if (index == y2) {
            break;
        }
    }

    var yinc = 100;

    if (ydirection == 1) {
        if (rows[y2 + 1] != null) {
            yinc = rows[y2 + 1].clientHeight * 1.0;
        }
        if (y2max + yinc > clh * 1.0 + dia.scrollTop * 1.0 - 40.0) {
            dia.scrollTop = dia.scrollTop * 1.0 + yinc;
        }
    }

    if (ydirection == 0) {
        if (rows[y1 - 1] != null) {
            yinc = rows[y1 - 1].clientHeight * 1.0;
        }
        if (y1min - yinc < dia.scrollTop * 1.0) {
            dia.scrollTop = dia.scrollTop * 1.0 - yinc;
        }
    }

    /*
    if (x1 == x2) {
        x1o = 0; x2o = 0;
    }
    else {
        x1o = x1; x2o = x2;
    }

    if (y1 == y2) {
        y1o = 0; y2o;
    }
    else {
        y1o = y1; y2o = y2;
    }
    */
    x1o = x1; x2o = x2; y1o = y1; y2o = y2;

}

function spreadmousemove(e, ev) {
    /*
    var x = ev.clientX;
    var y = ev.clientY;

    var dia = $(e).closest('.ui-dialog-content')[0];

    var clw = dia.clientWidth;

    var sl = dia.scrollLeft;

    //alert(x);
    
    if (x + 50 > clw) {
        dia.scrollLeft = dia.scrollLeft + 50; //(x + 100) - (clw + sl);
    }

    if (x - 50 < 0) {
        dia.scrollLeft = dia.scrollLeft - 50;
    }

    */
}

function spreadpagewidth(e) {

    var dia = $('.ui-dialog-content:last');

    var spread = $('.spread:first')[0].jexcel;

    // get visible columns
    var columns = spread.getConfig().columns;

    var colcount = 0;

    $(columns).each(function (index) {
        if (this.type != 'hidden') {
            colcount++;
        }
    });

    var spreadwidth = dia[0].clientWidth;

    if (e.checked) {
        var colwidth = (spreadwidth * 1.0 - 55) / colcount * 1.0;

        $('.spread:first').css('font-size', '.7em');
        //dia.find('col:not(:first)').css('width', colwidth + 'px');

        $(columns).each(function (index) {
            if (this.type != 'hidden') {
                spread.setWidth(index, colwidth);
            }
        });

    }
    else {
        var colwidth = 100;

        $('.spread:first').css('font-size', '1.0em');
        //dia.find('col:not(:first)').css('width', colwidth + 'px');
        $(columns).each(function (index) {
            if (this.type != 'hidden') {
                spread.setWidth(index, colwidth);
            }
        });
    }

    dia.scrollLeft = 0;

    //setTimeout(functioon(){ dia.find('col:not(:first)').css(}, 100);
}

var spreadonload = function (instance) {

    // update original data
    spreadupdateoriginaldata(instance);
    spreadupdatepickers(instance);
    spreadrmarkeadonly(instance);
    //SpreadColumns = instance.jexcel.getConfig().columns;

}

var spreadonchange = function (instance, cell, x, y, value) {
    /*
    if (cell.innerText == '') {
        var pickerlink = instance.jexcel.getConfig().columns[col].pickerlink;
        if (pickerlink != null && pickerlink != '') {
            var Link = decodeURIComponent(unescape(pickerlink));
            Link = Link.replace('></a>', ' ><span style=\'color:#D3D3D3 !important;\'>None</span></a>');
            cell.innerHTML = Link;
        }
    }
    */
}

function spreadupdateoriginaldata(instance) {
    var id = $(instance).attr('id') + '-' + $(instance).attr('iid');

    var o = SpreadOD.filter(function (e) { return e.id == id; });

    if (o.length == 0) {
        SpreadOD.push({ id: id, odata: instance.jexcel.getData() });
    }
    else {
        o.odata = instance.jexcel.getData();
    }

    // remove SpreadOD for instances that no longer exist
    $.each(SpreadOD, function (key, value) {
        if (value != null) {
            var activespread = $('.spread').filter(function (eindex, e) {
                return $(e).attr('id') + '-' + $(e).attr('iid') == value.id;
            });
            if (activespread.length == 0) {
                SpreadOD.splice(key, 1);
            }
        }
    });
}

function spreadupdatepickers(instance) {

    // none for pickers
    var spread = instance.jexcel;
    var columns = spread.getConfig().columns;

    $(columns).each(function (index) {
        if (this.pickerlink != null) {
            var Link = decodeURIComponent(unescape(this.pickerlink));

            //Link = Link.replace('></a>', ' style=\'color:gray !important;\' >None</a>');
            Link = Link.replace('></a>', ' ><span style=\'color:#D3D3D3 !important;\'>None</span></a>');

            PickerLinkDefaults.push(index, Link);
            //.push(Link);

            // update all blanks in row
            var cdata = spread.getColumnData(index);

            $(cdata).each(function (row) {
                if (this == '') {
                    spread.setValueFromCoords(index, row, Link);
                }
            });
        }
    });

}

function spreadrmarkeadonly(instance) {
    var spread = instance.jexcel;
    var columns = spread.getConfig().columns;

    $(columns).each(function (index) {
        if (this.readOnly) {
            $('.spread colgroup col:nth-child(' + (index + 2) + ')').css('background-color', '#fafafa');
        }
    });
}

var spreadupdateTable = function (instance, cell, col, row, val, id) {


    if (!SpreadInitialized) {
        SpreadColumns = instance.jexcel.getConfig().columns;
        SpreadInitialized = true;
    }


    if ((cell.innerText).indexOf("<a ") > -1) {
        cell.innerHTML = val;
    } else if (cell.innerText == '') {
        var LinkIndex = PickerLinkDefaults.indexOf(col);
        if (LinkIndex != -1) {
            cell.innerHTML = PickerLinkDefaults[LinkIndex + 1];
            return;
        }
    }


    // readonly
    if (SpreadColumns[col].readOnly) {

        //var selectedrow = instance.jexcel.getSelectedRows()[0].rowIndex;

        // disable links
        $(cell).find('a').attr('onclick', '').attr('style', 'cursor: default !important; color: gray !important;');
    }

}

var spreadonpaste = function (instance, cell) {

    return;
    for (var r = 0; r < cell.length; r++) {
        for (var c = 0; c < cell[0].length; c++) {
            var pastedcell = cell[r, c];
            if ((pastedcell.innerText).indexOf("<a ") > -1) {
                //pastedcell.innerHTML = val;
            }
        }
    }
}

var spreadonchange = function (instance, cell, x, y, value) {

    if ((cell.innerText).indexOf("<a ") > -1) {
        cell.innerHTML = value;
    }
}

var spreadoneditionstart = function (instance, cell, x, y, value) {

    if ((cell.innerHTML).indexOf("<a ") > -1) {

        $(cell).addClass('readonly');

    }/*
    else if (table.getConfig().columns[x].date) {
        setTimeout(function () {
            
            $(cell).closest('input').datepicker();
            
        }, 5000);
    }*/
    else {
        return;
    }
}

var spreadoneditionend = function (instance, cell, x, y, value) {

    if (table.getConfig().columns[x].date) {
        // fix date
        var date = new Date(cell.innerHTML);

        if (date.getYear() < 100) {
            var newdate = new Date(date.getYear() + 2000, date.getMonth(), date.getDate());
            cell.innerHTML = formatDate(newdate, "MM/dd/yyyy");
            data[y][x] = cell.innerHTML;
        }
    }
}

function GetColumnIndex(columns, columntitle) {
    //return columns.filter(function (e, index) { return e.title == title; }).index;
    for (var i = 0; i < columns.length; i++) {
        if (columns[i].title == columntitle) {
            return i;
        }
    }
    return -1;
}

function GetKeyColumnIndex(columns) {
    //return columns.filter(function (e, index) { return e.title == title; }).index;
    for (var i = 0; i < columns.length; i++) {
        if (columns[i].key == true) {
            return i;
        }
    }
    return -1;
}

function SaveValue(value, column) {

    if (value == null) return value;

    if (value.length == 1 && value.charCodeAt(0) == 0) return '';

    if (value == true && column.type == 'checkbox') {
        value = 1; // checkbox checked
    }
    else if (value == false && column.type == 'checkbox') {
        value = 0; // checkbox unchecked
    }
    else if (value != '' && value.indexOf('<a ') > -1) {
        // get result key
        value = $(value).attr('resultkey');

        if (value == '0') value = '';
    }
    else if (value == '') {
        value = "";
    }

    return value;
}

var spreadonbeforechange = function (instance, cell, x, y, value) {
    // remove all readonly
    //$('.spread').removeClass('readonly');
    /*
    var selectedcells = instance.jexcel.selectedCell.filter(function (e, i) { return i % 2 == 0;});
    var firstx = selectedcells[0];
    var lastx = selectedcells[1];

    for (var c = firstx; c <= lastx; c++) {
        var col = instance.jexcel.getConfig().columns[c];
        var colreadonly = col.readOnly;

        if (colreadonly) {
            col.readOnly = false;
            col.wasreadOnly = true;
        }
    }
    */
}

var spreadonafterchanges = function (instance, cell, x, y, value) {
    // restore read only
    /*
    var selectedcells = instance.jexcel.selectedCell.filter(function (e, i) { return i % 2 == 0; });
    var firstx = selectedcells[0];
    var lastx = selectedcells[1];

    for (var c = firstx; c <= lastx; c++) {
        var col = instance.jexcel.getConfig().columns[c];
        var colreadonly = col.readOnly;

        if (colreadonly) {
            col.readOnly = true;
            col.wasreadOnly = false;
        }
    }
    */
}

var spreadcontextmenu = function (instance, x, y, e) {
    var items = [];

    // only row related items
    if (y != null) {

        var KeyfieldIndex = GetKeyColumnIndex(instance.getConfig().columns);

        // insert copy after
        items.push({
            title: 'Insert copy of this row after',
            onclick: function () {
                //alert('Insert copy of this row after');
                var rowdata = instance.getRowData(y);

                // copy all columns except key field value
                instance.insertRow(1, parseInt(y));
                var yy = parseInt(y) + 1;
                for (var i = 0; i < rowdata.length; i++) {
                    if (i != KeyfieldIndex) {
                        instance.setValueFromCoords(i, yy, rowdata[i], true);
                    }
                }
            }
        });

        // insert copy before
        items.push({
            title: 'Insert copy of this row before',
            onclick: function () {
                //alert('Insert copy of this row after');
                var rowdata = instance.getRowData(y);

                // copy all columns except key field value
                if (i != KeyfieldIndex) {
                    instance.insertRow(1, parseInt(y), true);
                }
                var yy = parseInt(y);

                setTimeout(function () {
                    for (var i = 0; i < rowdata.length; i++) {
                        instance.setValueFromCoords(i, yy, rowdata[i], true);
                    }
                });
            }
        });

        // Line
        items.push({ type: 'line' });

        // move row up
        if (parseInt(y) > 0) {
            items.push({
                title: 'Move this row up',
                onclick: function () {
                    instance.moveRow(y, parseInt(y) - 1);
                }
            });
        }

        // move row down
        items.push({
            title: 'Move this row down',
            onclick: function () {
                instance.moveRow(y, parseInt(y) + 1);
            }
        });

        // Line
        items.push({ type: 'line' });

        // insert row before
        if (instance.options.allowInsertRow == true) {
            items.push({
                title: instance.options.text.insertANewRowBefore,
                onclick: function () {
                    //alert('before');
                    instance.insertRow(1, parseInt(y), true);
                }
            });
        }

        // after
        if (instance.options.allowInsertRow == true) {
            items.push({
                title: instance.options.text.insertANewRowAfter,
                onclick: function () {
                    //alert('after');
                    instance.insertRow(1, parseInt(y));
                }
            });
        }

        // Line
        items.push({ type: 'line' });

        // delete
        if (instance.options.allowDeleteRow == true) {
            items.push({
                title: 'Delete current row', //instance.options.text.deleteSelectedRows,
                onclick: function () {
                    hgConfirm('Are you sure you want to delete row ' + (parseInt(y) + 1) + '?', function () { instance.deleteRow(parseInt(y)); }, 'Delete Row', 400);
                }
            });
        }

        // Line
        items.push({ type: 'line' });

        items.push({
            title: 'Undo',
            onclick: function () {
                //alert('delete');
                instance.undo();
            }
        });



        items.push({
            title: 'Redo',
            onclick: function () {
                //alert('delete');
                instance.redo();
            }
        });

        /*
        // Line
        items.push({ type: 'line' });

        items.push({
            title: 'Download CSV',
            onclick: function () {
                //alert('delete');
                instance.download();
            }
        });
        */

    }

    return items;
}

var calendaroptions = {
    // Date format
    format: 'MM/DD/YYYY',
    // Allow keyboard date entry
    readonly: 0,
    // Today is default
    today: 0,
    // Show timepicker
    time: 0,
    // Show the reset button
    resetButton: true,
    // Placeholder
    placeholder: 'xxx',
    // Translations can be done here
    months: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    weekdays: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    weekdays_short: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
    // Value
    value: null,
    // Events
    onclose: null,
    onchange: null,
    // Fullscreen (this is automatic set for screensize < 800)
    fullscreen: false
};

var jquerydatepicker = {
    // Methods
    closeEditor: function (cell, save) {

        var value = cell.children[0].value;
        cell.innerHTML = value;
        return value;
    },
    openEditor: function (cell) {
        // Create input
        var element = document.createElement('input');
        element.value = cell.innerHTML;
        element.setAttribute('class', 'datepicker');

        // Update cell
        cell.classList.add('editor');
        cell.innerHTML = '';
        cell.appendChild(element);

        /*
        $(element).datepicker({
            dateFormat: 'm/d/yyyy',
            autoclose: true,
            width: 300,
            onSelect: function (t, e) {
                this.value = t;
                setTimeout(function () {

                    // To avoid double call
                    if (cell.children[0]) {
                        table.closeEditor(cell, true);
                    }
                });
            }
        });
        */
        // Focus on the element
        element.focus();
    },
    getValue: function (cell) {
        return cell.innerHTML;
    },
    setValue: function (cell, value) {
        cell.innerHTML = value;
    }
}

var noEditor = {
    closeEditor: function (cell, save) { return; },
    openEditor: function (cell) { return; },
    getValue: function (cell) {
        return $(cell).html();
    },
    setValue: function (cell, value) {
        $(cell).html(value);
        $(cell).css('color', value);
        return true;
    }
}



//#endregion

//#region new grid functions
function gridPop(o) {

    /* usage
    gridPop({

        type: 'horizontal', // default or 'vertical' or 'spread' or 'chat' or 'docs'

        element: ,
        context: '',
        contextID: ,

        my: null,
        at: null,
        of: null,
        w: RelativePixels('w', .7, 1000),
        h: RelativePixels('w', .6, 500),
        title: 'Test',
        load: 'grid-dialog.aspx', // page, default: Grid_Dialog.aspx
        data: {Test_}, // JSON, post data
        buttons: , // default Cancel and Save (saves grid)
        buttonsInTitle: , // true/false, default false
        saveFunction: ,// default function save grid, update interface, remove dialog
        afterSave: // function
    });
    */

    if (o.type == 'docs') {
        //PopDocDialog(o.context, o.contextID, null, null, o.w, o.h, o.element);
        gridDocDialog(o);
        return;
    }


    if (o.my == null) {
        o.my = "center";
    }

    if (o.at == null) {
        o.at = "center";
    }

    if (o.of == null) {
        o.of = window;
    }

    if (o.load == null) {
        o.load = "dialog.aspx";
    }

    if (o.data == null) {
        o.data = {};
    }

    if (o.type == 'chat') {
        
        $(o.element).addClass('CurrentChat');

        o.buttons = {
            'Add': {
                text: 'Add Comment',
                priority: 'primary',
                style: 'background: #428BCA; color: #fff;',
                click: function () {
                    
                    var LastComment = $('#tabChatComment .hgResult').val();

                    if (LastComment != '') {
                        if (LastComment.length > 20) {
                            LastComment = LastComment.substr(0, 17) + '...';
                        }

                        $('.CurrentChat').text(LastComment).removeClass('CurrentChat');
                    }

                    gridSave({
                        id: 'ChatComment',
                        afterSave: function () {

                            $('#dia' + o.context).dialog('destroy').remove();
                            return;
                        }
                    });
                }
            }
            ,
            Cancel: {
                text: 'Cancel',
                priority: 'secondary',
                click: function () {
                    $('#dia' + o.context).dialog('destroy').remove();
                    return;
                }
            }
        };
    }

    if (o.buttons == null) {
        o.buttons = {
            Cancel: {
                text: 'Cancel', priority: 'secondary', click: function () {
                    $('#dia' + o.context).dialog('destroy').remove();
                }
            },
            'Save': {
                text: 'Save', priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {
                    if (o.saveFunction != null) {
                        o.saveFunction();
                        return;
                    }
                    else {
                        gridSave({
                            id: $('#dia' + o.context + ' table:first').attr('id'),

                            afterSave: function (response) {
                                if (o.afterSave != null) {
                                    o.afterSave();
                                    return;
                                }
                                else {
                                    if (response.split('|')[0] != 'Error') {
                                        $('#dia' + o.context).dialog('destroy').remove();
                                    }
                                }
                            }
                        });
                    }

                    return;
                }
            }
        }
    }

    var dialogP = $("<div id='dia" + o.context + "' style='position:relative; margin: 0px;'><img id='imgWait' src='images/wait.gif' class='waitgif' /></div>").dialog({
        autoOpen: false,
        title: o.title,
        position: { my: o.my, at: o.at, of: o.of },
        height: o.h,
        width: o.w,
        dialogClass: 'no-close',
        modal: true,
        closeOnEscape: false,
        buttons: o.buttons,
        dialogObj: o
    });

    o.data.c = o.context;
    o.data.cid = o.contextID;
    o.data.h = o.h;
    o.data.w = o.w;
    o.data.t = o.title;
    o.data.type = o.type;

    // post 
    dialogP.load(o.load.replace(/.aspx/, ''), o.data);

    dialogP.dialog("open");

    if (o.buttonsInTitle) {
        CloneButtonsInTitle('dia' + o.context);
    }

    return false;
}

function gridValidate(o) {

    /* usage
    gridValidate({
        id: ,
        onvalid: , // function
        oninvalid: // function
    });
    */

    var gridid = o.id;
    var onvalid = o.onvalid;
    var oninvalid = o.oninvalid;

    var changes = '';
    var valid = true;

    // determine type of grid

    // hg
    $('.hg#' + o.id).each(function () {

        // verify if auto save is on, check all rows for changes
        var gas = $(this).attr('gas');

        // get edited rows
        var $r = $(this).find('tbody tr.RowEdit');

        if ($r.length > 0) {

            if (gas != '1') {
                hgEdit(this);
            }

            var $Results = $r.find('.hgResult');
            var kfv = $r.attr('kfv');

            changes += gridValidateRow({
                id: o.id,
                kfv: kfv,
                results: $Results,
                oninvalid: function () {
                    valid = false;
                    o.invalid();
                    return false;
                }
            });
        }
    });

    // vg
    $('.vg#' + o.id).each(function () {
        var $Results = $(this).find('.hgResult');
        var kfv = $(this).attr('kfv');

        changes += gridValidateRow({
            id: o.id,
            kfv: kfv,
            results: $Results,
            oninvalid: function () {
                valid = false;
                o.oninvalid();
                return false;
            }
        });
    });


    // editorform
    $('.hgeditformtable').each(function () {
        var $Results = $(this).find('.hgResult');
        var kfv = $(this).attr('kfv');

        changes += gridValidateRow({
            id: o.id,
            kfv: kfv,
            results: $Results,
            oninvalid: function () {
                valid = false;
                o.oninvalid();
                return false;
            }
        });
    });

    if (valid) {
        o.onvalid(changes);
    }
}

function gridValidateRow(o) {

    /* usage
    gridValidateRow({
        id:,
        kfv: ,
        results:,
        oninvalid:
    });
    */

    var valid = true;
    var Change = "";

    var $tb = $('#' + o.id);
    var $tr = $tb.find('.hgHeaderRow:first');
    var $ths = $tr.find('th');

    var $r = $tb.find("tr[kfv='" + o.kfv + "']");

    var IsNewRecord = $r.hasClass('hgNewRecord');

    var as = $tb.attr('as');

    o.results.each(function (index) {

        var $resulte = $(this);

        var ftemplate = $resulte.attr('template');

        // update
        UpdateTemplate($resulte[0]);

        var Result = $resulte.attr('resultkey');
        if (Result == "" || ftemplate == 'text') {
            Result = $resulte.attr('result');
        }

        var fe = "";
        var fn = "";
        var ft = "";
        var fs = "";
        var fc = "";
        var fr = "";
        var fi = "";
        var FieldLabel = "";

        //if (hgfID != '') {
        if ($resulte.attr('tdo') != null) {
            var TDIndex = $resulte.attr('tdo');
            $th = $ths.eq(TDIndex);

            fe = $th.attr('fe');
            fn = $th.attr('fn');
            ft = $th.attr('ft');
            fs = $th.attr('fs');
            fc = $th.attr('fc');
            fr = $th.attr('fr');
            fi = $th.attr('fi');
            FieldLabel = $th.text().replace(/\*/, "");
        }
        else {
            var $tdl = $resulte.closest('tr').find('.vgLabel');

            fe = $tdl.attr('fe');
            fn = $tdl.attr('fn');
            ft = $tdl.attr('ft');
            fs = $tdl.attr('fs');
            fc = $tdl.attr('fc');
            fr = $tdl.attr('fr');
            fi = $tdl.attr('fi');
            FieldLabel = $tdl.text().replace(/\*/, "");

            // unformat
            if ($tdl.attr('fnf').indexOf('%') > -1) {
                Result = Result.replace('#', '').replace(',', '').replace('%', '');
                if ($.isNumeric(Result)) {
                    Result = ((Result) / 100) + '';
                }
            } else if ($tdl.attr('fnf').indexOf('#') > -1) {
                Result = Result.replace('#', '').replace(',', '');
            }
        }

        if (fi == '1') return true;

        $resulte.css('background-color', 'white');

        // check for required for existing data
        if (fr == "1" && Result == "" && valid == true && !IsNewRecord) {
            $resulte.css('background-color', '#FCF8E3');
            //MessageBox("Validation: Required Field Empty", "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", "warning");
            gridBox({ type: "message", title: "Validation: Required Field Empty", body: "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", type: "warning" });
            // restore old values
            $resulte.attr('resultkey') == $resulte.attr('oresultkey');
            $resulte.attr('result') == $resulte.attr('oresult');
            valid = false;
            return valid;
        }

        //if (($resulte.attr('oresultkey') != $resulte.attr('resultkey') || $resulte.attr('oresult').replace(/\r\n/g, "<br>") != $resulte.attr('result')) && valid == true) {
        if (($resulte.attr('oresultkey') != $resulte.attr('resultkey') || $resulte.attr('oresult') != $resulte.attr('result')) && valid == true) {

            if (Result != "") {
                // validate string length
                if (ft == "s" && fs > 0 && Result.length > fs && ftemplate == 'text') {
                    $resulte.css('background-color', '#FCF8E3');
                    //MessageBox("Validation: Text Too Long", "The text you entered is longer than the maximum length allowed (" + fs + " characters).<br /><br />Please edit.", "warning");
                    gridBox({ type: "message", title: "Validation: Text Too Long", body: "The text you entered is longer than the maximum length allowed (" + fs + " characters).<br /><br />Please edit.", type: "warning" });
                    // restore old values
                    $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                    $resulte.attr('result') == $resulte.attr('oresult');
                    valid = false;
                    return valid;
                }

                // Validate numbers
                if (ft == "n" && !$.isNumeric(Result) && ftemplate == 'text') {
                    $resulte.css('background-color', '#FCF8E3');
                    //MessageBox("Validation: Not a Number", "The text you entered is not a number. A number is expected.<br /><br />Please edit.", "warning");
                    gridBox({ type: "message", title: "Validation: Not a Number", body: "The text you entered is not a number. A number is expected.<br /><br />Please edit.", type: "warning" });
                    // restore old values
                    $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                    $resulte.attr('result') == $resulte.attr('oresult');
                    valid = false;
                    return valid;
                }

                // Validate dates
                if (fc == "1" && isNaN(Date.parse(Result))) {

                    // autocomplete dates
                    if (!isNaN(Date.parse(Result + '/' + (new Date).getFullYear()))) {
                        Result = Result + '/' + (new Date).getFullYear();
                        $resulte.attr('result', Result);
                    }
                    else {
                        $resulte.css('background-color', '#FCF8E3');
                        //MessageBox("Validation: Not a Date", "The text you entered is not a date. A date is expected.<br /><br />Please edit.", "warning");
                        gridBox({ type: "message", title: "Validation: Not a Date", body: "The text you entered is not a date. A date is expected.<br /><br />Please edit.", type: "warning" });
                        // restore old values
                        $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                        $resulte.attr('result') == $resulte.attr('oresult');
                        valid = false;
                        return valid;
                    }
                }
            }

            Change += "<fv f='" + fn + "' v='" + ResultEncode(Result) + "' t='" + ft + "' e='" + fe + "' />";
        }

    });


    if (valid) {

        if (Change != "") {

            // check for required for new records
            //if (IsNewRecord && 1==2) {
            if (IsNewRecord) {

                o.results.each(function (index) {

                    var $resulte = $(this);

                    var Result = $resulte.attr('resultkey');
                    if (Result == "") {
                        Result = $resulte.attr('result');
                    }

                    var fr = $ths.eq(index).attr('fr');
                    var FieldLabel = $ths.eq(index).text().replace(/\*/, "");

                    if (fr == "1" && Result == "") {
                        $resulte.css('background-color', '#FCF8E3');
                        //MessageBox("Validation: Required Field Empty", "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", "warning");
                        gridBox({ type: "message", title: "Validation: Required Field Empty", body: "You missed making an entry to a required field (" + FieldLabel + ").<br /><br />Please make an entry.", type: "warning" });
                        // restore old values
                        $resulte.attr('resultkey') == $resulte.attr('oresultkey');
                        $resulte.attr('result') == $resulte.attr('oresult');
                        valid = false;
                        return valid;
                    }


                });
            }

            if (valid) {
                Change = "<data tb='" + $tb.attr('tb') + "' kf='" + $tb.attr('kf') + "' kfv='" + o.kfv + "' as='" + as + "' >" + Change + "</data>";
                //alert(Change);
                //hgSaveChange(Change, $r, $Results, ModalID, cbParameters);
            }
        }
        else {
            // set post save flag in Grid
            $r.closest('.hg, .vg').attr('ps', '1');
            o.results.closest('.hg, .vg').attr('ps', '1');

            if (typeof (cbParameters) == 'function') {
                cbParameters();
                return;
            }
        }
    }


    if (!valid) {
        o.oninvalid();
        return;
    }


    return Change;

}

function gridSave(o) {
    /* usage
    gridSave({
        id: ,
        afterSave: // function 
    });
    */

    if (o.id.substr(0, 3) != 'tab') {
        o.id = 'tab' + o.id;
    }

    gridValidate({
        id: o.id,
        onvalid: function (changes) {
            gridPostChanges({
                changes: changes,
                success: function (response) {
                    var r = response.split('|');
                    if (r[0] == 'Error') {
                        //WaitBoxClose();                        //WaitBoxClose();
                        gridBox({ closeBox: true });
                        //MessageBox("Error Saving Data", response.replace('Error|', '') + "<br /><br />Please edit or cancel.", "danger");
                        gridBox({ type: "message", title: "Error Saving Data", body: response.replace('Error|', '') + "<br /><br />Please edit or cancel.", type: "danger" });
                        return;
                    }
                    else {
                        o.afterSave(response);
                    }
                },
                error: function (response) {
                    //WaitBoxClose();
                    gridBox({ closeBox: true });
                    //MessageBox("Error Saving Data", response.replace('Error|', '') + "<br /><br />Please edit or cancel.", "danger");
                    gridBox({ type: "message", title: "Error Saving Data", body: response.replace('Error|', '') + "<br /><br />Please edit or cancel.", type: "danger" });
                    return;
                }
            });
        },
        oninvalid: function () {
            return false;
        }
    });

}

function gridPostChanges(o) {
    // usage
    /*
     gridPostChanges({
        changes: ,
        success: ,// function
        newid: ,
        error:
     });
     */

    //Encode
    changes = o.changes.replace(/\</g, "-[_").replace(/\>/g, "_]-");

    // save
    $.ajax({
        type: 'POST',
        url: 'Process_Change',
        async: false,
        processData: false,
        data: o.changes,
        success: function (response) {
            o.success(response);
        },
        error: function (response) {
            o.error(response);
        }
        /*

            function (r) {

            // parse response
            var Result = r.split("|");

            if (Result[0] == 'Error') {
                WaitBoxClose();
                MessageBox("Error Saving Data", r.replace('Error|', '') + "<br /><br />Please edit or cancel.", "danger");
                return;
            }

            if (PickerElement != null) {

                if (Result[0] == 'NewID') {
                    NewIDs = Result[3];
                }

                var FieldForm = $(PickerElement).closest('.vg, .hg');

                var kf = FieldForm.attr('kf');
                var kfv = FieldForm.attr('kfv');
                var tb = FieldForm.attr('tb');

                PickerCurrentIDs = spread.getColumnData(keyfieldindex).filter(Boolean).join(',');

                // spread update
                var jqxhr = $.getJSON("Process_Request.aspx", {
                    action: "PickerLink",
                    cids: PickerCurrentIDs,
                    nid: NewIDs,
                    form: PickerForm,
                    field: PickerField,
                    ls: 'PC',
                    kf: kf,
                    kfv: kfv,
                    table: tb
                })
                    .done(function (data) {

                        $(PickerElement).attr('resultkey', data.LinkIDs);
                        $(PickerElement).text(data.LinkText);

                        $('#diaSpread' + PickerForm).dialog('destroy').remove();

                        // focus on next fields
                        if (f.indexOf('Product_Designer_') == -1) {

                            //var nr = $(e).closest('tr').next('tr').find('.hgResult');
                            var nr = $(PickerElement).closest('tr').nextAll('tr:visible:first').find('.hgResult');

                            if (nr.find('input').length == 1) {
                                nr.find('input').caretToEnd();
                            }
                            else if (nr.is('a')) {
                                //nr.focus();
                                //setTimeout(function () { nr.click(); }, 500);
                                setTimeout(function () {
                                    nr.focus();

                                    if (nr.text() == 'None') {
                                        nr.click();
                                    }
                                },
                                    500);
                            }
                            else {
                                nr.focus();
                            }
                        }

                        WaitBoxClose();

                        //alert("done");
                    }).fail(function (data) {
                        WaitBoxClose();
                        alert("PickerLink failed.");
                    });
            }

            if (typeof (afterSubmitChanges) == 'function') {
                var CurrentIDs = spread.getColumnData(keyfieldindex).filter(Boolean).join(',');
                if (Result[0] == 'NewID') {
                    NewIDs = Result[3];
                }
                afterSubmitChanges(CurrentIDs, NewIDs);
            }

        },
        error: function (response) {
            WaitBoxClose();
            MessageBox("Error Saving Data", "Please edit or cancel.", "danger");
            return;
        }
        */
    });
}

// creates single row edit form in an hg
function gridEditorForm(o) {

    /* usage
    gridEditorForm({
        element: ,
        w: RelativePixels('w', 1, 400),
        h: RelativePixels('h', 1, 600),
        afterLoad: // function optional
    });
    */


    //return;

    var $r = $(o.element).closest('tr');
    var key = $r.attr('kfv');
    $t = $(o.element).closest('table');
    var TableID = $t.attr('id');
    var $ths = $t.find('.hgHeaderRow:first th');
    var $title = $t.find('.hgTitle:first');
    var Title = $title.html();
    Title = Title.substring(0, Title.lastIndexOf("New"));
    var hgfID = $t.attr('id').replace(/tab/, "hgf");
    var Reference = $(o.element).closest('td').text();
    var HTML = "";

    if (Title == "") {
        // closest ui title
        Title = $('.ui-dialog-title').html();
    }

    if ($title.find('span:first').length > 0) {
        Title = $title.find('span:first').html();
    }
    else if ($title.find('.hgTitleSplitter').length > 0) {
        Title = $title.find('td:first').html();
    }
    else if (Title == null) {
        Title = $('.hg thead tr:first').text();
    }

    if (Reference == "" || Reference == null) {
        Reference = "New";
    }

    $r.children('td').each(function (index) {

        var ftp = $ths.eq(index).attr('ftp');
        var fd = $ths.eq(index).attr('fd');
        var fde = $ths.eq(index).attr('fde');
        var fhe = $ths.eq(index).attr('fhe');

        var ftpAttr = "";
        var id = $ths.eq(index).attr('id')

        // change the ID to the field name
        ftp = ftp.replace(/_id=/g, "id=");

        var Key = $(this).attr('key');
        var Text = $(this).text();
        var OldKey = Key;
        var OldText = Text;


        if (ftp.indexOf("template='textarea'") > -1) {
            if (ftp.indexOf("tm='1'") > -1) {
                Text = $(this).html().replace(/'/g, '&apos;');
            }
            else {
                Text = $(this).html().replace(/<br>/g, "&#13;&#10;");
            }
            OldText = Text;
        }

        if (Text == "" && fde != "") {
            Text = fde;
            OldText = "";
        }

        if (fd == "1" && $(this).html().indexOf("PopDocDialog") > -1) {
            ftp = $(this).html();
            HTML += "<tr><td>" + $ths.eq(index).html() + "</td><td>" + ftp + "</td></tr>";
        }
        else if (fd != "1") {
            if (ftp != "") {
                ftpAttr += "class='hgResult' ";
                ftpAttr += "oresult='" + OldText + "' ";
                ftpAttr += "oresultkey='" + OldKey + "' ";
                ftpAttr += "result='" + Text + "' ";
                ftpAttr += "resultkey='" + Key + "' ";
                ftpAttr += "tdo='" + index + "' ";
                ftpAttr += "style='_width: 95%;' ";

                if (ftp.indexOf("template='select'") > -1) {
                    ftpAttr += "onchange='GetResultSelect(this);' ";
                    ftp = ftp.replace("value='" + Key + "'", "value='" + Key + "' selected='selected'")
                    ftp = ftp.replace(/<select/i, "<select " + ftpAttr);
                    ftp = ftp.replace('hgResult', 'hgResult form-control');
                }
                else if (ftp.indexOf("template='multipleselect'") > -1) {
                    //ftpAttr += "onchange='GetResultMultiSelect(this);' ";
                    var values = Key.split(", ");
                    for (var i = 0; i < values.length; i++) {
                        ftp = ftp.replace("value='" + values[i] + "'", "value='" + values[i] + "' checked");
                    }
                    ftp = ftp.replace(/value=/gi, " onclick='GetResultMultiSelect(this);' value=");

                    ftp = ftp.replace(/<table/i, "<table " + ftpAttr);
                }
                else if (ftp.indexOf("template='checkbox'") > -1) {
                    var cbvalue = Key;
                    if (cbvalue == "1" || cbvalue == "True") {
                        ftp = ftp.replace("value=", " checked value=");
                    }
                    ftp = ftp.replace(/value=/i, " onclick='GetResultCheckBox(this);' value=");
                    ftp = ftp.replace(/<input/i, "<input " + ftpAttr);
                    //ftp = "<div class='checkbox'>" + ftp + "</div>";
                    //ftp = ftp.replace('hgResult', 'hgResult form-control');

                }
                else if (ftp.indexOf("template='calendar'") > -1) {
                    //ftpAttr = ftpAttr.replace("class='", "class='col-sm-1 ");
                    //ftpAttr = ftpAttr.replace("style='_width: 95%;'", "style='width: 120px;padding: 0px;'");
                    ftp = ftp.replace(/<input/i, "<input value='" + Text + "'");
                    ftp = ftp.replace("class='", "class='datepicker ");
                    ftp = ftp.replace(/<div/i, "<div " + ftpAttr);

                    InitializeDatePicker();
                    //ftp = ftp.replace('hgResult', 'hgResult form-control');
                }
                else if (ftp.indexOf("template='textarea'") > -1) {
                    //var textarea = $(this).html();
                    //textarea = textarea.replace(/\r\n/g, "&#13;&#10;");
                    //textarea = textarea.replace(/\n/g, "&#10;");
                    //textarea = textarea.replace(/<br>/g, "&#13;&#10;");

                    //ftpAttr = ftpAttr.replace("class='", "class='col-sm-1 ");
                    //ftpAttr = ftpAttr.replace("style='_width: 95%;'", "style='width: 120px; padding: 0px;'");
                    //ftp = ftp.replace(/\>\</i, ftpAttr + ">" + textarea + "<");
                    ftp = ftp.replace(/\>\</i, ftpAttr + ">" + Text + "<");
                    /*
                    if (fhe == '1') {
                        ftp = "<textarea template='textarea' tm='1' rows='20' " + ftpAttr + ">" + Text + "</textarea>";
                    }
                    else {
                        ftp = "<textarea template='textarea' rows='6' " + ftpAttr + ">" + Text + "</textarea>";
                    }
                    */
                    ftp = ftp.replace('hgResult', 'hgResult form-control');
                }
            }
            else if (fd == "1") {
                ftp = Text;
            }
            else {
                var EditText = Text;
                EditText = EditText.replace(/\'/g, "&apos;");
                if (Key != "") { EditText = Key };

                var EditKey = "";

                var EditOldText = OldText;
                EditOldText = EditOldText.replace(/\'/g, "&apos;");
                if (OldKey != "") { EditOldText = OldKey };

                var EditOldKey = "";

                ftp = "<input template='text' class='hgResult' oresult='" + EditOldText + "' oresultkey='" + EditOldKey + "' result='" + EditText + "' resultkey='" + EditKey + "' onkeyup='GetResultTextBox(this);' type='textbox' value='" + EditText + "' style='_width: 95%;' tdo='" + index + "' />";
                ftp = ftp.replace('hgResult', 'hgResult form-control');
                //$(this).html("<input class='hgResult' oresult='" + EditText + "' oresultkey='" + EditKey + "' result='" + EditText + "' resultkey='" + EditKey + "' onkeyup='GetResultTextBox(this);' type='textbox' value='" + EditText + "' style='width: 95%;' />");
            }

            //$(this).html(ftp);
            //HTML += "<div class='form-group'><label class='control-label col-sm-2' for='" + $ths.eq(index).text() + "<'>" + $ths.eq(index).text() + "</label><div class='col-sm-10'>" + ftp + "</div></div>";
            HTML += "<tr><td>" + $ths.eq(index).html() + "</td><td>" + ftp + "</td></tr>";
        }
    });

    if (HTML != "") {
        HTML = "<div id=\"diae" + TableID + "\" style=\"padding: 10px; width: 100%; height: " + o.h + "px; overflow: auto;\" ><table class='table table-condensed table-borderless hgeditformtable' kfv=\"" + key + "\" srctableid=\"" + TableID + "\">" + HTML + "</table>";

        dialog = $(HTML).dialog({
            open: function (event, ui) { ApplyCascades(this); },
            autoOpen: false,
            title: Title + " - " + Reference,
            height: o.h + 100,
            width: o.w,
            dialogClass: 'no-close',
            modal: true,
            buttons: {
                Cancel: {
                    text: 'Cancel', priority: 'secondary', click: function () {
                        $(this).dialog("destroy").remove();
                    }
                },
                'Save': {
                    text: 'Save', priority: 'primary', style: 'background: #428BCA; color: #fff;', kfv: key, click: function () {
                        gridSave({
                            id: TableID,
                            afterSave: function () {

                                // update interface
                                var results = $('.hgeditformtable .hgResult');
                                var kfv = $('.hgeditformtable').attr('kfv');

                                $hgTDs = $('#' + TableID + ' tr[kfv="' + kfv + '"]').children('td');

                                if (results != null) {
                                    results.each(function () {
                                        var TDIndex = $(this).attr('tdo');
                                        $hgTD = $hgTDs.eq(TDIndex);
                                        $hgTD.attr('key', $(this).attr('resultkey'));
                                        var link = $hgTD.find('a');
                                        if (link.length == 1) {
                                            link.html($(this).attr('result'));
                                        }
                                        else {
                                            $hgTD.html($(this).attr('result'));
                                        }
                                    });
                                    $('#diae' + TableID).dialog('destroy').remove();
                                }
                                else {
                                    $('#diae' + TableID).dialog('destroy').remove();
                                    ReloadPage();
                                }
                            }
                        });
                    }
                }
            }
        });
        dialog.dialog("open");

        if (key == "-1") {
            // remove
            $t.find("tr[kfv='-1']").remove();
        }

        if (typeof afterLoad != 'undefined') {
            afterLoad(this);
        }

        var fe = $(dialog).first('.hgResult');
        $('#diae' + TableID + ' .hgResult:first').caretToEnd();

        $('.datepicker').datepicker({
            dateFormat: 'm/d/yy',
            autoclose: true,
            width: 300
        });
    }
}

// creates new form for an hg
function gridEditorFormNew(o) {

    /* usage
        gridEditorFormNew({
            element: ,
            w:,
            h:
        });
    */

    //add new row
    $t = $(o.element).closest('.hg');
    var n = $t.find('tr:last td').length;
    // if no data exists
    if (n == 0) {
        n = $t.find('tr:last th').length;
    }
    var tds = '<tr kfv="-1" style="display: none;">';
    for (var i = 0; i < n; i++) {
        tds += '<td key></td>';
    }
    tds += '</tr>';
    if ($t.find('tbody').length > 0) {
        $t.find('tbody').append(tds);
    } else {
        $t.append(tds);
    }

    $t.attr('kfv', '-1');

    e = $t.find('tr:last td:first');

    //gridEditorForm(e, w, h);
    gridEditorForm({
        element: e,
        w: o.w,
        h: o.h
    });
}

// deletes a row from a hgrid
function gridDeleteRow(o) {

     //usage:
     //gridDeleteRow({
     //   element: element,
     //})

    
    var $r = $(o.element).closest('tr[kfv]');
    var kfv = $r.attr('kfv');
    var $tb = $r.closest('table');
    var c = "<data tb='" + $tb.attr('tb') + "' kf='" + $tb.attr('kf') + "' kfv='" + kfv + "' as='" + $tb.attr('kf') + "' de='1' ></data>";

    gridBox({
        boxType: "confirm", body: "Are you sure you want to delete this item?<br /><br />This action cannot be reversed.", width: 400, type: "warning", yesFunction: function () {


            var status = true;


            if ($($r).closest('.hg').attr('gas') == "0" && cbParameters == null) {
                return status;
            }
            //Encode
            c = c.replace(/\</g, "-[_").replace(/\>/g, "_]-");

            // get jquery
            $.ajax({
                type: 'POST',
                url: 'Process_Change',
                async: false,
                processData: false,
                data: c,
                success: function (response) {
                    console.log(response);
                    if (response.split('|')[1] == "Success") {
                        //gridBox({ boxType: 'message', body: 'Row deleted successfully', type: 'success' });
                        $r.remove()
                    }
                },
                error: function (response) {
                    //hgSaveChangeCallback(response, tr, results, ModalID, cbParameters);
                    if (response.split('|')[1] != "Success") {
                        gridBox({ boxType: 'message', body: 'Error deleting row', type: 'danger' });
                    }
                }
            });

            return status;
        }
    });

    //if (confirm("Are you sure you want to delete this record?\n\nThis action cannot be reversed.")) {
    //hgSaveChange(c, $r, null, ModalID);
    //}

}

//#region RowGroups

function gridGroup(o) {
    /* usage
    gridGroup({
        toggle: , // grid, row, set
        mode: , // c=collapsed, e=expanded
        element: 
    });
    */

    var t = $(o.element).closest('.hg');
    if (t == null) return;
    var trs = t.find('tbody:last tr');

    var cc = o.element.className;
    var hr = t.find('thead tr').has('th').length;
    var r = o.element.rowIndex - hr;
    var a = "";

    if (o.toggle == 'grid') {
        for (var r = 0; r < trs.length; r++) {

            var row = trs[r];
            var cn = row.className;

            if (cn.indexOf("RowGroup") == 0) {
                if (Mode == "+") {
                    $(row).addClass('RowGroupCollapsed').removeClass('RowGroupExpanded');
                }
                else {
                    $(row).addClass('RowGroupExpanded').removeClass('RowGroupCollapsed');
                }
            }
            else {
                if (Mode == "+") {
                    row.style.display = "none";
                }
                else {
                    row.style.display = "";
                }
            }
        }
    }

    if (o.toggle == 'row') {
        if (cc.indexOf("RowGroupCollapsed") > -1) {
            $(e).addClass('RowGroupExpanded').removeClass('RowGroupCollapsed');
        }
        else {
            $(e).addClass('RowGroupCollapsed').removeClass('RowGroupExpanded');
            a = "none";
        }

        var trs = t.find('tbody:last tr');

        for (var i = r + 1; i < trs.length; i++) {
            var row = trs[i];
            if ((row.className.indexOf("RowGroup") > -1 && row.className.substr(8, 2) <= cc.substr(8, 2)) || i == row.length - 1 || row.className == "hgNewRecord") {
                break;
            }
            else {
                row.style.display = a;
            }

        }
    }

    if (o.toggle == 'set') {
        $('[class^="RowGroup"]').each(function (index, e) {
            var t = e.parentNode;
            var cc = e.className;
            var r = e.rowIndex - 2;
            var a = "";
            var rowcount = 0

            if (cc.indexOf("RowGroupCollapsed") > -1) {
                a = "none";
            }

            for (var i = r + 1; i < t.rows.length; i++) {
                if ((t.rows(i).className != "" && t.rows(i).className <= cc) || i == t.rows(i).length - 1 || t.rows(i).className == "hgNewRecord") {
                    var GroupTD = e.childNodes[0];
                    //GroupTD.innerHTML = e.childNodes[0].textContent + "&nbsp;&nbsp;<span class='badge RowGroupBadge'>" + rowcount + "</span>";
                    //GroupTD.innerHTML = e.childNodes[0].textContent + "&nbsp;<sup>" + rowcount + "</sup>";
                    GroupTD.innerHTML = e.childNodes[0].textContent;
                    break;
                }
                else {
                    t.rows(i).style.display = a;
                    if (t.rows(i).className.indexOf('RowGroup') == -1) {
                        rowcount = rowcount + 1;
                    }
                }
            }
        });
    }
}

function ToggleGroups(e, Mode) {

    var t = $(e).closest('.hg');
    if (t == null) return;

    var trs = t.find('tbody:last tr');

    for (var r = 0; r < trs.length; r++) {

        var row = trs[r];
        var cn = row.className;

        if (cn.indexOf("RowGroup") == 0) {
            if (Mode == "+") {
                $(row).addClass('RowGroupCollapsed').removeClass('RowGroupExpanded');
            }
            else {
                $(row).addClass('RowGroupExpanded').removeClass('RowGroupCollapsed');
            }
        }
        else {
            if (Mode == "+") {
                row.style.display = "none";
            }
            else {
                row.style.display = "";
            }
        }
    }
}

function ToggleRowGroup(e) {

    //return;

    //var t = e.parentNode;
    var t = $(e).closest('.hg');
    var cc = e.className;
    var hr = t.find('thead tr').has('th').length;
    var r = e.rowIndex - hr;
    var a = "";

    if (cc.indexOf("RowGroupCollapsed") > -1) {
        $(e).addClass('RowGroupExpanded').removeClass('RowGroupCollapsed');
    }
    else {
        $(e).addClass('RowGroupCollapsed').removeClass('RowGroupExpanded');
        a = "none";
    }

    var trs = t.find('tbody:last tr');

    for (var i = r + 1; i < trs.length; i++) {
        var row = trs[i];
        if ((row.className.indexOf("RowGroup") > -1 && row.className.substr(8, 2) <= cc.substr(8, 2)) || i == row.length - 1 || row.className == "hgNewRecord") {
            break;
        }
        else {
            row.style.display = a;
        }

    }
}

function SetRowGroups() {

    return;

    $('[class^="RowGroup"]').each(function (index, e) {
        var t = e.parentNode;
        var cc = e.className;
        var r = e.rowIndex - 4;
        var a = "";
        var rowcount = 0

        if (cc.indexOf("RowGroupCollapsed") > -1) {
            a = "none";
        }

        for (var i = r + 1; i < t.rows.length; i++) {
            if ((t.rows(i).className != "" && t.rows(i).className <= cc) || i == t.rows(i).length - 1 || t.rows(i).className == "hgNewRecord") {
                var GroupTD = e.childNodes[0];
                //GroupTD.innerHTML = e.childNodes[0].textContent + "&nbsp;&nbsp;<span class='badge RowGroupBadge'>" + rowcount + "</span>";
                //GroupTD.innerHTML = e.childNodes[0].textContent + "&nbsp;<sup>" + rowcount + "</sup>";
                GroupTD.innerHTML = e.childNodes[0].textContent;
                break;
            }
            else {
                t.rows(i).style.display = a;
                if (t.rows(i).className.indexOf('RowGroup') == -1) {
                    rowcount = rowcount + 1;
                }
            }
        }
    });
}

//#endregion

//#endregion new grid functions

function gridBox(o) {

    /* usage
    gridPop({
        boxType:        'message' is default    | options: 'message', 'wait', 'confirm'
        type:           'success' is default    | options: 'success', 'danger', 'info', 'warning'
        my:             'center'  is default
        at:             'center'  is default
        of:             window    is default
        width:          500       is default
        title:          'Message Box' is default
        body:           'Enter a body key' is default
        buttons:    
        buttonsInTitle: false is default false
        yesFunction:    void function is default
        noFunction:     void function is default
        closeBox: if true, will close a wait box, to use with setTimeout or async code.
    });
    */

    //$('#MessageBox .modal-body').html(body);
    //$('#MessageBox .modal-title').html(title);

    if (o.closeBox == true) {
        $('#divWaitBox').dialog('destroy').remove();
        return;
    }

    var boxType = o.boxType || 'message';
    var title = o.title || 'Message Box';
    var attachingDiv = "";
    var type = o.type || "success";
    var body = o.body || "Enter a body key";

    var cancel = o.cancel;
    var cancelDisplay = 'none';


    //var confirmFunction = o.confirmFunction;
    var yesFunction = o.yesFunction || function () { }
    var noFunction = o.noFunction || function () { }
    var closefunction = o

    var yesButtonText = o.yesButtonText || " Yes ";
    var noButtonText = o.noButtonText || " No ";


    var width = o.width || 500;
    var my = o.my || "center";
    var at = o.at || "center";
    var of = o.of || window;

    // type
    var backgroundColor = '#337AB7';
    if (type == "danger") { backgroundColor = '#D9534F'; }
    if (type == "success") { backgroundColor = '#5CB85C'; }
    if (type == "info") { backgroundColor = '#5BC0DE'; }
    if (type == "warning") { backgroundColor = '#F0AD4E'; }

    if ($(window).innerWidth() < width) {
        width = $(window).innerWidth() * .9;
    }


    if (cancel == true) {
        cancelDisplay = '';
    }

    var noButtonStyle;

    //$('#MessageBox .modal-header').css('background-color', backgroundColor);

    //size
    //$('.hgeditformmodaldialog').css('width', w + "px");
    //$('MessageBox .modal-dialog').css('width', w + "px");

    // popup
    //$('#MessageBox').modal(); $('#MessageBox .modal-dialog').draggable({ handle: '.modal-header' });

    //buttons


    if (boxType == "message") {
        attachingDiv = "<div class='message-dialog' >" + body + "</div>";
        noButtonStyle = 'display: ' + cancelDisplay + '; '
    }
    else if (boxType == "wait") {
        attachingDiv = "<div id='divWaitBox' class='message-dialog' style='text-align: center;'><img id='imgWait' src='images/wait.gif' /><br /><br />" + body + "</div>";
    }
    else if (boxType == "confirm") {
        attachingDiv = "<div id='diaConfirm' class='confirm-dialog' >" + body + "</div>"
    }

    var buttons = {
        Cancel: {
            text: noButtonText, priority: 'secondary', style: noButtonStyle, click: function () {
                $(this).dialog('destroy');
                noFunction();
                return true;
            }
        },
        'OK': {
            text: yesButtonText, priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {
                $(this).dialog('destroy');
                yesFunction();
                return true;
            }
        }
    }

    dialogM = $(attachingDiv).dialog({
        autoOpen: true,
        title: title,
        width: width,
        position: { my: my, at: at, of: of },
        dialogClass: 'no-close',
        modal: true,
        buttons: boxType != 'wait' ? buttons : null
    }).prev('.ui-dialog-titlebar').css('background', backgroundColor);

    //dialogM.find('.ui-dialog-buttonpane').show();



}

function gridDocDialog(o) {

    var Context = o.context;
    var ContextID = o.contextID;

    var w = o.w || 500;
    var h = o.h || 275;
    var x = o.x;
    var y = o.y;
    var e = o.element;

    var QS = "c=" + escape(Context) + "&cid=" + ContextID + "&w=" + w + "&h=" + h + "&t="; // + escape(Context);

    //dialog = $("<div style='position:relative;'>").dialog({
    dialog = $("<div id='diaDocs' ><iframe id='ifrDocs' name='ifrDocs' style='width: " + (w - 2) + "px; height: " + (h - 135) + "px; margin: 0; padding: 0; border: 0px solid #000;' src='documents.aspx?" + QS + "' ></iframe></div>").dialog({
        autoOpen: false,
        title: Context + ' Documents',
        height: h,
        width: w,
        dialogClass: 'no-close',
        modal: true,
        closeOnEscape: false,
        buttons: {
            'Upload': {
                text: 'Select Document', priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {
                    //document.frames["ifrDocs"].document.    BrowseFiles('File1');

                    $('#ifrDocs').contents().find('#File1').click();
                    //WaitBox('Uploading Document', 'Please wait', 'info');
                }
            }
            ,
            Cancel: {
                text: 'Close', priority: 'secondary', click: function () {
                    //dialog.dialog("close");
                    //return false;
                    //PostDocDialog(Context, ContextID);
                    if (typeof(o.uiUpdateFunction) == 'function') {
                        o.uiUpdateFunction(e);
                    }
                    else {
                        var docCount = $('#ifrDocs').contents().find('tbody tr').length;
                        $(e).text(docCount + ' Docs');
                        if (docCount == 0) {
                            $(e).text('None');
                        }      
                    }

                    $(this).dialog('destroy').remove();
                }
            }
        }
    });


    //dialog.load("documents.aspx?" + QS);
    dialog.dialog("open");

    if ('ondrop' in document.createElement('div')) {

        var buttons = $('#diaDocs').parent().find('.ui-dialog-buttonset');

        //buttons.before($('<div ondragenter="DocsDragEnter(window.event);" ondragover="DocsDragOver(window.event);" ondrop="DocsDrop(window.event);" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" style="padding: 15px;" >Drag and Drop</div>'));
        buttons.before($('<span style="color: gray;">Click Select Document or Drag & Drop documents to panel above.</span>'));
    }

    if (typeof (PopDocDialogTitle) == 'function') {
        PopDocDialogTitle(Context, ContextID, e);
    }

    return false;
}


function gridSaveChange(o) {
    var c = o.change;
    var tr = o.table_row;
    var results = o.results;
    var ModalID = o.modalId;

    var status = true;

    if ($(tr).closest('.hg').attr('gas') == "0" && cbParameters == null) {
        return status;
    }

    c = c.replace(/\</g, "-[_").replace(/\>/g, "_]-");

    $.ajax({
        type: 'POST',
        url: 'Process_Change',
        async: false,
        processData: false,
        data: c,
        success: function (response) {
            hgSaveChangeCallback(response, tr, results, ModalID, cbParameters);
        },
        error: function (response) {
            hgSaveChangeCallback(response, tr, results, ModalID, cbParameters);
        }
    });

    return status

}

function gridSetdPage(o) {
    /* -- usage
     gridSetPage({
        page: ,
        cookieName:
     });
    */
    
    SetCookie(o.cookieName, o.page, 1);
    document.forms[0].submit();
}

function gridEdit(o) {

    /* usage
    gridEdit({
        element:
    });
    */

    var e = o.element;

    //debugger;
    //check if item is being edited
    if ($(e).hasClass("RowEdit")) return;

    var valid = true;
    var Change = "";

    var $tb = $(e).closest('table');

    var $r = $tb.find('tbody tr.RowEdit');

    if ($r.length > 0) {
        var $Results = $r.find('.hgResult');
        var TableID = $tb[0].id;
        var kfv = $r.attr('kfv');

        // validate and save last edited
        gridSave({
            id: TableID,
            afterSave: function () {
                $Results.each(function () {
                    $(this).parent('td').attr('key', $(this).attr('resultkey'));
                    $(this).parent('td').html($(this).attr('result'));
                });

                $r.removeClass("RowEdit");

                // edit new row
                $(e).addClass("RowEdit");

                // get spec
                var $ths = $tb.find('.hgHeaderRow:first th');

                $(e).children('td').each(function (index) {

                    var ftp = $ths.eq(index).attr('ftp');
                    var fd = $ths.eq(index).attr('fd');
                    var fde = $ths.eq(index).attr('fde');
                    var ftpAttr = "";
                    var id = $ths.eq(index).attr('id')

                    // change the ID to the field name
                    ftp = ftp.replace(/_id=/g, "id=");

                    var Key = $(this).attr('key');
                    //var Text = $(this).text();
                    var Text = $(this).html();
                    var OldKey = Key;
                    var OldText = Text;

                    if (ftp.indexOf("template='textarea'") > -1) {
                        Text = $(this).html().replace(/<br>/g, "&#13;&#10;");
                        OldText = Text;
                    }

                    if (Text == "" && fde != "") {
                        Text = fde;
                        OldText = "";
                    }

                    if (ftp != "") {
                        ftpAttr += "class='hgResult' ";
                        ftpAttr += "oresult='" + OldText + "' ";
                        ftpAttr += "oresultkey='" + OldKey + "' ";
                        ftpAttr += "result='" + Text + "' ";
                        ftpAttr += "resultkey='" + Key + "' ";
                        ftpAttr += "tdo='" + index + "' ";
                        ftpAttr += "style='_width: 95%;' ";

                        if (ftp.indexOf("template='select'") > -1) {
                            //ftpAttr += "_onchange='GetResultSelect(this);' ";
                            //ftpAttr = ftpAttr.replace("style='_width: 95%;'", "style='width: auto;'");
                            ftp = ftp.replace("value='" + Key + "'", "value='" + Key + "' selected='selected'")
                            ftp = ftp.replace(/<select/i, "<select " + ftpAttr);
                            ftp = ftp.replace('hgResult', 'hgResult form-control');
                        }
                        else if (ftp.indexOf("template='multipleselect'") > -1) {
                            //ftpAttr += "onchange='GetResultMultiSelect(this);' ";
                            var values = $(this).attr('key').split(", ");
                            for (var i = 0; i < values.length; i++) {
                                ftp = ftp.replace("value='" + values[i] + "'", "value='" + values[i] + "' checked");
                            }
                            ftp = ftp.replace(/value=/gi, " _onclick='GetResultMultiSelect(this);' value=");

                            ftp = ftp.replace(/<table/i, "<table " + ftpAttr);
                        }
                        else if (ftp.indexOf("template='checkbox'") > -1) {
                            var cbvalue = $(this).attr('key');
                            if (cbvalue == "1" || cbvalue == "True") {
                                ftp = ftp.replace("value=", " checked value=");
                            }
                            ftp = ftp.replace(/value=/i, " _onclick='GetResultCheckBox(this);' value=");
                            ftp = ftp.replace(/<input/i, "<input " + ftpAttr);
                            //ftp = "<div class='checkbox'>" + ftp + "</div>";
                            //ftp = ftp.replace('hgResult', 'hgResult form-checkbox');

                        }
                        else if (ftp.indexOf("template='calendar'") > -1) {
                            //var datevalue = $(this).text();
                            //ftpAttr = ftpAttr.replace("class='", "class='col-sm-1 ");
                            //ftpAttr = ftpAttr.replace("style='_width: 95%;'", "style='width: 120px; padding: 0px;'");
                            ftp = ftp.replace(/<input/i, "<input value='" + Text + "'");
                            ftp = ftp.replace("class='", "class='datepicker ");
                            ftp = ftp.replace(/<div/i, "<div " + ftpAttr);

                            InitializeDatePicker();
                        }
                        else if (ftp.indexOf("template='textarea'") > -1) {
                            //var textarea = $(this).text();
                            //textarea = textarea.replace(/<br>/g, "\r\n");
                            ftp = ftp.replace(/\>\</i, ftpAttr + ">" + Text + "<");
                            ftp = ftp.replace('hgResult', 'hgResult form-control');
                        }
                        else if (ftp.indexOf("template='multiplepicker'") > -1) {

                            //ftp = ftp.replace(/key=/i, "_key=");
                            if (Text == "") {
                                Text = "None";
                            }
                            ftp = ftp.replace(/\>\</i, ">" + Text + "<");
                            ftp = ftp.replace(/<a /i, "<a " + ftpAttr);
                        }
                        else if (ftp.indexOf("template='picker'") > -1) {

                            ftp = ftp.replace(/\>\</i, ">" + Text + "<");
                            ftp = ftp.replace(/<a /i, "<a " + ftpAttr);
                        }
                    }
                    else if (fd == "1") {
                        ftp = Text;
                    }
                    else {
                        var EditText = Text;
                        EditText = EditText.replace(/\'/g, "&apos;");
                        if (Key != "") { EditText = Key };
                        var EditKey = "";

                        var EditOldText = OldText;
                        EditOldText = EditOldText.replace(/\'/g, "&apos;");
                        if (OldKey != "") { EditOldText = OldKey };

                        var EditOldKey = "";

                        ftp = "<input template='text' class='hgResult' oresult='" + EditOldText + "' oresultkey='" + EditOldKey + "' result='" + EditText + "' resultkey='" + EditKey + "' _onkeyup='GetResultTextBox(this);' type='textbox' value='" + EditText + "' style='_width: 95%;' tdo='" + index + "' />";
                        //ftp = "<input template='text' type='textbox' " ftpAttr
                        ftp = ftp.replace('hgResult', 'hgResult form-control');
                        //$(this).html("<input class='hgResult' oresult='" + EditText + "' oresultkey='" + EditKey + "' result='" + EditText + "' resultkey='" + EditKey + "' onkeyup='GetResultTextBox(this);' type='textbox' value='" + EditText + "' style='width: 95%;' />");
                    }

                    $(this).html(ftp);

                });

                $(e).find('select[onchange=\"FilterSelect(this);\"]').each(function (index, value) {
                    // get selected target item value
                    tid = $(value).attr("tid");
                    var sv = $('#' + tid).find('option:selected').val();
                    FilterSelect(value);
                    $('#' + tid).find('option[value=\"' + sv + '\"]').attr('selected', 'selected');
                });

                if (typeof gridRowEdit == 'function') {
                    //gridRowEdit($tb[0], $(e).closest('tr'));
                    gridRowEdit({element: e});
                }
            }
        });
    }
}

function gridRowEdit(o) {
    /* usage
    gridRowEdit({
        element:
    });
    */

    $tb[0], $(e).closest('tr')

    //function hgRowEdit(t, r) {
    var t = $(o.element).closest('table')

        if (t.id == 'tabGrid') {

            r.find('.hgResult').keydown(function (event) {
                var keyCode = (event.keyCode ? event.keyCode : event.which);
                //event.stopPropagation();

                if (keyCode == 40 && !r.is(':last-child')) {
                    r.next('tr').click();
                }
                else if (keyCode == 38 && !r.is(':first-child')) {
                    r.prev('tr').click();
                }
                else if (keyCode == 13 && !r.is(':last-child')) {
                    r.next('tr').click();
                }
            });

            r.find('.datepicker,.hgResult').first().focus();

            var $input = r.find('.datepicker,.hgResult').first();
            var inputLength = $input.length;
            if (inputLength > 0) {
                try {
                    $input[0].focus();
                    $input[0].setSelectionRange(inputLength, inputLength);
                }
                catch (ex) {
                    var a = 1;
                }
            }

            if ($('#diaInvoiceOrders').length > 0) {

                var a = r.find('td:nth-child(3)').text();

                if (Number(a) <= 0) {
                    r.find('input, textarea').prop('disabled', true);
                    return;
                }

                var q = r.find('input[tdo="3"]');
                var i = r.find('input[tdo="9"]');

                q.on('keyup focusout', function () {

                    var a = q.closest('tr').find('td:nth-child(3)').text().replace(',', '');

                    if (q.val() * 1.0 > a * 1.0) {
                        q.val(a);
                        MessageBox('Invalid Quantity', 'Your requested quantity exceeds what is available.<br /><br />Your quantity has been changed to the available quantities.', 'danger');
                        return false;
                    }

                    if (q.val() == '') {
                        q.val('0');
                        i.attr('oresult', '');
                    }
                    else {
                        i.attr('oresult', '');
                    }

                    SetInvoiceOrdersTotalQuantity(t);

                });
            }
        }

        
    //}
}



function _PopDocDialog(Context, ContextID, x, y, w, h, e) {

    var QS = "c=" + escape(Context) + "&cid=" + ContextID + "&w=" + w + "&h=" + h + "&t="; // + escape(Context);

    //dialog = $("<div style='position:relative;'>").dialog({
    dialog = $("<div id='diaDocs' ><iframe id='ifrDocs' name='ifrDocs' style='width: " + (w - 2) + "px; height: " + (h - 135) + "px; margin: 0; padding: 0; border: 0px solid #000;' src='documents.aspx?" + QS + "' ></iframe></div>").dialog({
        autoOpen: false,
        title: Context + ' Documents',
        height: h,
        width: w,
        dialogClass: 'no-close',
        modal: true,
        closeOnEscape: false,
        buttons: {
            'Upload': {
                text: 'Select Document', priority: 'primary', style: 'background: #428BCA; color: #fff;', click: function () {
                    //document.frames["ifrDocs"].document.    BrowseFiles('File1');

                    $('#ifrDocs').contents().find('#File1').click();
                    //WaitBox('Uploading Document', 'Please wait', 'info');
                }
            }
            ,
            Cancel: {
                text: 'Close', priority: 'secondary', click: function () {
                    //dialog.dialog("close");
                    //return false;
                    PostDocDialog(Context, ContextID);
                    $(this).dialog('destroy').remove();
                }
            }
        }
    });


    //dialog.load("documents.aspx?" + QS);
    dialog.dialog("open");

    if ('ondrop' in document.createElement('div')) {

        var buttons = $('#diaDocs').parent().find('.ui-dialog-buttonset');

        //buttons.before($('<div ondragenter="DocsDragEnter(window.event);" ondragover="DocsDragOver(window.event);" ondrop="DocsDrop(window.event);" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" style="padding: 15px;" >Drag and Drop</div>'));
        buttons.before($('<span style="color: gray;">Click Select Document or Drag & Drop documents to panel above.</span>'));
    }

    if (typeof (PopDocDialogTitle) == 'function') {
        PopDocDialogTitle(Context, ContextID, e);
    }

    return false;
}

function eligibilityImports(e) {
    gridPop({
        type: 'docs',
        element: this,
        context: 'Eligibility',
        contextID: -100,
        title: 'Eligibility Imports',
        w: 1200,
        h: 600
    }); 
}